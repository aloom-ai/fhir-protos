//    Copyright 2022 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/fhirpath_replacement_list.proto (package google.fhir.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Defines a list of fhir path expressions to be replaced.
 *
 * @generated from message google.fhir.proto.FHIRPathReplacementList
 */
export class FHIRPathReplacementList extends Message<FHIRPathReplacementList> {
  /**
   * @generated from field: repeated google.fhir.proto.Replacement replacement = 1;
   */
  replacement: Replacement[] = [];

  constructor(data?: PartialMessage<FHIRPathReplacementList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.proto.FHIRPathReplacementList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replacement", kind: "message", T: Replacement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FHIRPathReplacementList {
    return new FHIRPathReplacementList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FHIRPathReplacementList {
    return new FHIRPathReplacementList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FHIRPathReplacementList {
    return new FHIRPathReplacementList().fromJsonString(jsonString, options);
  }

  static equals(a: FHIRPathReplacementList | PlainMessage<FHIRPathReplacementList> | undefined, b: FHIRPathReplacementList | PlainMessage<FHIRPathReplacementList> | undefined): boolean {
    return proto3.util.equals(FHIRPathReplacementList, a, b);
  }
}

/**
 * Defines all the information needed to replace a FHIR Path expression during
 * FHIRPath to SQL encoding.
 *
 * @generated from message google.fhir.proto.Replacement
 */
export class Replacement extends Message<Replacement> {
  /**
   * The full path from the parent resource to the field containing the
   * expression to be replaced.
   * E.g., if Patient has a subfield meta and meta has a field id, this could be
   * `Patient.meta.id`.
   * If not specified, this will apply to all expressions matching
   * `expression_to_replace`, regardless of element.
   *
   * @generated from field: string element_path = 1;
   */
  elementPath = "";

  /**
   * The expression to be replaced.
   *
   * @generated from field: string expression_to_replace = 2;
   */
  expressionToReplace = "";

  /**
   * The expression to be replaced with.
   * TODO(b/221470795): Look into adding a special token (like `$`) that
   * will be replaced with the name of the current resource.
   *
   * @generated from field: string replacement_expression = 3;
   */
  replacementExpression = "";

  constructor(data?: PartialMessage<Replacement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.proto.Replacement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "element_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression_to_replace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "replacement_expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Replacement {
    return new Replacement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Replacement {
    return new Replacement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Replacement {
    return new Replacement().fromJsonString(jsonString, options);
  }

  static equals(a: Replacement | PlainMessage<Replacement> | undefined, b: Replacement | PlainMessage<Replacement> | undefined): boolean {
    return proto3.util.equals(Replacement, a, b);
  }
}

