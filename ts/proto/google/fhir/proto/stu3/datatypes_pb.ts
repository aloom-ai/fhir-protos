//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/stu3/datatypes.proto (package google.fhir.stu3.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Auto-generated from StructureDefinition for base64Binary, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type base64Binary. See
 * http://hl7.org/fhir/StructureDefinition/base64Binary
 *
 * @generated from message google.fhir.stu3.proto.Base64Binary
 */
export class Base64Binary extends Message<Base64Binary> {
  /**
   * Primitive value for base64Binary
   *
   * @generated from field: bytes value = 1;
   */
  value = new Uint8Array(0);

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Base64Binary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Base64Binary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Base64Binary {
    return new Base64Binary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Base64Binary {
    return new Base64Binary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Base64Binary {
    return new Base64Binary().fromJsonString(jsonString, options);
  }

  static equals(a: Base64Binary | PlainMessage<Base64Binary> | undefined, b: Base64Binary | PlainMessage<Base64Binary> | undefined): boolean {
    return proto3.util.equals(Base64Binary, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for boolean, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type boolean. See
 * http://hl7.org/fhir/StructureDefinition/boolean
 *
 * @generated from message google.fhir.stu3.proto.Boolean
 */
export class Boolean extends Message<Boolean> {
  /**
   * Primitive value for boolean
   *
   * @generated from field: bool value = 1;
   */
  value = false;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Boolean>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Boolean";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Boolean {
    return new Boolean().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Boolean {
    return new Boolean().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Boolean {
    return new Boolean().fromJsonString(jsonString, options);
  }

  static equals(a: Boolean | PlainMessage<Boolean> | undefined, b: Boolean | PlainMessage<Boolean> | undefined): boolean {
    return proto3.util.equals(Boolean, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for code, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type code. See
 * http://hl7.org/fhir/StructureDefinition/code
 *
 * @generated from message google.fhir.stu3.proto.Code
 */
export class Code extends Message<Code> {
  /**
   * Primitive value for code
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Code>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Code";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Code {
    return new Code().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Code {
    return new Code().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Code {
    return new Code().fromJsonString(jsonString, options);
  }

  static equals(a: Code | PlainMessage<Code> | undefined, b: Code | PlainMessage<Code> | undefined): boolean {
    return proto3.util.equals(Code, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for date, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type date. See
 * http://hl7.org/fhir/StructureDefinition/date
 *
 * @generated from message google.fhir.stu3.proto.Date
 */
export class Date extends Message<Date> {
  /**
   * Primitive value for date
   *
   * @generated from field: int64 value_us = 1;
   */
  valueUs = protoInt64.zero;

  /**
   * @generated from field: string timezone = 2;
   */
  timezone = "";

  /**
   * @generated from field: google.fhir.stu3.proto.Date.Precision precision = 3;
   */
  precision = Date_Precision.PRECISION_UNSPECIFIED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 4;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 5;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Date>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Date";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "precision", kind: "enum", T: proto3.getEnumType(Date_Precision) },
    { no: 4, name: "id", kind: "message", T: String },
    { no: 5, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Date {
    return new Date().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Date {
    return new Date().fromJsonString(jsonString, options);
  }

  static equals(a: Date | PlainMessage<Date> | undefined, b: Date | PlainMessage<Date> | undefined): boolean {
    return proto3.util.equals(Date, a, b);
  }
}

/**
 * @generated from enum google.fhir.stu3.proto.Date.Precision
 */
export enum Date_Precision {
  /**
   * @generated from enum value: PRECISION_UNSPECIFIED = 0;
   */
  PRECISION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: YEAR = 1;
   */
  YEAR = 1,

  /**
   * @generated from enum value: MONTH = 2;
   */
  MONTH = 2,

  /**
   * @generated from enum value: DAY = 3;
   */
  DAY = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Date_Precision)
proto3.util.setEnumType(Date_Precision, "google.fhir.stu3.proto.Date.Precision", [
  { no: 0, name: "PRECISION_UNSPECIFIED" },
  { no: 1, name: "YEAR" },
  { no: 2, name: "MONTH" },
  { no: 3, name: "DAY" },
]);

/**
 * Auto-generated from StructureDefinition for dateTime, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type dateTime. See
 * http://hl7.org/fhir/StructureDefinition/dateTime
 *
 * @generated from message google.fhir.stu3.proto.DateTime
 */
export class DateTime extends Message<DateTime> {
  /**
   * Primitive value for dateTime
   *
   * @generated from field: int64 value_us = 1;
   */
  valueUs = protoInt64.zero;

  /**
   * @generated from field: string timezone = 2;
   */
  timezone = "";

  /**
   * @generated from field: google.fhir.stu3.proto.DateTime.Precision precision = 3;
   */
  precision = DateTime_Precision.PRECISION_UNSPECIFIED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 4;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 5;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DateTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DateTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "precision", kind: "enum", T: proto3.getEnumType(DateTime_Precision) },
    { no: 4, name: "id", kind: "message", T: String },
    { no: 5, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DateTime {
    return new DateTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DateTime {
    return new DateTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DateTime {
    return new DateTime().fromJsonString(jsonString, options);
  }

  static equals(a: DateTime | PlainMessage<DateTime> | undefined, b: DateTime | PlainMessage<DateTime> | undefined): boolean {
    return proto3.util.equals(DateTime, a, b);
  }
}

/**
 * @generated from enum google.fhir.stu3.proto.DateTime.Precision
 */
export enum DateTime_Precision {
  /**
   * @generated from enum value: PRECISION_UNSPECIFIED = 0;
   */
  PRECISION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: YEAR = 1;
   */
  YEAR = 1,

  /**
   * @generated from enum value: MONTH = 2;
   */
  MONTH = 2,

  /**
   * @generated from enum value: DAY = 3;
   */
  DAY = 3,

  /**
   * @generated from enum value: SECOND = 4;
   */
  SECOND = 4,

  /**
   * @generated from enum value: MILLISECOND = 5;
   */
  MILLISECOND = 5,

  /**
   * @generated from enum value: MICROSECOND = 6;
   */
  MICROSECOND = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(DateTime_Precision)
proto3.util.setEnumType(DateTime_Precision, "google.fhir.stu3.proto.DateTime.Precision", [
  { no: 0, name: "PRECISION_UNSPECIFIED" },
  { no: 1, name: "YEAR" },
  { no: 2, name: "MONTH" },
  { no: 3, name: "DAY" },
  { no: 4, name: "SECOND" },
  { no: 5, name: "MILLISECOND" },
  { no: 6, name: "MICROSECOND" },
]);

/**
 * Auto-generated from StructureDefinition for decimal, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type decimal. See
 * http://hl7.org/fhir/StructureDefinition/decimal
 *
 * @generated from message google.fhir.stu3.proto.Decimal
 */
export class Decimal extends Message<Decimal> {
  /**
   * Primitive value for decimal
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Decimal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Decimal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Decimal {
    return new Decimal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Decimal {
    return new Decimal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Decimal {
    return new Decimal().fromJsonString(jsonString, options);
  }

  static equals(a: Decimal | PlainMessage<Decimal> | undefined, b: Decimal | PlainMessage<Decimal> | undefined): boolean {
    return proto3.util.equals(Decimal, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for id, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type id. See
 * http://hl7.org/fhir/StructureDefinition/id
 *
 * @generated from message google.fhir.stu3.proto.Id
 */
export class Id extends Message<Id> {
  /**
   * Primitive value for id
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Id>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Id";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Id {
    return new Id().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Id {
    return new Id().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Id {
    return new Id().fromJsonString(jsonString, options);
  }

  static equals(a: Id | PlainMessage<Id> | undefined, b: Id | PlainMessage<Id> | undefined): boolean {
    return proto3.util.equals(Id, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for instant, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type instant. See
 * http://hl7.org/fhir/StructureDefinition/instant
 *
 * @generated from message google.fhir.stu3.proto.Instant
 */
export class Instant extends Message<Instant> {
  /**
   * Primitive value for instant
   *
   * @generated from field: int64 value_us = 1;
   */
  valueUs = protoInt64.zero;

  /**
   * @generated from field: string timezone = 2;
   */
  timezone = "";

  /**
   * @generated from field: google.fhir.stu3.proto.Instant.Precision precision = 3;
   */
  precision = Instant_Precision.PRECISION_UNSPECIFIED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 4;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 5;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Instant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Instant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "timezone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "precision", kind: "enum", T: proto3.getEnumType(Instant_Precision) },
    { no: 4, name: "id", kind: "message", T: String },
    { no: 5, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instant {
    return new Instant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instant {
    return new Instant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instant {
    return new Instant().fromJsonString(jsonString, options);
  }

  static equals(a: Instant | PlainMessage<Instant> | undefined, b: Instant | PlainMessage<Instant> | undefined): boolean {
    return proto3.util.equals(Instant, a, b);
  }
}

/**
 * @generated from enum google.fhir.stu3.proto.Instant.Precision
 */
export enum Instant_Precision {
  /**
   * @generated from enum value: PRECISION_UNSPECIFIED = 0;
   */
  PRECISION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SECOND = 1;
   */
  SECOND = 1,

  /**
   * @generated from enum value: MILLISECOND = 2;
   */
  MILLISECOND = 2,

  /**
   * @generated from enum value: MICROSECOND = 3;
   */
  MICROSECOND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Instant_Precision)
proto3.util.setEnumType(Instant_Precision, "google.fhir.stu3.proto.Instant.Precision", [
  { no: 0, name: "PRECISION_UNSPECIFIED" },
  { no: 1, name: "SECOND" },
  { no: 2, name: "MILLISECOND" },
  { no: 3, name: "MICROSECOND" },
]);

/**
 * Auto-generated from StructureDefinition for integer, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type integer. See
 * http://hl7.org/fhir/StructureDefinition/integer
 *
 * @generated from message google.fhir.stu3.proto.Integer
 */
export class Integer extends Message<Integer> {
  /**
   * Primitive value for integer
   *
   * @generated from field: sint32 value = 1;
   */
  value = 0;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Integer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Integer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 17 /* ScalarType.SINT32 */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Integer {
    return new Integer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Integer {
    return new Integer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Integer {
    return new Integer().fromJsonString(jsonString, options);
  }

  static equals(a: Integer | PlainMessage<Integer> | undefined, b: Integer | PlainMessage<Integer> | undefined): boolean {
    return proto3.util.equals(Integer, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for markdown, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type markdown. See
 * http://hl7.org/fhir/StructureDefinition/markdown
 *
 * @generated from message google.fhir.stu3.proto.Markdown
 */
export class Markdown extends Message<Markdown> {
  /**
   * Primitive value for markdown
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Markdown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Markdown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Markdown {
    return new Markdown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Markdown {
    return new Markdown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Markdown {
    return new Markdown().fromJsonString(jsonString, options);
  }

  static equals(a: Markdown | PlainMessage<Markdown> | undefined, b: Markdown | PlainMessage<Markdown> | undefined): boolean {
    return proto3.util.equals(Markdown, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for oid, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type oid. See
 * http://hl7.org/fhir/StructureDefinition/oid
 *
 * @generated from message google.fhir.stu3.proto.Oid
 */
export class Oid extends Message<Oid> {
  /**
   * Primitive value for oid
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Oid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Oid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Oid {
    return new Oid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Oid {
    return new Oid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Oid {
    return new Oid().fromJsonString(jsonString, options);
  }

  static equals(a: Oid | PlainMessage<Oid> | undefined, b: Oid | PlainMessage<Oid> | undefined): boolean {
    return proto3.util.equals(Oid, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for positiveInt, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type positiveInt. See
 * http://hl7.org/fhir/StructureDefinition/positiveInt
 *
 * @generated from message google.fhir.stu3.proto.PositiveInt
 */
export class PositiveInt extends Message<PositiveInt> {
  /**
   * Primitive value for positiveInt
   *
   * @generated from field: uint32 value = 1;
   */
  value = 0;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<PositiveInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PositiveInt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PositiveInt {
    return new PositiveInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PositiveInt {
    return new PositiveInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PositiveInt {
    return new PositiveInt().fromJsonString(jsonString, options);
  }

  static equals(a: PositiveInt | PlainMessage<PositiveInt> | undefined, b: PositiveInt | PlainMessage<PositiveInt> | undefined): boolean {
    return proto3.util.equals(PositiveInt, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for string, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type string. See
 * http://hl7.org/fhir/StructureDefinition/string
 *
 * @generated from message google.fhir.stu3.proto.String
 */
export class String extends Message<String> {
  /**
   * Primitive value for string
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<String>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.String";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): String {
    return new String().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): String {
    return new String().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): String {
    return new String().fromJsonString(jsonString, options);
  }

  static equals(a: String | PlainMessage<String> | undefined, b: String | PlainMessage<String> | undefined): boolean {
    return proto3.util.equals(String, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for time, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type time. See
 * http://hl7.org/fhir/StructureDefinition/time
 *
 * @generated from message google.fhir.stu3.proto.Time
 */
export class Time extends Message<Time> {
  /**
   * Primitive value for time
   *
   * @generated from field: int64 value_us = 1;
   */
  valueUs = protoInt64.zero;

  /**
   * @generated from field: google.fhir.stu3.proto.Time.Precision precision = 2;
   */
  precision = Time_Precision.PRECISION_UNSPECIFIED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 3;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 4;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Time>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Time";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value_us", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "precision", kind: "enum", T: proto3.getEnumType(Time_Precision) },
    { no: 3, name: "id", kind: "message", T: String },
    { no: 4, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Time {
    return new Time().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Time {
    return new Time().fromJsonString(jsonString, options);
  }

  static equals(a: Time | PlainMessage<Time> | undefined, b: Time | PlainMessage<Time> | undefined): boolean {
    return proto3.util.equals(Time, a, b);
  }
}

/**
 * @generated from enum google.fhir.stu3.proto.Time.Precision
 */
export enum Time_Precision {
  /**
   * @generated from enum value: PRECISION_UNSPECIFIED = 0;
   */
  PRECISION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SECOND = 1;
   */
  SECOND = 1,

  /**
   * @generated from enum value: MILLISECOND = 2;
   */
  MILLISECOND = 2,

  /**
   * @generated from enum value: MICROSECOND = 3;
   */
  MICROSECOND = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(Time_Precision)
proto3.util.setEnumType(Time_Precision, "google.fhir.stu3.proto.Time.Precision", [
  { no: 0, name: "PRECISION_UNSPECIFIED" },
  { no: 1, name: "SECOND" },
  { no: 2, name: "MILLISECOND" },
  { no: 3, name: "MICROSECOND" },
]);

/**
 * Auto-generated from StructureDefinition for unsignedInt, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type unsignedInt. See
 * http://hl7.org/fhir/StructureDefinition/unsignedInt
 *
 * @generated from message google.fhir.stu3.proto.UnsignedInt
 */
export class UnsignedInt extends Message<UnsignedInt> {
  /**
   * Primitive value for unsignedInt
   *
   * @generated from field: uint32 value = 1;
   */
  value = 0;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<UnsignedInt>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.UnsignedInt";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnsignedInt {
    return new UnsignedInt().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnsignedInt {
    return new UnsignedInt().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnsignedInt {
    return new UnsignedInt().fromJsonString(jsonString, options);
  }

  static equals(a: UnsignedInt | PlainMessage<UnsignedInt> | undefined, b: UnsignedInt | PlainMessage<UnsignedInt> | undefined): boolean {
    return proto3.util.equals(UnsignedInt, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for uri, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type uri. See
 * http://hl7.org/fhir/StructureDefinition/uri
 *
 * @generated from message google.fhir.stu3.proto.Uri
 */
export class Uri extends Message<Uri> {
  /**
   * Primitive value for uri
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Uri>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Uri";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Uri {
    return new Uri().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Uri {
    return new Uri().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Uri {
    return new Uri().fromJsonString(jsonString, options);
  }

  static equals(a: Uri | PlainMessage<Uri> | undefined, b: Uri | PlainMessage<Uri> | undefined): boolean {
    return proto3.util.equals(Uri, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for uuid, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type uuid. See
 * http://hl7.org/fhir/StructureDefinition/uuid
 *
 * @generated from message google.fhir.stu3.proto.Uuid
 */
export class Uuid extends Message<Uuid> {
  /**
   * Primitive value for uuid
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Uuid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Uuid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Uuid {
    return new Uuid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Uuid {
    return new Uuid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Uuid {
    return new Uuid().fromJsonString(jsonString, options);
  }

  static equals(a: Uuid | PlainMessage<Uuid> | undefined, b: Uuid | PlainMessage<Uuid> | undefined): boolean {
    return proto3.util.equals(Uuid, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for xhtml, last updated
 * 2017-04-19T07:44:43.294+10:00. Primitive Type xhtml. See
 * http://hl7.org/fhir/StructureDefinition/xhtml
 *
 * @generated from message google.fhir.stu3.proto.Xhtml
 */
export class Xhtml extends Message<Xhtml> {
  /**
   * Actual xhtml
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  constructor(data?: PartialMessage<Xhtml>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Xhtml";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Xhtml {
    return new Xhtml().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Xhtml {
    return new Xhtml().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Xhtml {
    return new Xhtml().fromJsonString(jsonString, options);
  }

  static equals(a: Xhtml | PlainMessage<Xhtml> | undefined, b: Xhtml | PlainMessage<Xhtml> | undefined): boolean {
    return proto3.util.equals(Xhtml, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Address, last updated
 * 2017-04-19T07:44:43.294+10:00. An address expressed using postal conventions
 * (as opposed to GPS or other location definition formats). See
 * http://hl7.org/fhir/StructureDefinition/Address
 *
 * @generated from message google.fhir.stu3.proto.Address
 */
export class Address extends Message<Address> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * home | work | temp | old - purpose of this address
   *
   * @generated from field: google.fhir.stu3.proto.AddressUseCode use = 3;
   */
  use?: AddressUseCode;

  /**
   * postal | physical | both
   *
   * @generated from field: google.fhir.stu3.proto.AddressTypeCode type = 4;
   */
  type?: AddressTypeCode;

  /**
   * Text representation of the address
   *
   * @generated from field: google.fhir.stu3.proto.String text = 5;
   */
  text?: String;

  /**
   * Street name, number, direction & P.O. Box etc.
   *
   * @generated from field: repeated google.fhir.stu3.proto.String line = 6;
   */
  line: String[] = [];

  /**
   * Name of city, town etc.
   *
   * @generated from field: google.fhir.stu3.proto.String city = 7;
   */
  city?: String;

  /**
   * District name (aka county)
   *
   * @generated from field: google.fhir.stu3.proto.String district = 8;
   */
  district?: String;

  /**
   * Sub-unit of country (abbreviations ok)
   *
   * @generated from field: google.fhir.stu3.proto.String state = 9;
   */
  state?: String;

  /**
   * Postal code for area
   *
   * @generated from field: google.fhir.stu3.proto.String postal_code = 10;
   */
  postalCode?: String;

  /**
   * Country (e.g. can be ISO 3166 2 or 3 letter code)
   *
   * @generated from field: google.fhir.stu3.proto.String country = 11;
   */
  country?: String;

  /**
   * Time period when address was/is in use
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 12;
   */
  period?: Period;

  constructor(data?: PartialMessage<Address>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Address";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "use", kind: "message", T: AddressUseCode },
    { no: 4, name: "type", kind: "message", T: AddressTypeCode },
    { no: 5, name: "text", kind: "message", T: String },
    { no: 6, name: "line", kind: "message", T: String, repeated: true },
    { no: 7, name: "city", kind: "message", T: String },
    { no: 8, name: "district", kind: "message", T: String },
    { no: 9, name: "state", kind: "message", T: String },
    { no: 10, name: "postal_code", kind: "message", T: String },
    { no: 11, name: "country", kind: "message", T: String },
    { no: 12, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Address {
    return new Address().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Address {
    return new Address().fromJsonString(jsonString, options);
  }

  static equals(a: Address | PlainMessage<Address> | undefined, b: Address | PlainMessage<Address> | undefined): boolean {
    return proto3.util.equals(Address, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Age, last updated
 * 2017-04-19T07:44:43.294+10:00. A duration of time during which an organism
 * (or a process) has existed. See http://hl7.org/fhir/StructureDefinition/Age
 *
 * @generated from message google.fhir.stu3.proto.Age
 */
export class Age extends Message<Age> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * < | <= | >= | > - how to understand the value
   *
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
   */
  comparator?: QuantityComparatorCode;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<Age>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Age";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 4, name: "comparator", kind: "message", T: QuantityComparatorCode },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Age {
    return new Age().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Age {
    return new Age().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Age {
    return new Age().fromJsonString(jsonString, options);
  }

  static equals(a: Age | PlainMessage<Age> | undefined, b: Age | PlainMessage<Age> | undefined): boolean {
    return proto3.util.equals(Age, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Annotation, last updated
 * 2017-04-19T07:44:43.294+10:00. Text node with attribution. See
 * http://hl7.org/fhir/StructureDefinition/Annotation
 *
 * @generated from message google.fhir.stu3.proto.Annotation
 */
export class Annotation extends Message<Annotation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * @generated from field: google.fhir.stu3.proto.Annotation.Author author = 3;
   */
  author?: Annotation_Author;

  /**
   * When the annotation was made
   *
   * @generated from field: google.fhir.stu3.proto.DateTime time = 4;
   */
  time?: DateTime;

  /**
   * The annotation  - text content
   *
   * @generated from field: google.fhir.stu3.proto.String text = 5;
   */
  text?: String;

  constructor(data?: PartialMessage<Annotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Annotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "author", kind: "message", T: Annotation_Author },
    { no: 4, name: "time", kind: "message", T: DateTime },
    { no: 5, name: "text", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Annotation {
    return new Annotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Annotation {
    return new Annotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Annotation {
    return new Annotation().fromJsonString(jsonString, options);
  }

  static equals(a: Annotation | PlainMessage<Annotation> | undefined, b: Annotation | PlainMessage<Annotation> | undefined): boolean {
    return proto3.util.equals(Annotation, a, b);
  }
}

/**
 * Individual responsible for the annotation
 *
 * @generated from message google.fhir.stu3.proto.Annotation.Author
 */
export class Annotation_Author extends Message<Annotation_Author> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Annotation.Author.author
   */
  author: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Annotation_Author>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Annotation.Author";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "author" },
    { no: 2, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "author" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Annotation_Author {
    return new Annotation_Author().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Annotation_Author {
    return new Annotation_Author().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Annotation_Author {
    return new Annotation_Author().fromJsonString(jsonString, options);
  }

  static equals(a: Annotation_Author | PlainMessage<Annotation_Author> | undefined, b: Annotation_Author | PlainMessage<Annotation_Author> | undefined): boolean {
    return proto3.util.equals(Annotation_Author, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Attachment, last updated
 * 2017-04-19T07:44:43.294+10:00. Content in a format defined elsewhere. See
 * http://hl7.org/fhir/StructureDefinition/Attachment
 *
 * @generated from message google.fhir.stu3.proto.Attachment
 */
export class Attachment extends Message<Attachment> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Mime type of the content, with charset etc.
   *
   * @generated from field: google.fhir.stu3.proto.MimeTypeCode content_type = 3;
   */
  contentType?: MimeTypeCode;

  /**
   * Human language of the content (BCP-47)
   *
   * @generated from field: google.fhir.stu3.proto.LanguageCode language = 4;
   */
  language?: LanguageCode;

  /**
   * Data inline, base64ed
   *
   * @generated from field: google.fhir.stu3.proto.Base64Binary data = 5;
   */
  data?: Base64Binary;

  /**
   * Uri where the data can be found
   *
   * @generated from field: google.fhir.stu3.proto.Uri url = 6;
   */
  url?: Uri;

  /**
   * Number of bytes of content (if url provided)
   *
   * @generated from field: google.fhir.stu3.proto.UnsignedInt size = 7;
   */
  size?: UnsignedInt;

  /**
   * Hash of the data (sha-1, base64ed)
   *
   * @generated from field: google.fhir.stu3.proto.Base64Binary hash = 8;
   */
  hash?: Base64Binary;

  /**
   * Label to display in place of the data
   *
   * @generated from field: google.fhir.stu3.proto.String title = 9;
   */
  title?: String;

  /**
   * Date attachment was first created
   *
   * @generated from field: google.fhir.stu3.proto.DateTime creation = 10;
   */
  creation?: DateTime;

  constructor(data?: PartialMessage<Attachment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Attachment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "content_type", kind: "message", T: MimeTypeCode },
    { no: 4, name: "language", kind: "message", T: LanguageCode },
    { no: 5, name: "data", kind: "message", T: Base64Binary },
    { no: 6, name: "url", kind: "message", T: Uri },
    { no: 7, name: "size", kind: "message", T: UnsignedInt },
    { no: 8, name: "hash", kind: "message", T: Base64Binary },
    { no: 9, name: "title", kind: "message", T: String },
    { no: 10, name: "creation", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Attachment {
    return new Attachment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Attachment {
    return new Attachment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Attachment {
    return new Attachment().fromJsonString(jsonString, options);
  }

  static equals(a: Attachment | PlainMessage<Attachment> | undefined, b: Attachment | PlainMessage<Attachment> | undefined): boolean {
    return proto3.util.equals(Attachment, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for CodeableConcept, last updated
 * 2017-04-19T07:44:43.294+10:00. Concept - reference to a terminology or just
 * text. See http://hl7.org/fhir/StructureDefinition/CodeableConcept
 *
 * @generated from message google.fhir.stu3.proto.CodeableConcept
 */
export class CodeableConcept extends Message<CodeableConcept> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Code defined by a terminology system
   *
   * @generated from field: repeated google.fhir.stu3.proto.Coding coding = 3;
   */
  coding: Coding[] = [];

  /**
   * Plain text representation of the concept
   *
   * @generated from field: google.fhir.stu3.proto.String text = 4;
   */
  text?: String;

  constructor(data?: PartialMessage<CodeableConcept>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeableConcept";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "coding", kind: "message", T: Coding, repeated: true },
    { no: 4, name: "text", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeableConcept {
    return new CodeableConcept().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeableConcept {
    return new CodeableConcept().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeableConcept {
    return new CodeableConcept().fromJsonString(jsonString, options);
  }

  static equals(a: CodeableConcept | PlainMessage<CodeableConcept> | undefined, b: CodeableConcept | PlainMessage<CodeableConcept> | undefined): boolean {
    return proto3.util.equals(CodeableConcept, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Coding, last updated
 * 2017-04-19T07:44:43.294+10:00. A reference to a code defined by a terminology
 * system. See http://hl7.org/fhir/StructureDefinition/Coding
 *
 * @generated from message google.fhir.stu3.proto.Coding
 */
export class Coding extends Message<Coding> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Identity of the terminology system
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 3;
   */
  system?: Uri;

  /**
   * Version of the system - if relevant
   *
   * @generated from field: google.fhir.stu3.proto.String version = 4;
   */
  version?: String;

  /**
   * Symbol in syntax defined by the system
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 5;
   */
  code?: Code;

  /**
   * Representation defined by the system
   *
   * @generated from field: google.fhir.stu3.proto.String display = 6;
   */
  display?: String;

  /**
   * If this coding was chosen directly by the user
   *
   * @generated from field: google.fhir.stu3.proto.Boolean user_selected = 7;
   */
  userSelected?: Boolean;

  constructor(data?: PartialMessage<Coding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Coding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "system", kind: "message", T: Uri },
    { no: 4, name: "version", kind: "message", T: String },
    { no: 5, name: "code", kind: "message", T: Code },
    { no: 6, name: "display", kind: "message", T: String },
    { no: 7, name: "user_selected", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coding {
    return new Coding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coding {
    return new Coding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coding {
    return new Coding().fromJsonString(jsonString, options);
  }

  static equals(a: Coding | PlainMessage<Coding> | undefined, b: Coding | PlainMessage<Coding> | undefined): boolean {
    return proto3.util.equals(Coding, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ContactPoint, last updated
 * 2017-04-19T07:44:43.294+10:00. Details of a Technology mediated contact point
 * (phone, fax, email, etc.). See
 * http://hl7.org/fhir/StructureDefinition/ContactPoint
 *
 * @generated from message google.fhir.stu3.proto.ContactPoint
 */
export class ContactPoint extends Message<ContactPoint> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * phone | fax | email | pager | url | sms | other
   *
   * @generated from field: google.fhir.stu3.proto.ContactPointSystemCode system = 3;
   */
  system?: ContactPointSystemCode;

  /**
   * The actual contact point details
   *
   * @generated from field: google.fhir.stu3.proto.String value = 4;
   */
  value?: String;

  /**
   * home | work | temp | old | mobile - purpose of this contact point
   *
   * @generated from field: google.fhir.stu3.proto.ContactPointUseCode use = 5;
   */
  use?: ContactPointUseCode;

  /**
   * Specify preferred order of use (1 = highest)
   *
   * @generated from field: google.fhir.stu3.proto.PositiveInt rank = 6;
   */
  rank?: PositiveInt;

  /**
   * Time period when the contact point was/is in use
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 7;
   */
  period?: Period;

  constructor(data?: PartialMessage<ContactPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ContactPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "system", kind: "message", T: ContactPointSystemCode },
    { no: 4, name: "value", kind: "message", T: String },
    { no: 5, name: "use", kind: "message", T: ContactPointUseCode },
    { no: 6, name: "rank", kind: "message", T: PositiveInt },
    { no: 7, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactPoint {
    return new ContactPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactPoint {
    return new ContactPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactPoint {
    return new ContactPoint().fromJsonString(jsonString, options);
  }

  static equals(a: ContactPoint | PlainMessage<ContactPoint> | undefined, b: ContactPoint | PlainMessage<ContactPoint> | undefined): boolean {
    return proto3.util.equals(ContactPoint, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Count, last updated
 * 2017-04-19T07:44:43.294+10:00. A measured or measurable amount. See
 * http://hl7.org/fhir/StructureDefinition/Count
 *
 * @generated from message google.fhir.stu3.proto.Count
 */
export class Count extends Message<Count> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * < | <= | >= | > - how to understand the value
   *
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
   */
  comparator?: QuantityComparatorCode;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<Count>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Count";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 4, name: "comparator", kind: "message", T: QuantityComparatorCode },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Count {
    return new Count().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Count {
    return new Count().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Count {
    return new Count().fromJsonString(jsonString, options);
  }

  static equals(a: Count | PlainMessage<Count> | undefined, b: Count | PlainMessage<Count> | undefined): boolean {
    return proto3.util.equals(Count, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Distance, last updated
 * 2017-04-19T07:44:43.294+10:00. A length - a value with a unit that is a
 * physical distance. See http://hl7.org/fhir/StructureDefinition/Distance
 *
 * @generated from message google.fhir.stu3.proto.Distance
 */
export class Distance extends Message<Distance> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * < | <= | >= | > - how to understand the value
   *
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
   */
  comparator?: QuantityComparatorCode;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<Distance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Distance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 4, name: "comparator", kind: "message", T: QuantityComparatorCode },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Distance {
    return new Distance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Distance {
    return new Distance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Distance {
    return new Distance().fromJsonString(jsonString, options);
  }

  static equals(a: Distance | PlainMessage<Distance> | undefined, b: Distance | PlainMessage<Distance> | undefined): boolean {
    return proto3.util.equals(Distance, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Dosage, last updated
 * 2017-04-19T07:44:43.294+10:00. How the medication is/was taken or should be
 * taken. See http://hl7.org/fhir/StructureDefinition/Dosage
 *
 * @generated from message google.fhir.stu3.proto.Dosage
 */
export class Dosage extends Message<Dosage> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * The order of the dosage instructions
   *
   * @generated from field: google.fhir.stu3.proto.Integer sequence = 3;
   */
  sequence?: Integer;

  /**
   * Free text dosage instructions e.g. SIG
   *
   * @generated from field: google.fhir.stu3.proto.String text = 4;
   */
  text?: String;

  /**
   * Supplemental instruction - e.g. "with meals"
   *
   * @generated from field: repeated google.fhir.stu3.proto.CodeableConcept additional_instruction = 5;
   */
  additionalInstruction: CodeableConcept[] = [];

  /**
   * Patient or consumer oriented instructions
   *
   * @generated from field: google.fhir.stu3.proto.String patient_instruction = 6;
   */
  patientInstruction?: String;

  /**
   * When medication should be administered
   *
   * @generated from field: google.fhir.stu3.proto.Timing timing = 7;
   */
  timing?: Timing;

  /**
   * @generated from field: google.fhir.stu3.proto.Dosage.AsNeeded as_needed = 8;
   */
  asNeeded?: Dosage_AsNeeded;

  /**
   * Body site to administer to
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept site = 9;
   */
  site?: CodeableConcept;

  /**
   * How drug should enter body
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept route = 10;
   */
  route?: CodeableConcept;

  /**
   * Technique for administering medication
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept method = 11;
   */
  method?: CodeableConcept;

  /**
   * @generated from field: google.fhir.stu3.proto.Dosage.Dose dose = 12;
   */
  dose?: Dosage_Dose;

  /**
   * Upper limit on medication per unit of time
   *
   * @generated from field: google.fhir.stu3.proto.Ratio max_dose_per_period = 13;
   */
  maxDosePerPeriod?: Ratio;

  /**
   * Upper limit on medication per administration
   *
   * @generated from field: google.fhir.stu3.proto.SimpleQuantity max_dose_per_administration = 14;
   */
  maxDosePerAdministration?: SimpleQuantity;

  /**
   * Upper limit on medication per lifetime of the patient
   *
   * @generated from field: google.fhir.stu3.proto.SimpleQuantity max_dose_per_lifetime = 15;
   */
  maxDosePerLifetime?: SimpleQuantity;

  /**
   * @generated from field: google.fhir.stu3.proto.Dosage.Rate rate = 16;
   */
  rate?: Dosage_Rate;

  constructor(data?: PartialMessage<Dosage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Dosage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "sequence", kind: "message", T: Integer },
    { no: 4, name: "text", kind: "message", T: String },
    { no: 5, name: "additional_instruction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "patient_instruction", kind: "message", T: String },
    { no: 7, name: "timing", kind: "message", T: Timing },
    { no: 8, name: "as_needed", kind: "message", T: Dosage_AsNeeded },
    { no: 9, name: "site", kind: "message", T: CodeableConcept },
    { no: 10, name: "route", kind: "message", T: CodeableConcept },
    { no: 11, name: "method", kind: "message", T: CodeableConcept },
    { no: 12, name: "dose", kind: "message", T: Dosage_Dose },
    { no: 13, name: "max_dose_per_period", kind: "message", T: Ratio },
    { no: 14, name: "max_dose_per_administration", kind: "message", T: SimpleQuantity },
    { no: 15, name: "max_dose_per_lifetime", kind: "message", T: SimpleQuantity },
    { no: 16, name: "rate", kind: "message", T: Dosage_Rate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dosage {
    return new Dosage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dosage {
    return new Dosage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dosage {
    return new Dosage().fromJsonString(jsonString, options);
  }

  static equals(a: Dosage | PlainMessage<Dosage> | undefined, b: Dosage | PlainMessage<Dosage> | undefined): boolean {
    return proto3.util.equals(Dosage, a, b);
  }
}

/**
 * Take "as needed" (for x)
 *
 * @generated from message google.fhir.stu3.proto.Dosage.AsNeeded
 */
export class Dosage_AsNeeded extends Message<Dosage_AsNeeded> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Dosage.AsNeeded.as_needed
   */
  asNeeded: {
    /**
     * @generated from field: google.fhir.stu3.proto.Boolean boolean = 1;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Dosage_AsNeeded>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Dosage.AsNeeded";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "message", T: Boolean, oneof: "as_needed" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "as_needed" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dosage_AsNeeded {
    return new Dosage_AsNeeded().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dosage_AsNeeded {
    return new Dosage_AsNeeded().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dosage_AsNeeded {
    return new Dosage_AsNeeded().fromJsonString(jsonString, options);
  }

  static equals(a: Dosage_AsNeeded | PlainMessage<Dosage_AsNeeded> | undefined, b: Dosage_AsNeeded | PlainMessage<Dosage_AsNeeded> | undefined): boolean {
    return proto3.util.equals(Dosage_AsNeeded, a, b);
  }
}

/**
 * Amount of medication per dose
 *
 * @generated from message google.fhir.stu3.proto.Dosage.Dose
 */
export class Dosage_Dose extends Message<Dosage_Dose> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Dosage.Dose.dose
   */
  dose: {
    /**
     * @generated from field: google.fhir.stu3.proto.Range range = 1;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.SimpleQuantity quantity = 2;
     */
    value: SimpleQuantity;
    case: "quantity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Dosage_Dose>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Dosage.Dose";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "range", kind: "message", T: Range, oneof: "dose" },
    { no: 2, name: "quantity", kind: "message", T: SimpleQuantity, oneof: "dose" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dosage_Dose {
    return new Dosage_Dose().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dosage_Dose {
    return new Dosage_Dose().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dosage_Dose {
    return new Dosage_Dose().fromJsonString(jsonString, options);
  }

  static equals(a: Dosage_Dose | PlainMessage<Dosage_Dose> | undefined, b: Dosage_Dose | PlainMessage<Dosage_Dose> | undefined): boolean {
    return proto3.util.equals(Dosage_Dose, a, b);
  }
}

/**
 * Amount of medication per unit of time
 *
 * @generated from message google.fhir.stu3.proto.Dosage.Rate
 */
export class Dosage_Rate extends Message<Dosage_Rate> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Dosage.Rate.rate
   */
  rate: {
    /**
     * @generated from field: google.fhir.stu3.proto.Ratio ratio = 1;
     */
    value: Ratio;
    case: "ratio";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Range range = 2;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.SimpleQuantity quantity = 3;
     */
    value: SimpleQuantity;
    case: "quantity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Dosage_Rate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Dosage.Rate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ratio", kind: "message", T: Ratio, oneof: "rate" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "rate" },
    { no: 3, name: "quantity", kind: "message", T: SimpleQuantity, oneof: "rate" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Dosage_Rate {
    return new Dosage_Rate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Dosage_Rate {
    return new Dosage_Rate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Dosage_Rate {
    return new Dosage_Rate().fromJsonString(jsonString, options);
  }

  static equals(a: Dosage_Rate | PlainMessage<Dosage_Rate> | undefined, b: Dosage_Rate | PlainMessage<Dosage_Rate> | undefined): boolean {
    return proto3.util.equals(Dosage_Rate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Duration, last updated
 * 2017-04-19T07:44:43.294+10:00. A length of time. See
 * http://hl7.org/fhir/StructureDefinition/Duration
 *
 * @generated from message google.fhir.stu3.proto.Duration
 */
export class Duration extends Message<Duration> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * < | <= | >= | > - how to understand the value
   *
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
   */
  comparator?: QuantityComparatorCode;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<Duration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Duration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 4, name: "comparator", kind: "message", T: QuantityComparatorCode },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Duration {
    return new Duration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Duration {
    return new Duration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Duration {
    return new Duration().fromJsonString(jsonString, options);
  }

  static equals(a: Duration | PlainMessage<Duration> | undefined, b: Duration | PlainMessage<Duration> | undefined): boolean {
    return proto3.util.equals(Duration, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for HumanName, last updated
 * 2017-04-19T07:44:43.294+10:00. Name of a human - parts and usage. See
 * http://hl7.org/fhir/StructureDefinition/HumanName
 *
 * @generated from message google.fhir.stu3.proto.HumanName
 */
export class HumanName extends Message<HumanName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * usual | official | temp | nickname | anonymous | old | maiden
   *
   * @generated from field: google.fhir.stu3.proto.NameUseCode use = 3;
   */
  use?: NameUseCode;

  /**
   * Text representation of the full name
   *
   * @generated from field: google.fhir.stu3.proto.String text = 4;
   */
  text?: String;

  /**
   * Family name (often called 'Surname')
   *
   * @generated from field: google.fhir.stu3.proto.String family = 5;
   */
  family?: String;

  /**
   * Given names (not always 'first'). Includes middle names
   *
   * @generated from field: repeated google.fhir.stu3.proto.String given = 6;
   */
  given: String[] = [];

  /**
   * Parts that come before the name
   *
   * @generated from field: repeated google.fhir.stu3.proto.String prefix = 7;
   */
  prefix: String[] = [];

  /**
   * Parts that come after the name
   *
   * @generated from field: repeated google.fhir.stu3.proto.String suffix = 8;
   */
  suffix: String[] = [];

  /**
   * Time period when name was/is in use
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 9;
   */
  period?: Period;

  constructor(data?: PartialMessage<HumanName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "use", kind: "message", T: NameUseCode },
    { no: 4, name: "text", kind: "message", T: String },
    { no: 5, name: "family", kind: "message", T: String },
    { no: 6, name: "given", kind: "message", T: String, repeated: true },
    { no: 7, name: "prefix", kind: "message", T: String, repeated: true },
    { no: 8, name: "suffix", kind: "message", T: String, repeated: true },
    { no: 9, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanName {
    return new HumanName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanName {
    return new HumanName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanName {
    return new HumanName().fromJsonString(jsonString, options);
  }

  static equals(a: HumanName | PlainMessage<HumanName> | undefined, b: HumanName | PlainMessage<HumanName> | undefined): boolean {
    return proto3.util.equals(HumanName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Identifier, last updated
 * 2017-04-19T07:44:43.294+10:00. An identifier intended for computation. See
 * http://hl7.org/fhir/StructureDefinition/Identifier
 *
 * @generated from message google.fhir.stu3.proto.Identifier
 */
export class Identifier extends Message<Identifier> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * usual | official | temp | secondary (If known)
   *
   * @generated from field: google.fhir.stu3.proto.IdentifierUseCode use = 3;
   */
  use?: IdentifierUseCode;

  /**
   * Description of identifier
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * The namespace for the identifier value
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 5;
   */
  system?: Uri;

  /**
   * The value that is unique
   *
   * @generated from field: google.fhir.stu3.proto.String value = 6;
   */
  value?: String;

  /**
   * Time period when id is/was valid for use
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 7;
   */
  period?: Period;

  /**
   * Organization that issued id (may be just text)
   *
   * @generated from field: google.fhir.stu3.proto.Reference assigner = 8;
   */
  assigner?: Reference;

  constructor(data?: PartialMessage<Identifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Identifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "use", kind: "message", T: IdentifierUseCode },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "system", kind: "message", T: Uri },
    { no: 6, name: "value", kind: "message", T: String },
    { no: 7, name: "period", kind: "message", T: Period },
    { no: 8, name: "assigner", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Identifier {
    return new Identifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Identifier {
    return new Identifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Identifier {
    return new Identifier().fromJsonString(jsonString, options);
  }

  static equals(a: Identifier | PlainMessage<Identifier> | undefined, b: Identifier | PlainMessage<Identifier> | undefined): boolean {
    return proto3.util.equals(Identifier, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Meta, last updated
 * 2017-04-19T07:44:43.294+10:00. Metadata about a resource. See
 * http://hl7.org/fhir/StructureDefinition/Meta
 *
 * @generated from message google.fhir.stu3.proto.Meta
 */
export class Meta extends Message<Meta> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Version specific identifier
   *
   * @generated from field: google.fhir.stu3.proto.Id version_id = 3;
   */
  versionId?: Id;

  /**
   * When the resource version last changed
   *
   * @generated from field: google.fhir.stu3.proto.Instant last_updated = 4;
   */
  lastUpdated?: Instant;

  /**
   * Profiles this resource claims to conform to
   *
   * @generated from field: repeated google.fhir.stu3.proto.Uri profile = 5;
   */
  profile: Uri[] = [];

  /**
   * Security Labels applied to this resource
   *
   * @generated from field: repeated google.fhir.stu3.proto.Coding security = 6;
   */
  security: Coding[] = [];

  /**
   * Tags applied to this resource
   *
   * @generated from field: repeated google.fhir.stu3.proto.Coding tag = 7;
   */
  tag: Coding[] = [];

  constructor(data?: PartialMessage<Meta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Meta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "version_id", kind: "message", T: Id },
    { no: 4, name: "last_updated", kind: "message", T: Instant },
    { no: 5, name: "profile", kind: "message", T: Uri, repeated: true },
    { no: 6, name: "security", kind: "message", T: Coding, repeated: true },
    { no: 7, name: "tag", kind: "message", T: Coding, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Meta {
    return new Meta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Meta {
    return new Meta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Meta {
    return new Meta().fromJsonString(jsonString, options);
  }

  static equals(a: Meta | PlainMessage<Meta> | undefined, b: Meta | PlainMessage<Meta> | undefined): boolean {
    return proto3.util.equals(Meta, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Money, last updated
 * 2017-04-19T07:44:43.294+10:00. An amount of economic utility in some
 * recognized currency. See http://hl7.org/fhir/StructureDefinition/Money
 *
 * @generated from message google.fhir.stu3.proto.Money
 */
export class Money extends Message<Money> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * < | <= | >= | > - how to understand the value
   *
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
   */
  comparator?: QuantityComparatorCode;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<Money>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Money";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 4, name: "comparator", kind: "message", T: QuantityComparatorCode },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Money {
    return new Money().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Money {
    return new Money().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Money {
    return new Money().fromJsonString(jsonString, options);
  }

  static equals(a: Money | PlainMessage<Money> | undefined, b: Money | PlainMessage<Money> | undefined): boolean {
    return proto3.util.equals(Money, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Period, last updated
 * 2017-04-19T07:44:43.294+10:00. Time range defined by start and end date/time.
 * See http://hl7.org/fhir/StructureDefinition/Period
 *
 * @generated from message google.fhir.stu3.proto.Period
 */
export class Period extends Message<Period> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Starting time with inclusive boundary
   *
   * @generated from field: google.fhir.stu3.proto.DateTime start = 3;
   */
  start?: DateTime;

  /**
   * End time with inclusive boundary, if not ongoing
   *
   * @generated from field: google.fhir.stu3.proto.DateTime end = 4;
   */
  end?: DateTime;

  constructor(data?: PartialMessage<Period>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Period";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "start", kind: "message", T: DateTime },
    { no: 4, name: "end", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Period {
    return new Period().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Period {
    return new Period().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Period {
    return new Period().fromJsonString(jsonString, options);
  }

  static equals(a: Period | PlainMessage<Period> | undefined, b: Period | PlainMessage<Period> | undefined): boolean {
    return proto3.util.equals(Period, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Quantity, last updated
 * 2017-04-19T07:44:43.294+10:00. A measured or measurable amount. See
 * http://hl7.org/fhir/StructureDefinition/Quantity
 *
 * @generated from message google.fhir.stu3.proto.Quantity
 */
export class Quantity extends Message<Quantity> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * < | <= | >= | > - how to understand the value
   *
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode comparator = 4;
   */
  comparator?: QuantityComparatorCode;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<Quantity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Quantity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 4, name: "comparator", kind: "message", T: QuantityComparatorCode },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Quantity {
    return new Quantity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Quantity {
    return new Quantity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Quantity {
    return new Quantity().fromJsonString(jsonString, options);
  }

  static equals(a: Quantity | PlainMessage<Quantity> | undefined, b: Quantity | PlainMessage<Quantity> | undefined): boolean {
    return proto3.util.equals(Quantity, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Range, last updated
 * 2017-04-19T07:44:43.294+10:00. Set of values bounded by low and high. See
 * http://hl7.org/fhir/StructureDefinition/Range
 *
 * @generated from message google.fhir.stu3.proto.Range
 */
export class Range extends Message<Range> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Low limit
   *
   * @generated from field: google.fhir.stu3.proto.SimpleQuantity low = 3;
   */
  low?: SimpleQuantity;

  /**
   * High limit
   *
   * @generated from field: google.fhir.stu3.proto.SimpleQuantity high = 4;
   */
  high?: SimpleQuantity;

  constructor(data?: PartialMessage<Range>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Range";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "low", kind: "message", T: SimpleQuantity },
    { no: 4, name: "high", kind: "message", T: SimpleQuantity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Range {
    return new Range().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Range {
    return new Range().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Range {
    return new Range().fromJsonString(jsonString, options);
  }

  static equals(a: Range | PlainMessage<Range> | undefined, b: Range | PlainMessage<Range> | undefined): boolean {
    return proto3.util.equals(Range, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Ratio, last updated
 * 2017-04-19T07:44:43.294+10:00. A ratio of two Quantity values - a numerator
 * and a denominator. See http://hl7.org/fhir/StructureDefinition/Ratio
 *
 * @generated from message google.fhir.stu3.proto.Ratio
 */
export class Ratio extends Message<Ratio> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerator value
   *
   * @generated from field: google.fhir.stu3.proto.Quantity numerator = 3;
   */
  numerator?: Quantity;

  /**
   * Denominator value
   *
   * @generated from field: google.fhir.stu3.proto.Quantity denominator = 4;
   */
  denominator?: Quantity;

  constructor(data?: PartialMessage<Ratio>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Ratio";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "numerator", kind: "message", T: Quantity },
    { no: 4, name: "denominator", kind: "message", T: Quantity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ratio {
    return new Ratio().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ratio {
    return new Ratio().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ratio {
    return new Ratio().fromJsonString(jsonString, options);
  }

  static equals(a: Ratio | PlainMessage<Ratio> | undefined, b: Ratio | PlainMessage<Ratio> | undefined): boolean {
    return proto3.util.equals(Ratio, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for SampledData, last updated
 * 2017-04-19T07:44:43.294+10:00. A series of measurements taken by a device.
 * See http://hl7.org/fhir/StructureDefinition/SampledData
 *
 * @generated from message google.fhir.stu3.proto.SampledData
 */
export class SampledData extends Message<SampledData> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Zero value and units
   *
   * @generated from field: google.fhir.stu3.proto.SimpleQuantity origin = 3;
   */
  origin?: SimpleQuantity;

  /**
   * Number of milliseconds between samples
   *
   * @generated from field: google.fhir.stu3.proto.Decimal period = 4;
   */
  period?: Decimal;

  /**
   * Multiply data by this before adding to origin
   *
   * @generated from field: google.fhir.stu3.proto.Decimal factor = 5;
   */
  factor?: Decimal;

  /**
   * Lower limit of detection
   *
   * @generated from field: google.fhir.stu3.proto.Decimal lower_limit = 6;
   */
  lowerLimit?: Decimal;

  /**
   * Upper limit of detection
   *
   * @generated from field: google.fhir.stu3.proto.Decimal upper_limit = 7;
   */
  upperLimit?: Decimal;

  /**
   * Number of sample points at each time point
   *
   * @generated from field: google.fhir.stu3.proto.PositiveInt dimensions = 8;
   */
  dimensions?: PositiveInt;

  /**
   * Decimal values with spaces, or "E" | "U" | "L"
   *
   * @generated from field: google.fhir.stu3.proto.String data = 9;
   */
  data?: String;

  constructor(data?: PartialMessage<SampledData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SampledData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "origin", kind: "message", T: SimpleQuantity },
    { no: 4, name: "period", kind: "message", T: Decimal },
    { no: 5, name: "factor", kind: "message", T: Decimal },
    { no: 6, name: "lower_limit", kind: "message", T: Decimal },
    { no: 7, name: "upper_limit", kind: "message", T: Decimal },
    { no: 8, name: "dimensions", kind: "message", T: PositiveInt },
    { no: 9, name: "data", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SampledData {
    return new SampledData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SampledData {
    return new SampledData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SampledData {
    return new SampledData().fromJsonString(jsonString, options);
  }

  static equals(a: SampledData | PlainMessage<SampledData> | undefined, b: SampledData | PlainMessage<SampledData> | undefined): boolean {
    return proto3.util.equals(SampledData, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Signature, last updated
 * 2017-04-19T07:44:43.294+10:00. A digital Signature - XML DigSig, JWT,
 * Graphical image of signature, etc. See
 * http://hl7.org/fhir/StructureDefinition/Signature
 *
 * @generated from message google.fhir.stu3.proto.Signature
 */
export class Signature extends Message<Signature> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Indication of the reason the entity signed the object(s)
   *
   * @generated from field: repeated google.fhir.stu3.proto.Coding type = 3;
   */
  type: Coding[] = [];

  /**
   * When the signature was created
   *
   * @generated from field: google.fhir.stu3.proto.Instant when = 4;
   */
  when?: Instant;

  /**
   * @generated from field: google.fhir.stu3.proto.Signature.Who who = 5;
   */
  who?: Signature_Who;

  /**
   * @generated from field: google.fhir.stu3.proto.Signature.OnBehalfOf on_behalf_of = 6;
   */
  onBehalfOf?: Signature_OnBehalfOf;

  /**
   * The technical format of the signature
   *
   * @generated from field: google.fhir.stu3.proto.MimeTypeCode content_type = 7;
   */
  contentType?: MimeTypeCode;

  /**
   * The actual signature content (XML DigSig. JWT, picture, etc.)
   *
   * @generated from field: google.fhir.stu3.proto.Base64Binary blob = 8;
   */
  blob?: Base64Binary;

  constructor(data?: PartialMessage<Signature>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Signature";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "type", kind: "message", T: Coding, repeated: true },
    { no: 4, name: "when", kind: "message", T: Instant },
    { no: 5, name: "who", kind: "message", T: Signature_Who },
    { no: 6, name: "on_behalf_of", kind: "message", T: Signature_OnBehalfOf },
    { no: 7, name: "content_type", kind: "message", T: MimeTypeCode },
    { no: 8, name: "blob", kind: "message", T: Base64Binary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Signature {
    return new Signature().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Signature {
    return new Signature().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Signature {
    return new Signature().fromJsonString(jsonString, options);
  }

  static equals(a: Signature | PlainMessage<Signature> | undefined, b: Signature | PlainMessage<Signature> | undefined): boolean {
    return proto3.util.equals(Signature, a, b);
  }
}

/**
 * Who signed
 *
 * @generated from message google.fhir.stu3.proto.Signature.Who
 */
export class Signature_Who extends Message<Signature_Who> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Signature.Who.who
   */
  who: {
    /**
     * @generated from field: google.fhir.stu3.proto.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Signature_Who>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Signature.Who";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "who" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "who" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Signature_Who {
    return new Signature_Who().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Signature_Who {
    return new Signature_Who().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Signature_Who {
    return new Signature_Who().fromJsonString(jsonString, options);
  }

  static equals(a: Signature_Who | PlainMessage<Signature_Who> | undefined, b: Signature_Who | PlainMessage<Signature_Who> | undefined): boolean {
    return proto3.util.equals(Signature_Who, a, b);
  }
}

/**
 * The party represented
 *
 * @generated from message google.fhir.stu3.proto.Signature.OnBehalfOf
 */
export class Signature_OnBehalfOf extends Message<Signature_OnBehalfOf> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Signature.OnBehalfOf.on_behalf_of
   */
  onBehalfOf: {
    /**
     * @generated from field: google.fhir.stu3.proto.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Signature_OnBehalfOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Signature.OnBehalfOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "on_behalf_of" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "on_behalf_of" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Signature_OnBehalfOf {
    return new Signature_OnBehalfOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Signature_OnBehalfOf {
    return new Signature_OnBehalfOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Signature_OnBehalfOf {
    return new Signature_OnBehalfOf().fromJsonString(jsonString, options);
  }

  static equals(a: Signature_OnBehalfOf | PlainMessage<Signature_OnBehalfOf> | undefined, b: Signature_OnBehalfOf | PlainMessage<Signature_OnBehalfOf> | undefined): boolean {
    return proto3.util.equals(Signature_OnBehalfOf, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for SimpleQuantity, last updated
 * 2017-04-19T07:44:43.294+10:00. A fixed quantity (no comparator). See
 * http://hl7.org/fhir/StructureDefinition/SimpleQuantity
 *
 * @generated from message google.fhir.stu3.proto.SimpleQuantity
 */
export class SimpleQuantity extends Message<SimpleQuantity> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Numerical value (with implicit precision)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value = 3;
   */
  value?: Decimal;

  /**
   * Unit representation
   *
   * @generated from field: google.fhir.stu3.proto.String unit = 5;
   */
  unit?: String;

  /**
   * System that defines coded unit form
   *
   * @generated from field: google.fhir.stu3.proto.Uri system = 6;
   */
  system?: Uri;

  /**
   * Coded form of the unit
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 7;
   */
  code?: Code;

  constructor(data?: PartialMessage<SimpleQuantity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SimpleQuantity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "value", kind: "message", T: Decimal },
    { no: 5, name: "unit", kind: "message", T: String },
    { no: 6, name: "system", kind: "message", T: Uri },
    { no: 7, name: "code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SimpleQuantity {
    return new SimpleQuantity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SimpleQuantity {
    return new SimpleQuantity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SimpleQuantity {
    return new SimpleQuantity().fromJsonString(jsonString, options);
  }

  static equals(a: SimpleQuantity | PlainMessage<SimpleQuantity> | undefined, b: SimpleQuantity | PlainMessage<SimpleQuantity> | undefined): boolean {
    return proto3.util.equals(SimpleQuantity, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Timing, last updated
 * 2017-04-19T07:44:43.294+10:00. A timing schedule that specifies an event that
 * may occur multiple times. See http://hl7.org/fhir/StructureDefinition/Timing
 *
 * @generated from message google.fhir.stu3.proto.Timing
 */
export class Timing extends Message<Timing> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * When the event occurs
   *
   * @generated from field: repeated google.fhir.stu3.proto.DateTime event = 3;
   */
  event: DateTime[] = [];

  /**
   * @generated from field: google.fhir.stu3.proto.Timing.Repeat repeat = 4;
   */
  repeat?: Timing_Repeat;

  /**
   * BID | TID | QID | AM | PM | QD | QOD | Q4H | Q6H +
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept code = 5;
   */
  code?: CodeableConcept;

  constructor(data?: PartialMessage<Timing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Timing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "event", kind: "message", T: DateTime, repeated: true },
    { no: 4, name: "repeat", kind: "message", T: Timing_Repeat },
    { no: 5, name: "code", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timing {
    return new Timing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timing {
    return new Timing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timing {
    return new Timing().fromJsonString(jsonString, options);
  }

  static equals(a: Timing | PlainMessage<Timing> | undefined, b: Timing | PlainMessage<Timing> | undefined): boolean {
    return proto3.util.equals(Timing, a, b);
  }
}

/**
 * When the event is to occur
 *
 * @generated from message google.fhir.stu3.proto.Timing.Repeat
 */
export class Timing_Repeat extends Message<Timing_Repeat> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * @generated from field: google.fhir.stu3.proto.Timing.Repeat.Bounds bounds = 3;
   */
  bounds?: Timing_Repeat_Bounds;

  /**
   * Number of times to repeat
   *
   * @generated from field: google.fhir.stu3.proto.Integer count = 4;
   */
  count?: Integer;

  /**
   * Maximum number of times to repeat
   *
   * @generated from field: google.fhir.stu3.proto.Integer count_max = 5;
   */
  countMax?: Integer;

  /**
   * How long when it happens
   *
   * @generated from field: google.fhir.stu3.proto.Decimal duration = 6;
   */
  duration?: Decimal;

  /**
   * How long when it happens (Max)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal duration_max = 7;
   */
  durationMax?: Decimal;

  /**
   * s | min | h | d | wk | mo | a - unit of time (UCUM)
   *
   * @generated from field: google.fhir.stu3.proto.UnitsOfTimeCode duration_unit = 8;
   */
  durationUnit?: UnitsOfTimeCode;

  /**
   * Event occurs frequency times per period
   *
   * @generated from field: google.fhir.stu3.proto.Integer frequency = 9;
   */
  frequency?: Integer;

  /**
   * Event occurs up to frequencyMax times per period
   *
   * @generated from field: google.fhir.stu3.proto.Integer frequency_max = 10;
   */
  frequencyMax?: Integer;

  /**
   * Event occurs frequency times per period
   *
   * @generated from field: google.fhir.stu3.proto.Decimal period = 11;
   */
  period?: Decimal;

  /**
   * Upper limit of period (3-4 hours)
   *
   * @generated from field: google.fhir.stu3.proto.Decimal period_max = 12;
   */
  periodMax?: Decimal;

  /**
   * s | min | h | d | wk | mo | a - unit of time (UCUM)
   *
   * @generated from field: google.fhir.stu3.proto.UnitsOfTimeCode period_unit = 13;
   */
  periodUnit?: UnitsOfTimeCode;

  /**
   * mon | tue | wed | thu | fri | sat | sun
   *
   * @generated from field: repeated google.fhir.stu3.proto.DaysOfWeekCode day_of_week = 14;
   */
  dayOfWeek: DaysOfWeekCode[] = [];

  /**
   * Time of day for action
   *
   * @generated from field: repeated google.fhir.stu3.proto.Time time_of_day = 15;
   */
  timeOfDay: Time[] = [];

  /**
   * Regular life events the event is tied to
   *
   * @generated from field: repeated google.fhir.stu3.proto.EventTimingCode when = 16;
   */
  when: EventTimingCode[] = [];

  /**
   * Minutes from event (before or after)
   *
   * @generated from field: google.fhir.stu3.proto.UnsignedInt offset = 17;
   */
  offset?: UnsignedInt;

  constructor(data?: PartialMessage<Timing_Repeat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Timing.Repeat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "bounds", kind: "message", T: Timing_Repeat_Bounds },
    { no: 4, name: "count", kind: "message", T: Integer },
    { no: 5, name: "count_max", kind: "message", T: Integer },
    { no: 6, name: "duration", kind: "message", T: Decimal },
    { no: 7, name: "duration_max", kind: "message", T: Decimal },
    { no: 8, name: "duration_unit", kind: "message", T: UnitsOfTimeCode },
    { no: 9, name: "frequency", kind: "message", T: Integer },
    { no: 10, name: "frequency_max", kind: "message", T: Integer },
    { no: 11, name: "period", kind: "message", T: Decimal },
    { no: 12, name: "period_max", kind: "message", T: Decimal },
    { no: 13, name: "period_unit", kind: "message", T: UnitsOfTimeCode },
    { no: 14, name: "day_of_week", kind: "message", T: DaysOfWeekCode, repeated: true },
    { no: 15, name: "time_of_day", kind: "message", T: Time, repeated: true },
    { no: 16, name: "when", kind: "message", T: EventTimingCode, repeated: true },
    { no: 17, name: "offset", kind: "message", T: UnsignedInt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timing_Repeat {
    return new Timing_Repeat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timing_Repeat {
    return new Timing_Repeat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timing_Repeat {
    return new Timing_Repeat().fromJsonString(jsonString, options);
  }

  static equals(a: Timing_Repeat | PlainMessage<Timing_Repeat> | undefined, b: Timing_Repeat | PlainMessage<Timing_Repeat> | undefined): boolean {
    return proto3.util.equals(Timing_Repeat, a, b);
  }
}

/**
 * Length/Range of lengths, or (Start and/or end) limits
 *
 * @generated from message google.fhir.stu3.proto.Timing.Repeat.Bounds
 */
export class Timing_Repeat_Bounds extends Message<Timing_Repeat_Bounds> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Timing.Repeat.Bounds.bounds
   */
  bounds: {
    /**
     * @generated from field: google.fhir.stu3.proto.Duration duration = 1;
     */
    value: Duration;
    case: "duration";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Range range = 2;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Period period = 3;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Timing_Repeat_Bounds>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Timing.Repeat.Bounds";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "duration", kind: "message", T: Duration, oneof: "bounds" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "bounds" },
    { no: 3, name: "period", kind: "message", T: Period, oneof: "bounds" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Timing_Repeat_Bounds {
    return new Timing_Repeat_Bounds().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Timing_Repeat_Bounds {
    return new Timing_Repeat_Bounds().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Timing_Repeat_Bounds {
    return new Timing_Repeat_Bounds().fromJsonString(jsonString, options);
  }

  static equals(a: Timing_Repeat_Bounds | PlainMessage<Timing_Repeat_Bounds> | undefined, b: Timing_Repeat_Bounds | PlainMessage<Timing_Repeat_Bounds> | undefined): boolean {
    return proto3.util.equals(Timing_Repeat_Bounds, a, b);
  }
}

/**
 * Optional Extensions Element
 * See https://www.hl7.org/fhir/datatypes.html#Extension
 *
 * @generated from message google.fhir.stu3.proto.Extension
 */
export class Extension extends Message<Extension> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * identifies the meaning of the extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri url = 2;
   */
  url?: Uri;

  /**
   * @generated from field: google.fhir.stu3.proto.Extension.ValueX value = 3;
   */
  value?: Extension_ValueX;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 4;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Extension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Extension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "url", kind: "message", T: Uri },
    { no: 3, name: "value", kind: "message", T: Extension_ValueX },
    { no: 4, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension {
    return new Extension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension {
    return new Extension().fromJsonString(jsonString, options);
  }

  static equals(a: Extension | PlainMessage<Extension> | undefined, b: Extension | PlainMessage<Extension> | undefined): boolean {
    return proto3.util.equals(Extension, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.Extension.ValueX
 */
export class Extension_ValueX extends Message<Extension_ValueX> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Extension.ValueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.stu3.proto.Base64Binary base64_binary = 1;
     */
    value: Base64Binary;
    case: "base64Binary";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Boolean boolean = 2;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Code code = 3;
     */
    value: Code;
    case: "code";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Date date = 4;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.DateTime date_time = 5;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Decimal decimal = 6;
     */
    value: Decimal;
    case: "decimal";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Id id = 7;
     */
    value: Id;
    case: "id";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Instant instant = 8;
     */
    value: Instant;
    case: "instant";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Integer integer = 9;
     */
    value: Integer;
    case: "integer";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Markdown markdown = 10;
     */
    value: Markdown;
    case: "markdown";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Oid oid = 11;
     */
    value: Oid;
    case: "oid";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.PositiveInt positive_int = 12;
     */
    value: PositiveInt;
    case: "positiveInt";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.String string_value = 13 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Time time = 14;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.UnsignedInt unsigned_int = 15;
     */
    value: UnsignedInt;
    case: "unsignedInt";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Uri uri = 16;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Address address = 17;
     */
    value: Address;
    case: "address";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Age age = 18;
     */
    value: Age;
    case: "age";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Annotation annotation = 19;
     */
    value: Annotation;
    case: "annotation";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Attachment attachment = 20;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.CodeableConcept codeable_concept = 21;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Coding coding = 22;
     */
    value: Coding;
    case: "coding";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ContactPoint contact_point = 23;
     */
    value: ContactPoint;
    case: "contactPoint";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Count count = 24;
     */
    value: Count;
    case: "count";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Distance distance = 25;
     */
    value: Distance;
    case: "distance";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Duration duration = 26;
     */
    value: Duration;
    case: "duration";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.HumanName human_name = 27;
     */
    value: HumanName;
    case: "humanName";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Identifier identifier = 28;
     */
    value: Identifier;
    case: "identifier";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Money money = 29;
     */
    value: Money;
    case: "money";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Period period = 30;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Quantity quantity = 31;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Range range = 32;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Ratio ratio = 33;
     */
    value: Ratio;
    case: "ratio";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 34;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.SampledData sampled_data = 35;
     */
    value: SampledData;
    case: "sampledData";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Signature signature = 36;
     */
    value: Signature;
    case: "signature";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Timing timing = 37;
     */
    value: Timing;
    case: "timing";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Meta meta = 38;
     */
    value: Meta;
    case: "meta";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Extension_ValueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Extension.ValueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base64_binary", kind: "message", T: Base64Binary, oneof: "choice" },
    { no: 2, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 3, name: "code", kind: "message", T: Code, oneof: "choice" },
    { no: 4, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 5, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 6, name: "decimal", kind: "message", T: Decimal, oneof: "choice" },
    { no: 7, name: "id", kind: "message", T: Id, oneof: "choice" },
    { no: 8, name: "instant", kind: "message", T: Instant, oneof: "choice" },
    { no: 9, name: "integer", kind: "message", T: Integer, oneof: "choice" },
    { no: 10, name: "markdown", kind: "message", T: Markdown, oneof: "choice" },
    { no: 11, name: "oid", kind: "message", T: Oid, oneof: "choice" },
    { no: 12, name: "positive_int", kind: "message", T: PositiveInt, oneof: "choice" },
    { no: 13, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 14, name: "time", kind: "message", T: Time, oneof: "choice" },
    { no: 15, name: "unsigned_int", kind: "message", T: UnsignedInt, oneof: "choice" },
    { no: 16, name: "uri", kind: "message", T: Uri, oneof: "choice" },
    { no: 17, name: "address", kind: "message", T: Address, oneof: "choice" },
    { no: 18, name: "age", kind: "message", T: Age, oneof: "choice" },
    { no: 19, name: "annotation", kind: "message", T: Annotation, oneof: "choice" },
    { no: 20, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 21, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 22, name: "coding", kind: "message", T: Coding, oneof: "choice" },
    { no: 23, name: "contact_point", kind: "message", T: ContactPoint, oneof: "choice" },
    { no: 24, name: "count", kind: "message", T: Count, oneof: "choice" },
    { no: 25, name: "distance", kind: "message", T: Distance, oneof: "choice" },
    { no: 26, name: "duration", kind: "message", T: Duration, oneof: "choice" },
    { no: 27, name: "human_name", kind: "message", T: HumanName, oneof: "choice" },
    { no: 28, name: "identifier", kind: "message", T: Identifier, oneof: "choice" },
    { no: 29, name: "money", kind: "message", T: Money, oneof: "choice" },
    { no: 30, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 31, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 32, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 33, name: "ratio", kind: "message", T: Ratio, oneof: "choice" },
    { no: 34, name: "reference", kind: "message", T: Reference, oneof: "choice" },
    { no: 35, name: "sampled_data", kind: "message", T: SampledData, oneof: "choice" },
    { no: 36, name: "signature", kind: "message", T: Signature, oneof: "choice" },
    { no: 37, name: "timing", kind: "message", T: Timing, oneof: "choice" },
    { no: 38, name: "meta", kind: "message", T: Meta, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Extension_ValueX {
    return new Extension_ValueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Extension_ValueX {
    return new Extension_ValueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Extension_ValueX {
    return new Extension_ValueX().fromJsonString(jsonString, options);
  }

  static equals(a: Extension_ValueX | PlainMessage<Extension_ValueX> | undefined, b: Extension_ValueX | PlainMessage<Extension_ValueX> | undefined): boolean {
    return proto3.util.equals(Extension_ValueX, a, b);
  }
}

/**
 * Specialization of Coding that drops the system field.
 * Fields that use this message must be annotated with
 * fhir_inlined_coding_system.
 *
 * @generated from message google.fhir.stu3.proto.CodingWithFixedSystem
 */
export class CodingWithFixedSystem extends Message<CodingWithFixedSystem> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Version of the system - if relevant
   *
   * @generated from field: google.fhir.stu3.proto.String version = 4;
   */
  version?: String;

  /**
   * Symbol in syntax defined by the system
   *
   * @generated from field: google.fhir.stu3.proto.Code code = 5;
   */
  code?: Code;

  /**
   * Representation defined by the system
   *
   * @generated from field: google.fhir.stu3.proto.String display = 6;
   */
  display?: String;

  /**
   * If this coding was chosen directly by the user
   *
   * @generated from field: google.fhir.stu3.proto.Boolean user_selected = 7;
   */
  userSelected?: Boolean;

  constructor(data?: PartialMessage<CodingWithFixedSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodingWithFixedSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "version", kind: "message", T: String },
    { no: 5, name: "code", kind: "message", T: Code },
    { no: 6, name: "display", kind: "message", T: String },
    { no: 7, name: "user_selected", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodingWithFixedSystem {
    return new CodingWithFixedSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodingWithFixedSystem {
    return new CodingWithFixedSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodingWithFixedSystem {
    return new CodingWithFixedSystem().fromJsonString(jsonString, options);
  }

  static equals(a: CodingWithFixedSystem | PlainMessage<CodingWithFixedSystem> | undefined, b: CodingWithFixedSystem | PlainMessage<CodingWithFixedSystem> | undefined): boolean {
    return proto3.util.equals(CodingWithFixedSystem, a, b);
  }
}

/**
 * Specialization of Coding that drops the system and code fields.
 * Fields that use this message must be annotated with
 * fhir_inlined_coding_system and fhir_inlined_coding_code.
 *
 * @generated from message google.fhir.stu3.proto.CodingWithFixedCode
 */
export class CodingWithFixedCode extends Message<CodingWithFixedCode> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Version of the system - if relevant
   *
   * @generated from field: google.fhir.stu3.proto.String version = 4;
   */
  version?: String;

  /**
   * Representation defined by the system
   *
   * @generated from field: google.fhir.stu3.proto.String display = 6;
   */
  display?: String;

  /**
   * If this coding was chosen directly by the user
   *
   * @generated from field: google.fhir.stu3.proto.Boolean user_selected = 7;
   */
  userSelected?: Boolean;

  constructor(data?: PartialMessage<CodingWithFixedCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodingWithFixedCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "version", kind: "message", T: String },
    { no: 6, name: "display", kind: "message", T: String },
    { no: 7, name: "user_selected", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodingWithFixedCode {
    return new CodingWithFixedCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodingWithFixedCode {
    return new CodingWithFixedCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodingWithFixedCode {
    return new CodingWithFixedCode().fromJsonString(jsonString, options);
  }

  static equals(a: CodingWithFixedCode | PlainMessage<CodingWithFixedCode> | undefined, b: CodingWithFixedCode | PlainMessage<CodingWithFixedCode> | undefined): boolean {
    return proto3.util.equals(CodingWithFixedCode, a, b);
  }
}

/**
 * A reference from one resource to another
 * See https://www.hl7.org/fhir/datatypes.html#Reference
 *
 * @generated from message google.fhir.stu3.proto.Reference
 */
export class Reference extends Message<Reference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Literal reference, Relative, internal or absolute URL
   *
   * @generated from oneof google.fhir.stu3.proto.Reference.reference
   */
  reference: {
    /**
     * Absolute URIs are untyped.
     *
     * @generated from field: google.fhir.stu3.proto.String uri = 3 [json_name = "reference"];
     */
    value: String;
    case: "uri";
  } | {
    /**
     * Fragments (internal references) are untyped, and represented here
     * without the leading '#'.
     *
     * @generated from field: google.fhir.stu3.proto.String fragment = 4;
     */
    value: String;
    case: "fragment";
  } | {
    /**
     * Typed relative urls are represented here.
     *
     * @generated from field: google.fhir.stu3.proto.ReferenceId account_id = 5;
     */
    value: ReferenceId;
    case: "accountId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId activity_definition_id = 6;
     */
    value: ReferenceId;
    case: "activityDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId adverse_event_id = 7;
     */
    value: ReferenceId;
    case: "adverseEventId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId allergy_intolerance_id = 8;
     */
    value: ReferenceId;
    case: "allergyIntoleranceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId appointment_id = 9;
     */
    value: ReferenceId;
    case: "appointmentId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId appointment_response_id = 10;
     */
    value: ReferenceId;
    case: "appointmentResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId audit_event_id = 11;
     */
    value: ReferenceId;
    case: "auditEventId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId basic_id = 12;
     */
    value: ReferenceId;
    case: "basicId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId binary_id = 13;
     */
    value: ReferenceId;
    case: "binaryId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId body_site_id = 14;
     */
    value: ReferenceId;
    case: "bodySiteId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId bundle_id = 15;
     */
    value: ReferenceId;
    case: "bundleId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId capability_statement_id = 16;
     */
    value: ReferenceId;
    case: "capabilityStatementId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId care_plan_id = 17;
     */
    value: ReferenceId;
    case: "carePlanId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId care_team_id = 18;
     */
    value: ReferenceId;
    case: "careTeamId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId charge_item_id = 19;
     */
    value: ReferenceId;
    case: "chargeItemId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId claim_id = 20;
     */
    value: ReferenceId;
    case: "claimId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId claim_response_id = 21;
     */
    value: ReferenceId;
    case: "claimResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId clinical_impression_id = 22;
     */
    value: ReferenceId;
    case: "clinicalImpressionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId code_system_id = 23;
     */
    value: ReferenceId;
    case: "codeSystemId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId communication_id = 24;
     */
    value: ReferenceId;
    case: "communicationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId communication_request_id = 25;
     */
    value: ReferenceId;
    case: "communicationRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId compartment_definition_id = 26;
     */
    value: ReferenceId;
    case: "compartmentDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId composition_id = 27;
     */
    value: ReferenceId;
    case: "compositionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId concept_map_id = 28;
     */
    value: ReferenceId;
    case: "conceptMapId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId condition_id = 29;
     */
    value: ReferenceId;
    case: "conditionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId consent_id = 30;
     */
    value: ReferenceId;
    case: "consentId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId contract_id = 31;
     */
    value: ReferenceId;
    case: "contractId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId coverage_id = 32;
     */
    value: ReferenceId;
    case: "coverageId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId data_element_id = 33;
     */
    value: ReferenceId;
    case: "dataElementId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId detected_issue_id = 34;
     */
    value: ReferenceId;
    case: "detectedIssueId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId device_id = 35;
     */
    value: ReferenceId;
    case: "deviceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId device_component_id = 36;
     */
    value: ReferenceId;
    case: "deviceComponentId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId device_metric_id = 37;
     */
    value: ReferenceId;
    case: "deviceMetricId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId device_request_id = 38;
     */
    value: ReferenceId;
    case: "deviceRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId device_use_statement_id = 39;
     */
    value: ReferenceId;
    case: "deviceUseStatementId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId diagnostic_report_id = 40;
     */
    value: ReferenceId;
    case: "diagnosticReportId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId document_manifest_id = 41;
     */
    value: ReferenceId;
    case: "documentManifestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId document_reference_id = 42;
     */
    value: ReferenceId;
    case: "documentReferenceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId eligibility_request_id = 43;
     */
    value: ReferenceId;
    case: "eligibilityRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId eligibility_response_id = 44;
     */
    value: ReferenceId;
    case: "eligibilityResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId encounter_id = 45;
     */
    value: ReferenceId;
    case: "encounterId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId endpoint_id = 46;
     */
    value: ReferenceId;
    case: "endpointId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId enrollment_request_id = 47;
     */
    value: ReferenceId;
    case: "enrollmentRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId enrollment_response_id = 48;
     */
    value: ReferenceId;
    case: "enrollmentResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId episode_of_care_id = 49;
     */
    value: ReferenceId;
    case: "episodeOfCareId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId expansion_profile_id = 50;
     */
    value: ReferenceId;
    case: "expansionProfileId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId explanation_of_benefit_id = 51;
     */
    value: ReferenceId;
    case: "explanationOfBenefitId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId family_member_history_id = 52;
     */
    value: ReferenceId;
    case: "familyMemberHistoryId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId flag_id = 53;
     */
    value: ReferenceId;
    case: "flagId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId goal_id = 54;
     */
    value: ReferenceId;
    case: "goalId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId graph_definition_id = 55;
     */
    value: ReferenceId;
    case: "graphDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId group_id = 56;
     */
    value: ReferenceId;
    case: "groupId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId guidance_response_id = 57;
     */
    value: ReferenceId;
    case: "guidanceResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId healthcare_service_id = 58;
     */
    value: ReferenceId;
    case: "healthcareServiceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId imaging_manifest_id = 59;
     */
    value: ReferenceId;
    case: "imagingManifestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId imaging_study_id = 60;
     */
    value: ReferenceId;
    case: "imagingStudyId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId immunization_id = 61;
     */
    value: ReferenceId;
    case: "immunizationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId immunization_recommendation_id = 62;
     */
    value: ReferenceId;
    case: "immunizationRecommendationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId implementation_guide_id = 63;
     */
    value: ReferenceId;
    case: "implementationGuideId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId library_id = 64;
     */
    value: ReferenceId;
    case: "libraryId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId linkage_id = 65;
     */
    value: ReferenceId;
    case: "linkageId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId list_id = 66;
     */
    value: ReferenceId;
    case: "listId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId location_id = 67;
     */
    value: ReferenceId;
    case: "locationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId measure_id = 68;
     */
    value: ReferenceId;
    case: "measureId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId measure_report_id = 69;
     */
    value: ReferenceId;
    case: "measureReportId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId media_id = 70;
     */
    value: ReferenceId;
    case: "mediaId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId medication_id = 71;
     */
    value: ReferenceId;
    case: "medicationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId medication_administration_id = 72;
     */
    value: ReferenceId;
    case: "medicationAdministrationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId medication_dispense_id = 73;
     */
    value: ReferenceId;
    case: "medicationDispenseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId medication_request_id = 74;
     */
    value: ReferenceId;
    case: "medicationRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId medication_statement_id = 75;
     */
    value: ReferenceId;
    case: "medicationStatementId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId message_definition_id = 76;
     */
    value: ReferenceId;
    case: "messageDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId message_header_id = 77;
     */
    value: ReferenceId;
    case: "messageHeaderId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId naming_system_id = 78;
     */
    value: ReferenceId;
    case: "namingSystemId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId nutrition_order_id = 79;
     */
    value: ReferenceId;
    case: "nutritionOrderId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId observation_id = 80;
     */
    value: ReferenceId;
    case: "observationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId operation_definition_id = 81;
     */
    value: ReferenceId;
    case: "operationDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId operation_outcome_id = 82;
     */
    value: ReferenceId;
    case: "operationOutcomeId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId organization_id = 83;
     */
    value: ReferenceId;
    case: "organizationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId parameters_id = 84;
     */
    value: ReferenceId;
    case: "parametersId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId patient_id = 85;
     */
    value: ReferenceId;
    case: "patientId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId payment_notice_id = 86;
     */
    value: ReferenceId;
    case: "paymentNoticeId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId payment_reconciliation_id = 87;
     */
    value: ReferenceId;
    case: "paymentReconciliationId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId person_id = 88;
     */
    value: ReferenceId;
    case: "personId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId plan_definition_id = 89;
     */
    value: ReferenceId;
    case: "planDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId practitioner_id = 90;
     */
    value: ReferenceId;
    case: "practitionerId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId practitioner_role_id = 91;
     */
    value: ReferenceId;
    case: "practitionerRoleId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId procedure_id = 92;
     */
    value: ReferenceId;
    case: "procedureId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId procedure_request_id = 93;
     */
    value: ReferenceId;
    case: "procedureRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId process_request_id = 94;
     */
    value: ReferenceId;
    case: "processRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId process_response_id = 95;
     */
    value: ReferenceId;
    case: "processResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId provenance_id = 96;
     */
    value: ReferenceId;
    case: "provenanceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId questionnaire_id = 97;
     */
    value: ReferenceId;
    case: "questionnaireId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId questionnaire_response_id = 98;
     */
    value: ReferenceId;
    case: "questionnaireResponseId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId referral_request_id = 99;
     */
    value: ReferenceId;
    case: "referralRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId related_person_id = 100;
     */
    value: ReferenceId;
    case: "relatedPersonId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId request_group_id = 101;
     */
    value: ReferenceId;
    case: "requestGroupId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId research_study_id = 102;
     */
    value: ReferenceId;
    case: "researchStudyId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId research_subject_id = 103;
     */
    value: ReferenceId;
    case: "researchSubjectId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId risk_assessment_id = 104;
     */
    value: ReferenceId;
    case: "riskAssessmentId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId schedule_id = 105;
     */
    value: ReferenceId;
    case: "scheduleId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId search_parameter_id = 106;
     */
    value: ReferenceId;
    case: "searchParameterId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId sequence_id = 107;
     */
    value: ReferenceId;
    case: "sequenceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId service_definition_id = 108;
     */
    value: ReferenceId;
    case: "serviceDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId slot_id = 109;
     */
    value: ReferenceId;
    case: "slotId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId specimen_id = 110;
     */
    value: ReferenceId;
    case: "specimenId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId structure_definition_id = 111;
     */
    value: ReferenceId;
    case: "structureDefinitionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId structure_map_id = 112;
     */
    value: ReferenceId;
    case: "structureMapId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId subscription_id = 113;
     */
    value: ReferenceId;
    case: "subscriptionId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId substance_id = 114;
     */
    value: ReferenceId;
    case: "substanceId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId supply_delivery_id = 115;
     */
    value: ReferenceId;
    case: "supplyDeliveryId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId supply_request_id = 116;
     */
    value: ReferenceId;
    case: "supplyRequestId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId task_id = 117;
     */
    value: ReferenceId;
    case: "taskId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId test_report_id = 118;
     */
    value: ReferenceId;
    case: "testReportId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId test_script_id = 119;
     */
    value: ReferenceId;
    case: "testScriptId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId value_set_id = 120;
     */
    value: ReferenceId;
    case: "valueSetId";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.ReferenceId vision_prescription_id = 121;
     */
    value: ReferenceId;
    case: "visionPrescriptionId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Logical reference, when literal reference is not known
   *
   * @generated from field: google.fhir.stu3.proto.Identifier identifier = 122;
   */
  identifier?: Identifier;

  /**
   * Text alternative for the resource
   *
   * @generated from field: google.fhir.stu3.proto.String display = 123;
   */
  display?: String;

  constructor(data?: PartialMessage<Reference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Reference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "uri", jsonName: "reference", kind: "message", T: String, oneof: "reference" },
    { no: 4, name: "fragment", kind: "message", T: String, oneof: "reference" },
    { no: 5, name: "account_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 6, name: "activity_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 7, name: "adverse_event_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 8, name: "allergy_intolerance_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 9, name: "appointment_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 10, name: "appointment_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 11, name: "audit_event_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 12, name: "basic_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 13, name: "binary_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 14, name: "body_site_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 15, name: "bundle_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 16, name: "capability_statement_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 17, name: "care_plan_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 18, name: "care_team_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 19, name: "charge_item_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 20, name: "claim_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 21, name: "claim_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 22, name: "clinical_impression_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 23, name: "code_system_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 24, name: "communication_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 25, name: "communication_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 26, name: "compartment_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 27, name: "composition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 28, name: "concept_map_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 29, name: "condition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 30, name: "consent_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 31, name: "contract_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 32, name: "coverage_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 33, name: "data_element_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 34, name: "detected_issue_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 35, name: "device_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 36, name: "device_component_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 37, name: "device_metric_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 38, name: "device_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 39, name: "device_use_statement_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 40, name: "diagnostic_report_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 41, name: "document_manifest_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 42, name: "document_reference_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 43, name: "eligibility_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 44, name: "eligibility_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 45, name: "encounter_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 46, name: "endpoint_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 47, name: "enrollment_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 48, name: "enrollment_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 49, name: "episode_of_care_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 50, name: "expansion_profile_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 51, name: "explanation_of_benefit_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 52, name: "family_member_history_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 53, name: "flag_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 54, name: "goal_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 55, name: "graph_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 56, name: "group_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 57, name: "guidance_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 58, name: "healthcare_service_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 59, name: "imaging_manifest_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 60, name: "imaging_study_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 61, name: "immunization_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 62, name: "immunization_recommendation_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 63, name: "implementation_guide_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 64, name: "library_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 65, name: "linkage_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 66, name: "list_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 67, name: "location_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 68, name: "measure_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 69, name: "measure_report_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 70, name: "media_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 71, name: "medication_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 72, name: "medication_administration_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 73, name: "medication_dispense_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 74, name: "medication_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 75, name: "medication_statement_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 76, name: "message_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 77, name: "message_header_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 78, name: "naming_system_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 79, name: "nutrition_order_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 80, name: "observation_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 81, name: "operation_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 82, name: "operation_outcome_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 83, name: "organization_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 84, name: "parameters_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 85, name: "patient_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 86, name: "payment_notice_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 87, name: "payment_reconciliation_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 88, name: "person_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 89, name: "plan_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 90, name: "practitioner_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 91, name: "practitioner_role_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 92, name: "procedure_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 93, name: "procedure_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 94, name: "process_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 95, name: "process_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 96, name: "provenance_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 97, name: "questionnaire_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 98, name: "questionnaire_response_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 99, name: "referral_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 100, name: "related_person_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 101, name: "request_group_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 102, name: "research_study_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 103, name: "research_subject_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 104, name: "risk_assessment_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 105, name: "schedule_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 106, name: "search_parameter_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 107, name: "sequence_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 108, name: "service_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 109, name: "slot_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 110, name: "specimen_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 111, name: "structure_definition_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 112, name: "structure_map_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 113, name: "subscription_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 114, name: "substance_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 115, name: "supply_delivery_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 116, name: "supply_request_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 117, name: "task_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 118, name: "test_report_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 119, name: "test_script_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 120, name: "value_set_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 121, name: "vision_prescription_id", kind: "message", T: ReferenceId, oneof: "reference" },
    { no: 122, name: "identifier", kind: "message", T: Identifier },
    { no: 123, name: "display", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reference {
    return new Reference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reference {
    return new Reference().fromJsonString(jsonString, options);
  }

  static equals(a: Reference | PlainMessage<Reference> | undefined, b: Reference | PlainMessage<Reference> | undefined): boolean {
    return proto3.util.equals(Reference, a, b);
  }
}

/**
 * @generated from message google.fhir.stu3.proto.ReferenceId
 */
export class ReferenceId extends Message<ReferenceId> {
  /**
   * Primitive value for id
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * History version, if present.
   *
   * @generated from field: google.fhir.stu3.proto.Id history = 2;
   */
  history?: Id;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 3;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 4;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ReferenceId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ReferenceId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "history", kind: "message", T: Id },
    { no: 3, name: "id", kind: "message", T: String },
    { no: 4, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferenceId {
    return new ReferenceId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferenceId {
    return new ReferenceId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferenceId {
    return new ReferenceId().fromJsonString(jsonString, options);
  }

  static equals(a: ReferenceId | PlainMessage<ReferenceId> | undefined, b: ReferenceId | PlainMessage<ReferenceId> | undefined): boolean {
    return proto3.util.equals(ReferenceId, a, b);
  }
}

/**
 * The type of an address (physical / postal)
 * See http://hl7.org/fhir/ValueSet/address-type
 *
 * @generated from message google.fhir.stu3.proto.AddressTypeCode
 */
export class AddressTypeCode extends Message<AddressTypeCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.AddressTypeCode.Value value = 1;
   */
  value = AddressTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AddressTypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressTypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AddressTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressTypeCode {
    return new AddressTypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressTypeCode {
    return new AddressTypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressTypeCode {
    return new AddressTypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: AddressTypeCode | PlainMessage<AddressTypeCode> | undefined, b: AddressTypeCode | PlainMessage<AddressTypeCode> | undefined): boolean {
    return proto3.util.equals(AddressTypeCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.AddressTypeCode.Value
 */
export enum AddressTypeCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: POSTAL = 1;
   */
  POSTAL = 1,

  /**
   * @generated from enum value: PHYSICAL = 2;
   */
  PHYSICAL = 2,

  /**
   * @generated from enum value: BOTH = 3;
   */
  BOTH = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(AddressTypeCode_Value)
proto3.util.setEnumType(AddressTypeCode_Value, "google.fhir.stu3.proto.AddressTypeCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "POSTAL" },
  { no: 2, name: "PHYSICAL" },
  { no: 3, name: "BOTH" },
]);

/**
 * The use of an address
 * See http://hl7.org/fhir/ValueSet/address-use
 *
 * @generated from message google.fhir.stu3.proto.AddressUseCode
 */
export class AddressUseCode extends Message<AddressUseCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.AddressUseCode.Value value = 1;
   */
  value = AddressUseCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AddressUseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressUseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AddressUseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressUseCode {
    return new AddressUseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressUseCode {
    return new AddressUseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressUseCode {
    return new AddressUseCode().fromJsonString(jsonString, options);
  }

  static equals(a: AddressUseCode | PlainMessage<AddressUseCode> | undefined, b: AddressUseCode | PlainMessage<AddressUseCode> | undefined): boolean {
    return proto3.util.equals(AddressUseCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.AddressUseCode.Value
 */
export enum AddressUseCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: HOME = 1;
   */
  HOME = 1,

  /**
   * @generated from enum value: WORK = 2;
   */
  WORK = 2,

  /**
   * @generated from enum value: TEMP = 3;
   */
  TEMP = 3,

  /**
   * @generated from enum value: OLD = 4;
   */
  OLD = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(AddressUseCode_Value)
proto3.util.setEnumType(AddressUseCode_Value, "google.fhir.stu3.proto.AddressUseCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "HOME" },
  { no: 2, name: "WORK" },
  { no: 3, name: "TEMP" },
  { no: 4, name: "OLD" },
]);

/**
 * Telecommunications form for contact point
 * See http://hl7.org/fhir/ValueSet/contact-point-system
 *
 * @generated from message google.fhir.stu3.proto.ContactPointSystemCode
 */
export class ContactPointSystemCode extends Message<ContactPointSystemCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.ContactPointSystemCode.Value value = 1;
   */
  value = ContactPointSystemCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ContactPointSystemCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ContactPointSystemCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ContactPointSystemCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactPointSystemCode {
    return new ContactPointSystemCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactPointSystemCode {
    return new ContactPointSystemCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactPointSystemCode {
    return new ContactPointSystemCode().fromJsonString(jsonString, options);
  }

  static equals(a: ContactPointSystemCode | PlainMessage<ContactPointSystemCode> | undefined, b: ContactPointSystemCode | PlainMessage<ContactPointSystemCode> | undefined): boolean {
    return proto3.util.equals(ContactPointSystemCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.ContactPointSystemCode.Value
 */
export enum ContactPointSystemCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: PHONE = 1;
   */
  PHONE = 1,

  /**
   * @generated from enum value: FAX = 2;
   */
  FAX = 2,

  /**
   * @generated from enum value: EMAIL = 3;
   */
  EMAIL = 3,

  /**
   * @generated from enum value: PAGER = 4;
   */
  PAGER = 4,

  /**
   * @generated from enum value: URL = 5;
   */
  URL = 5,

  /**
   * @generated from enum value: SMS = 6;
   */
  SMS = 6,

  /**
   * @generated from enum value: OTHER = 7;
   */
  OTHER = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(ContactPointSystemCode_Value)
proto3.util.setEnumType(ContactPointSystemCode_Value, "google.fhir.stu3.proto.ContactPointSystemCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "PHONE" },
  { no: 2, name: "FAX" },
  { no: 3, name: "EMAIL" },
  { no: 4, name: "PAGER" },
  { no: 5, name: "URL" },
  { no: 6, name: "SMS" },
  { no: 7, name: "OTHER" },
]);

/**
 * Use of contact point
 * See http://hl7.org/fhir/ValueSet/contact-point-use
 *
 * @generated from message google.fhir.stu3.proto.ContactPointUseCode
 */
export class ContactPointUseCode extends Message<ContactPointUseCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.ContactPointUseCode.Value value = 1;
   */
  value = ContactPointUseCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ContactPointUseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ContactPointUseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ContactPointUseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactPointUseCode {
    return new ContactPointUseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactPointUseCode {
    return new ContactPointUseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactPointUseCode {
    return new ContactPointUseCode().fromJsonString(jsonString, options);
  }

  static equals(a: ContactPointUseCode | PlainMessage<ContactPointUseCode> | undefined, b: ContactPointUseCode | PlainMessage<ContactPointUseCode> | undefined): boolean {
    return proto3.util.equals(ContactPointUseCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.ContactPointUseCode.Value
 */
export enum ContactPointUseCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: HOME = 1;
   */
  HOME = 1,

  /**
   * @generated from enum value: WORK = 2;
   */
  WORK = 2,

  /**
   * @generated from enum value: TEMP = 3;
   */
  TEMP = 3,

  /**
   * @generated from enum value: OLD = 4;
   */
  OLD = 4,

  /**
   * @generated from enum value: MOBILE = 5;
   */
  MOBILE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ContactPointUseCode_Value)
proto3.util.setEnumType(ContactPointUseCode_Value, "google.fhir.stu3.proto.ContactPointUseCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "HOME" },
  { no: 2, name: "WORK" },
  { no: 3, name: "TEMP" },
  { no: 4, name: "OLD" },
  { no: 5, name: "MOBILE" },
]);

/**
 * The days of the week.
 * See http://hl7.org/fhir/ValueSet/days-of-week
 *
 * @generated from message google.fhir.stu3.proto.DaysOfWeekCode
 */
export class DaysOfWeekCode extends Message<DaysOfWeekCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.DaysOfWeekCode.Value value = 1;
   */
  value = DaysOfWeekCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DaysOfWeekCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DaysOfWeekCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DaysOfWeekCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaysOfWeekCode {
    return new DaysOfWeekCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaysOfWeekCode {
    return new DaysOfWeekCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaysOfWeekCode {
    return new DaysOfWeekCode().fromJsonString(jsonString, options);
  }

  static equals(a: DaysOfWeekCode | PlainMessage<DaysOfWeekCode> | undefined, b: DaysOfWeekCode | PlainMessage<DaysOfWeekCode> | undefined): boolean {
    return proto3.util.equals(DaysOfWeekCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.DaysOfWeekCode.Value
 */
export enum DaysOfWeekCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: MON = 1;
   */
  MON = 1,

  /**
   * @generated from enum value: TUE = 2;
   */
  TUE = 2,

  /**
   * @generated from enum value: WED = 3;
   */
  WED = 3,

  /**
   * @generated from enum value: THU = 4;
   */
  THU = 4,

  /**
   * @generated from enum value: FRI = 5;
   */
  FRI = 5,

  /**
   * @generated from enum value: SAT = 6;
   */
  SAT = 6,

  /**
   * @generated from enum value: SUN = 7;
   */
  SUN = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(DaysOfWeekCode_Value)
proto3.util.setEnumType(DaysOfWeekCode_Value, "google.fhir.stu3.proto.DaysOfWeekCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "MON" },
  { no: 2, name: "TUE" },
  { no: 3, name: "WED" },
  { no: 4, name: "THU" },
  { no: 5, name: "FRI" },
  { no: 6, name: "SAT" },
  { no: 7, name: "SUN" },
]);

/**
 * Real world event relating to the schedule.
 * See http://hl7.org/fhir/ValueSet/event-timing
 *
 * @generated from message google.fhir.stu3.proto.EventTimingCode
 */
export class EventTimingCode extends Message<EventTimingCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.EventTimingCode.Value value = 1;
   */
  value = EventTimingCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<EventTimingCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EventTimingCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EventTimingCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventTimingCode {
    return new EventTimingCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventTimingCode {
    return new EventTimingCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventTimingCode {
    return new EventTimingCode().fromJsonString(jsonString, options);
  }

  static equals(a: EventTimingCode | PlainMessage<EventTimingCode> | undefined, b: EventTimingCode | PlainMessage<EventTimingCode> | undefined): boolean {
    return proto3.util.equals(EventTimingCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.EventTimingCode.Value
 */
export enum EventTimingCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: MORN = 1;
   */
  MORN = 1,

  /**
   * @generated from enum value: AFT = 2;
   */
  AFT = 2,

  /**
   * @generated from enum value: EVE = 3;
   */
  EVE = 3,

  /**
   * @generated from enum value: NIGHT = 4;
   */
  NIGHT = 4,

  /**
   * @generated from enum value: PHS = 5;
   */
  PHS = 5,

  /**
   * @generated from enum value: HS = 6;
   */
  HS = 6,

  /**
   * @generated from enum value: WAKE = 7;
   */
  WAKE = 7,

  /**
   * @generated from enum value: C = 8;
   */
  C = 8,

  /**
   * @generated from enum value: CM = 9;
   */
  CM = 9,

  /**
   * @generated from enum value: CD = 10;
   */
  CD = 10,

  /**
   * @generated from enum value: CV = 11;
   */
  CV = 11,

  /**
   * @generated from enum value: AC = 12;
   */
  AC = 12,

  /**
   * @generated from enum value: ACM = 13;
   */
  ACM = 13,

  /**
   * @generated from enum value: ACD = 14;
   */
  ACD = 14,

  /**
   * @generated from enum value: ACV = 15;
   */
  ACV = 15,

  /**
   * @generated from enum value: PC = 16;
   */
  PC = 16,

  /**
   * @generated from enum value: PCM = 17;
   */
  PCM = 17,

  /**
   * @generated from enum value: PCD = 18;
   */
  PCD = 18,

  /**
   * @generated from enum value: PCV = 19;
   */
  PCV = 19,
}
// Retrieve enum metadata with: proto3.getEnumType(EventTimingCode_Value)
proto3.util.setEnumType(EventTimingCode_Value, "google.fhir.stu3.proto.EventTimingCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "MORN" },
  { no: 2, name: "AFT" },
  { no: 3, name: "EVE" },
  { no: 4, name: "NIGHT" },
  { no: 5, name: "PHS" },
  { no: 6, name: "HS" },
  { no: 7, name: "WAKE" },
  { no: 8, name: "C" },
  { no: 9, name: "CM" },
  { no: 10, name: "CD" },
  { no: 11, name: "CV" },
  { no: 12, name: "AC" },
  { no: 13, name: "ACM" },
  { no: 14, name: "ACD" },
  { no: 15, name: "ACV" },
  { no: 16, name: "PC" },
  { no: 17, name: "PCM" },
  { no: 18, name: "PCD" },
  { no: 19, name: "PCV" },
]);

/**
 * Identifies the purpose for this identifier, if known .
 * See http://hl7.org/fhir/ValueSet/identifier-use
 *
 * @generated from message google.fhir.stu3.proto.IdentifierUseCode
 */
export class IdentifierUseCode extends Message<IdentifierUseCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.IdentifierUseCode.Value value = 1;
   */
  value = IdentifierUseCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<IdentifierUseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.IdentifierUseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(IdentifierUseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierUseCode {
    return new IdentifierUseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierUseCode {
    return new IdentifierUseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierUseCode {
    return new IdentifierUseCode().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierUseCode | PlainMessage<IdentifierUseCode> | undefined, b: IdentifierUseCode | PlainMessage<IdentifierUseCode> | undefined): boolean {
    return proto3.util.equals(IdentifierUseCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.IdentifierUseCode.Value
 */
export enum IdentifierUseCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: USUAL = 1;
   */
  USUAL = 1,

  /**
   * @generated from enum value: OFFICIAL = 2;
   */
  OFFICIAL = 2,

  /**
   * @generated from enum value: TEMP = 3;
   */
  TEMP = 3,

  /**
   * @generated from enum value: SECONDARY = 4;
   */
  SECONDARY = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(IdentifierUseCode_Value)
proto3.util.setEnumType(IdentifierUseCode_Value, "google.fhir.stu3.proto.IdentifierUseCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "USUAL" },
  { no: 2, name: "OFFICIAL" },
  { no: 3, name: "TEMP" },
  { no: 4, name: "SECONDARY" },
]);

/**
 * This value set includes all possible codes from BCP-47
 * (http://tools.ietf.org/html/bcp47)
 * See http://hl7.org/fhir/ValueSet/all-languages
 *
 * @generated from message google.fhir.stu3.proto.AllLanguageCode
 */
export class AllLanguageCode extends Message<AllLanguageCode> {
  /**
   * Primitive value for code
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AllLanguageCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllLanguageCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllLanguageCode {
    return new AllLanguageCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllLanguageCode {
    return new AllLanguageCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllLanguageCode {
    return new AllLanguageCode().fromJsonString(jsonString, options);
  }

  static equals(a: AllLanguageCode | PlainMessage<AllLanguageCode> | undefined, b: AllLanguageCode | PlainMessage<AllLanguageCode> | undefined): boolean {
    return proto3.util.equals(AllLanguageCode, a, b);
  }
}

/**
 * This value set includes common codes from BCP-47
 * (http://tools.ietf.org/html/bcp47)
 * See http://hl7.org/fhir/ValueSet/languages
 * Note: For historical reasons, this does not use an enum to represent value.
 *
 * @generated from message google.fhir.stu3.proto.LanguageCode
 */
export class LanguageCode extends Message<LanguageCode> {
  /**
   * Primitive value for code
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<LanguageCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.LanguageCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LanguageCode {
    return new LanguageCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LanguageCode {
    return new LanguageCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LanguageCode {
    return new LanguageCode().fromJsonString(jsonString, options);
  }

  static equals(a: LanguageCode | PlainMessage<LanguageCode> | undefined, b: LanguageCode | PlainMessage<LanguageCode> | undefined): boolean {
    return proto3.util.equals(LanguageCode, a, b);
  }
}

/**
 * Any valid MimeType.
 * See http://www.rfc-editor.org/bcp/bcp13.txt
 *
 * @generated from message google.fhir.stu3.proto.MimeTypeCode
 */
export class MimeTypeCode extends Message<MimeTypeCode> {
  /**
   * Primitive value for code
   *
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MimeTypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MimeTypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MimeTypeCode {
    return new MimeTypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MimeTypeCode {
    return new MimeTypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MimeTypeCode {
    return new MimeTypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: MimeTypeCode | PlainMessage<MimeTypeCode> | undefined, b: MimeTypeCode | PlainMessage<MimeTypeCode> | undefined): boolean {
    return proto3.util.equals(MimeTypeCode, a, b);
  }
}

/**
 * The use of a human name
 * See http://hl7.org/fhir/ValueSet/name-use
 *
 * @generated from message google.fhir.stu3.proto.NameUseCode
 */
export class NameUseCode extends Message<NameUseCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.NameUseCode.Value value = 1;
   */
  value = NameUseCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<NameUseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.NameUseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(NameUseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NameUseCode {
    return new NameUseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NameUseCode {
    return new NameUseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NameUseCode {
    return new NameUseCode().fromJsonString(jsonString, options);
  }

  static equals(a: NameUseCode | PlainMessage<NameUseCode> | undefined, b: NameUseCode | PlainMessage<NameUseCode> | undefined): boolean {
    return proto3.util.equals(NameUseCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.NameUseCode.Value
 */
export enum NameUseCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: USUAL = 1;
   */
  USUAL = 1,

  /**
   * @generated from enum value: OFFICIAL = 2;
   */
  OFFICIAL = 2,

  /**
   * @generated from enum value: TEMP = 3;
   */
  TEMP = 3,

  /**
   * @generated from enum value: NICKNAME = 4;
   */
  NICKNAME = 4,

  /**
   * @generated from enum value: ANONYMOUS = 5;
   */
  ANONYMOUS = 5,

  /**
   * @generated from enum value: OLD = 6;
   */
  OLD = 6,

  /**
   * @generated from enum value: MAIDEN = 7;
   */
  MAIDEN = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(NameUseCode_Value)
proto3.util.setEnumType(NameUseCode_Value, "google.fhir.stu3.proto.NameUseCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "USUAL" },
  { no: 2, name: "OFFICIAL" },
  { no: 3, name: "TEMP" },
  { no: 4, name: "NICKNAME" },
  { no: 5, name: "ANONYMOUS" },
  { no: 6, name: "OLD" },
  { no: 7, name: "MAIDEN" },
]);

/**
 * How the Quantity should be understood and represented.
 * See http://hl7.org/fhir/ValueSet/quantity-comparator
 *
 * @generated from message google.fhir.stu3.proto.QuantityComparatorCode
 */
export class QuantityComparatorCode extends Message<QuantityComparatorCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.QuantityComparatorCode.Value value = 1;
   */
  value = QuantityComparatorCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<QuantityComparatorCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuantityComparatorCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(QuantityComparatorCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuantityComparatorCode {
    return new QuantityComparatorCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuantityComparatorCode {
    return new QuantityComparatorCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuantityComparatorCode {
    return new QuantityComparatorCode().fromJsonString(jsonString, options);
  }

  static equals(a: QuantityComparatorCode | PlainMessage<QuantityComparatorCode> | undefined, b: QuantityComparatorCode | PlainMessage<QuantityComparatorCode> | undefined): boolean {
    return proto3.util.equals(QuantityComparatorCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.QuantityComparatorCode.Value
 */
export enum QuantityComparatorCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: LT = 1;
   */
  LT = 1,

  /**
   * @generated from enum value: LE = 2;
   */
  LE = 2,

  /**
   * @generated from enum value: GE = 3;
   */
  GE = 3,

  /**
   * @generated from enum value: GT = 4;
   */
  GT = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(QuantityComparatorCode_Value)
proto3.util.setEnumType(QuantityComparatorCode_Value, "google.fhir.stu3.proto.QuantityComparatorCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "LT" },
  { no: 2, name: "LE" },
  { no: 3, name: "GE" },
  { no: 4, name: "GT" },
]);

/**
 * A unit of time (units from UCUM). See
 * http://hl7.org/fhir/ValueSet/units-of-time
 *
 * @generated from message google.fhir.stu3.proto.UnitsOfTimeCode
 */
export class UnitsOfTimeCode extends Message<UnitsOfTimeCode> {
  /**
   * @generated from field: google.fhir.stu3.proto.UnitsOfTimeCode.Value value = 1;
   */
  value = UnitsOfTimeCode_Value.INVALID_UNINITIALIZED;

  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 2;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<UnitsOfTimeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.UnitsOfTimeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(UnitsOfTimeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsOfTimeCode {
    return new UnitsOfTimeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsOfTimeCode {
    return new UnitsOfTimeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsOfTimeCode {
    return new UnitsOfTimeCode().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsOfTimeCode | PlainMessage<UnitsOfTimeCode> | undefined, b: UnitsOfTimeCode | PlainMessage<UnitsOfTimeCode> | undefined): boolean {
    return proto3.util.equals(UnitsOfTimeCode, a, b);
  }
}

/**
 * Primitive value for code
 *
 * @generated from enum google.fhir.stu3.proto.UnitsOfTimeCode.Value
 */
export enum UnitsOfTimeCode_Value {
  /**
   * @generated from enum value: INVALID_UNINITIALIZED = 0;
   */
  INVALID_UNINITIALIZED = 0,

  /**
   * @generated from enum value: S = 1;
   */
  S = 1,

  /**
   * @generated from enum value: MIN = 2;
   */
  MIN = 2,

  /**
   * @generated from enum value: H = 3;
   */
  H = 3,

  /**
   * @generated from enum value: D = 4;
   */
  D = 4,

  /**
   * @generated from enum value: WK = 5;
   */
  WK = 5,

  /**
   * @generated from enum value: MO = 6;
   */
  MO = 6,

  /**
   * @generated from enum value: A = 7;
   */
  A = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(UnitsOfTimeCode_Value)
proto3.util.setEnumType(UnitsOfTimeCode_Value, "google.fhir.stu3.proto.UnitsOfTimeCode.Value", [
  { no: 0, name: "INVALID_UNINITIALIZED" },
  { no: 1, name: "S" },
  { no: 2, name: "MIN" },
  { no: 3, name: "H" },
  { no: 4, name: "D" },
  { no: 5, name: "WK" },
  { no: 6, name: "MO" },
  { no: 7, name: "A" },
]);

