//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/stu3/extensions.proto (package google.fhir.stu3.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Address, Age, Annotation, Attachment, Boolean, Code, CodeableConcept, Coding, Date, DateTime, Decimal, Distance, Duration, Extension, Id, Identifier, Instant, Integer, LanguageCode, Markdown, MimeTypeCode, Period, PositiveInt, Quantity, Ratio, Reference, String, Time, Timing, Uri } from "./datatypes_pb.js";
import { AllergyIntoleranceCertaintyCode, ChoiceListOrientationCode, ClassificationOrContextCode, ConceptMapEquivalenceCode, ConformanceExpectationCode, DataAbsentReasonCode, DataTypeCode, EntityNamePartQualifierCode, GoalAcceptanceStatusCode, HL7WorkgroupCode, HumanNameAssemblyOrderCode, ImplantStatusCode, MatchGradeCode, MessageHeaderResponseRequestCode, NameRepresentationUseCode, NullFlavorCode, PostalAddressUseTypeCode, ProbabilityDistributionTypeCode, QuestionnaireItemUsageModeCode, ResourceTypeCode, TemplateStatusCodeCode } from "./codes_pb.js";

/**
 * Auto-generated from StructureDefinition for administrative-status.
 * Status of internal processing.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-administrative-status
 *
 * @generated from message google.fhir.stu3.proto.DataElementAdministrativeStatus
 */
export class DataElementAdministrativeStatus extends Message<DataElementAdministrativeStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<DataElementAdministrativeStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementAdministrativeStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementAdministrativeStatus {
    return new DataElementAdministrativeStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementAdministrativeStatus {
    return new DataElementAdministrativeStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementAdministrativeStatus {
    return new DataElementAdministrativeStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementAdministrativeStatus | PlainMessage<DataElementAdministrativeStatus> | undefined, b: DataElementAdministrativeStatus | PlainMessage<DataElementAdministrativeStatus> | undefined): boolean {
    return proto3.util.equals(DataElementAdministrativeStatus, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for change-description.
 * What's changed since the last "business" version?.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-change-description
 *
 * @generated from message google.fhir.stu3.proto.DataElementChangeDescription
 */
export class DataElementChangeDescription extends Message<DataElementChangeDescription> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<DataElementChangeDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementChangeDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementChangeDescription {
    return new DataElementChangeDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementChangeDescription {
    return new DataElementChangeDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementChangeDescription {
    return new DataElementChangeDescription().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementChangeDescription | PlainMessage<DataElementChangeDescription> | undefined, b: DataElementChangeDescription | PlainMessage<DataElementChangeDescription> | undefined): boolean {
    return proto3.util.equals(DataElementChangeDescription, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for classification-or-context.
 * context | classification.
 * See
 * http://hl7.org/fhir/StructureDefinition/11179-de-classification-or-context
 *
 * @generated from message google.fhir.stu3.proto.DataElementClassificationOrContext
 */
export class DataElementClassificationOrContext extends Message<DataElementClassificationOrContext> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ClassificationOrContextCode value_code = 3;
   */
  valueCode?: ClassificationOrContextCode;

  constructor(data?: PartialMessage<DataElementClassificationOrContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementClassificationOrContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ClassificationOrContextCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementClassificationOrContext {
    return new DataElementClassificationOrContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementClassificationOrContext {
    return new DataElementClassificationOrContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementClassificationOrContext {
    return new DataElementClassificationOrContext().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementClassificationOrContext | PlainMessage<DataElementClassificationOrContext> | undefined, b: DataElementClassificationOrContext | PlainMessage<DataElementClassificationOrContext> | undefined): boolean {
    return proto3.util.equals(DataElementClassificationOrContext, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for contact-address.
 * How to mail contact.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-contact-address
 *
 * @generated from message google.fhir.stu3.proto.DataElementContactAddress
 */
export class DataElementContactAddress extends Message<DataElementContactAddress> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Address value_address = 3;
   */
  valueAddress?: Address;

  constructor(data?: PartialMessage<DataElementContactAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementContactAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_address", kind: "message", T: Address },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementContactAddress {
    return new DataElementContactAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementContactAddress {
    return new DataElementContactAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementContactAddress {
    return new DataElementContactAddress().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementContactAddress | PlainMessage<DataElementContactAddress> | undefined, b: DataElementContactAddress | PlainMessage<DataElementContactAddress> | undefined): boolean {
    return proto3.util.equals(DataElementContactAddress, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for document-reference.
 * Pointer to document related to data element.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-document-reference
 *
 * @generated from message google.fhir.stu3.proto.DataElementDocumentReference
 */
export class DataElementDocumentReference extends Message<DataElementDocumentReference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DataElementDocumentReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementDocumentReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementDocumentReference {
    return new DataElementDocumentReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementDocumentReference {
    return new DataElementDocumentReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementDocumentReference {
    return new DataElementDocumentReference().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementDocumentReference | PlainMessage<DataElementDocumentReference> | undefined, b: DataElementDocumentReference | PlainMessage<DataElementDocumentReference> | undefined): boolean {
    return proto3.util.equals(DataElementDocumentReference, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for effective-period.
 * When data element is "valid".
 * See http://hl7.org/fhir/StructureDefinition/11179-de-effective-period
 *
 * @generated from message google.fhir.stu3.proto.DataElementEffectivePeriod
 */
export class DataElementEffectivePeriod extends Message<DataElementEffectivePeriod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Period value_period = 3;
   */
  valuePeriod?: Period;

  constructor(data?: PartialMessage<DataElementEffectivePeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementEffectivePeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementEffectivePeriod {
    return new DataElementEffectivePeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementEffectivePeriod {
    return new DataElementEffectivePeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementEffectivePeriod {
    return new DataElementEffectivePeriod().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementEffectivePeriod | PlainMessage<DataElementEffectivePeriod> | undefined, b: DataElementEffectivePeriod | PlainMessage<DataElementEffectivePeriod> | undefined): boolean {
    return proto3.util.equals(DataElementEffectivePeriod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for is-data-element-concept.
 * Is code the DEC for the data element?.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-is-data-element-concept
 *
 * @generated from message google.fhir.stu3.proto.DataElementIsDataElementConcept
 */
export class DataElementIsDataElementConcept extends Message<DataElementIsDataElementConcept> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<DataElementIsDataElementConcept>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementIsDataElementConcept";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementIsDataElementConcept {
    return new DataElementIsDataElementConcept().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementIsDataElementConcept {
    return new DataElementIsDataElementConcept().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementIsDataElementConcept {
    return new DataElementIsDataElementConcept().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementIsDataElementConcept | PlainMessage<DataElementIsDataElementConcept> | undefined, b: DataElementIsDataElementConcept | PlainMessage<DataElementIsDataElementConcept> | undefined): boolean {
    return proto3.util.equals(DataElementIsDataElementConcept, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for registry-org.
 * Organization responsible for registry.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-registry-org
 *
 * @generated from message google.fhir.stu3.proto.DataElementRegistryOrg
 */
export class DataElementRegistryOrg extends Message<DataElementRegistryOrg> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DataElementRegistryOrg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementRegistryOrg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementRegistryOrg {
    return new DataElementRegistryOrg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementRegistryOrg {
    return new DataElementRegistryOrg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementRegistryOrg {
    return new DataElementRegistryOrg().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementRegistryOrg | PlainMessage<DataElementRegistryOrg> | undefined, b: DataElementRegistryOrg | PlainMessage<DataElementRegistryOrg> | undefined): boolean {
    return proto3.util.equals(DataElementRegistryOrg, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for submitter-org.
 * Who submitted data element to registry.
 * See http://hl7.org/fhir/StructureDefinition/11179-de-submitter-org
 *
 * @generated from message google.fhir.stu3.proto.DataElementSubmitterOrg
 */
export class DataElementSubmitterOrg extends Message<DataElementSubmitterOrg> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DataElementSubmitterOrg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementSubmitterOrg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementSubmitterOrg {
    return new DataElementSubmitterOrg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementSubmitterOrg {
    return new DataElementSubmitterOrg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementSubmitterOrg {
    return new DataElementSubmitterOrg().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementSubmitterOrg | PlainMessage<DataElementSubmitterOrg> | undefined, b: DataElementSubmitterOrg | PlainMessage<DataElementSubmitterOrg> | undefined): boolean {
    return proto3.util.equals(DataElementSubmitterOrg, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for objectClass.
 * Object Class.
 * See http://hl7.org/fhir/StructureDefinition/11179-objectClass
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionObjectClass
 */
export class ElementDefinitionObjectClass extends Message<ElementDefinitionObjectClass> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<ElementDefinitionObjectClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionObjectClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionObjectClass {
    return new ElementDefinitionObjectClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionObjectClass {
    return new ElementDefinitionObjectClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionObjectClass {
    return new ElementDefinitionObjectClass().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionObjectClass | PlainMessage<ElementDefinitionObjectClass> | undefined, b: ElementDefinitionObjectClass | PlainMessage<ElementDefinitionObjectClass> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionObjectClass, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for objectClassProperty.
 * Object Class Property.
 * See http://hl7.org/fhir/StructureDefinition/11179-objectClassProperty
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionObjectClassProperty
 */
export class ElementDefinitionObjectClassProperty extends Message<ElementDefinitionObjectClassProperty> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<ElementDefinitionObjectClassProperty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionObjectClassProperty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionObjectClassProperty {
    return new ElementDefinitionObjectClassProperty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionObjectClassProperty {
    return new ElementDefinitionObjectClassProperty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionObjectClassProperty {
    return new ElementDefinitionObjectClassProperty().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionObjectClassProperty | PlainMessage<ElementDefinitionObjectClassProperty> | undefined, b: ElementDefinitionObjectClassProperty | PlainMessage<ElementDefinitionObjectClassProperty> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionObjectClassProperty, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for permitted-value-conceptmap.
 * Mapping from permitted to transmitted.
 * See http://hl7.org/fhir/StructureDefinition/11179-permitted-value-conceptmap
 *
 * @generated from message google.fhir.stu3.proto.PermittedValueConceptmap
 */
export class PermittedValueConceptmap extends Message<PermittedValueConceptmap> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<PermittedValueConceptmap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PermittedValueConceptmap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermittedValueConceptmap {
    return new PermittedValueConceptmap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermittedValueConceptmap {
    return new PermittedValueConceptmap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermittedValueConceptmap {
    return new PermittedValueConceptmap().fromJsonString(jsonString, options);
  }

  static equals(a: PermittedValueConceptmap | PlainMessage<PermittedValueConceptmap> | undefined, b: PermittedValueConceptmap | PlainMessage<PermittedValueConceptmap> | undefined): boolean {
    return proto3.util.equals(PermittedValueConceptmap, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for permitted-value-valueset.
 * Permitted values.
 * See http://hl7.org/fhir/StructureDefinition/11179-permitted-value-valueset
 *
 * @generated from message google.fhir.stu3.proto.PermittedValueValueset
 */
export class PermittedValueValueset extends Message<PermittedValueValueset> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<PermittedValueValueset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PermittedValueValueset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermittedValueValueset {
    return new PermittedValueValueset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermittedValueValueset {
    return new PermittedValueValueset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermittedValueValueset {
    return new PermittedValueValueset().fromJsonString(jsonString, options);
  }

  static equals(a: PermittedValueValueset | PlainMessage<PermittedValueValueset> | undefined, b: PermittedValueValueset | PlainMessage<PermittedValueValueset> | undefined): boolean {
    return proto3.util.equals(PermittedValueValueset, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for certainty.
 * Certainty that the substance was the cause of the manifestation.
 * See http://hl7.org/fhir/StructureDefinition/allergyintolerance-certainty
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceCertainty
 */
export class AllergyIntoleranceCertainty extends Message<AllergyIntoleranceCertainty> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.AllergyIntoleranceCertaintyCode value_code = 3;
   */
  valueCode?: AllergyIntoleranceCertaintyCode;

  constructor(data?: PartialMessage<AllergyIntoleranceCertainty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceCertainty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: AllergyIntoleranceCertaintyCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceCertainty {
    return new AllergyIntoleranceCertainty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceCertainty {
    return new AllergyIntoleranceCertainty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceCertainty {
    return new AllergyIntoleranceCertainty().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceCertainty | PlainMessage<AllergyIntoleranceCertainty> | undefined, b: AllergyIntoleranceCertainty | PlainMessage<AllergyIntoleranceCertainty> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceCertainty, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for duration.
 * How long Manifestations persisted.
 * See http://hl7.org/fhir/StructureDefinition/allergyintolerance-duration
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceDuration
 */
export class AllergyIntoleranceDuration extends Message<AllergyIntoleranceDuration> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Duration value_duration = 3;
   */
  valueDuration?: Duration;

  constructor(data?: PartialMessage<AllergyIntoleranceDuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceDuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceDuration {
    return new AllergyIntoleranceDuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceDuration {
    return new AllergyIntoleranceDuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceDuration {
    return new AllergyIntoleranceDuration().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceDuration | PlainMessage<AllergyIntoleranceDuration> | undefined, b: AllergyIntoleranceDuration | PlainMessage<AllergyIntoleranceDuration> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceDuration, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRefuted.
 * Explanation associated with refuted status.
 * See http://hl7.org/fhir/StructureDefinition/allergyintolerance-reasonRefuted
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted
 */
export class AllergyIntoleranceReasonRefuted extends Message<AllergyIntoleranceReasonRefuted> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<AllergyIntoleranceReasonRefuted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceReasonRefuted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceReasonRefuted {
    return new AllergyIntoleranceReasonRefuted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceReasonRefuted {
    return new AllergyIntoleranceReasonRefuted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceReasonRefuted {
    return new AllergyIntoleranceReasonRefuted().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceReasonRefuted | PlainMessage<AllergyIntoleranceReasonRefuted> | undefined, b: AllergyIntoleranceReasonRefuted | PlainMessage<AllergyIntoleranceReasonRefuted> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceReasonRefuted, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for resolutionAge.
 * Age that the allergy or intolerance resolved.
 * See http://hl7.org/fhir/StructureDefinition/allergyintolerance-resolutionAge
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceResolutionAge
 */
export class AllergyIntoleranceResolutionAge extends Message<AllergyIntoleranceResolutionAge> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Age value_age = 3;
   */
  valueAge?: Age;

  constructor(data?: PartialMessage<AllergyIntoleranceResolutionAge>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceResolutionAge";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_age", kind: "message", T: Age },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceResolutionAge {
    return new AllergyIntoleranceResolutionAge().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceResolutionAge {
    return new AllergyIntoleranceResolutionAge().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceResolutionAge {
    return new AllergyIntoleranceResolutionAge().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceResolutionAge | PlainMessage<AllergyIntoleranceResolutionAge> | undefined, b: AllergyIntoleranceResolutionAge | PlainMessage<AllergyIntoleranceResolutionAge> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceResolutionAge, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for substanceExposureRisk.
 * Exposure risk of adverse reaction (allergy or intolerance) to the specified
 * substance/product. See
 * http://hl7.org/fhir/StructureDefinition/allergyintolerance-substanceExposureRisk
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk
 */
export class AllergyIntoleranceSubstanceExposureRisk extends Message<AllergyIntoleranceSubstanceExposureRisk> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Substance (or pharmaceutical product)
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept substance = 4;
   */
  substance?: CodeableConcept;

  /**
   * known-reaction-risk | no-known-reaction-risk
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept exposure_risk = 5;
   */
  exposureRisk?: CodeableConcept;

  constructor(data?: PartialMessage<AllergyIntoleranceSubstanceExposureRisk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceSubstanceExposureRisk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "substance", kind: "message", T: CodeableConcept },
    { no: 5, name: "exposure_risk", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceSubstanceExposureRisk {
    return new AllergyIntoleranceSubstanceExposureRisk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceSubstanceExposureRisk {
    return new AllergyIntoleranceSubstanceExposureRisk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceSubstanceExposureRisk {
    return new AllergyIntoleranceSubstanceExposureRisk().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceSubstanceExposureRisk | PlainMessage<AllergyIntoleranceSubstanceExposureRisk> | undefined, b: AllergyIntoleranceSubstanceExposureRisk | PlainMessage<AllergyIntoleranceSubstanceExposureRisk> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceSubstanceExposureRisk, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Accession.
 * Accession Number.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-Accession
 *
 * @generated from message google.fhir.stu3.proto.AuditEventAccession
 */
export class AuditEventAccession extends Message<AuditEventAccession> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<AuditEventAccession>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventAccession";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventAccession {
    return new AuditEventAccession().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventAccession {
    return new AuditEventAccession().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventAccession {
    return new AuditEventAccession().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventAccession | PlainMessage<AuditEventAccession> | undefined, b: AuditEventAccession | PlainMessage<AuditEventAccession> | undefined): boolean {
    return proto3.util.equals(AuditEventAccession, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Anonymized.
 * Anonymized state.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-Anonymized
 *
 * @generated from message google.fhir.stu3.proto.AuditEventAnonymized
 */
export class AuditEventAnonymized extends Message<AuditEventAnonymized> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<AuditEventAnonymized>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventAnonymized";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventAnonymized {
    return new AuditEventAnonymized().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventAnonymized {
    return new AuditEventAnonymized().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventAnonymized {
    return new AuditEventAnonymized().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventAnonymized | PlainMessage<AuditEventAnonymized> | undefined, b: AuditEventAnonymized | PlainMessage<AuditEventAnonymized> | undefined): boolean {
    return proto3.util.equals(AuditEventAnonymized, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Encrypted.
 * Encrypted state.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-Encrypted
 *
 * @generated from message google.fhir.stu3.proto.AuditEventEncrypted
 */
export class AuditEventEncrypted extends Message<AuditEventEncrypted> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<AuditEventEncrypted>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventEncrypted";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventEncrypted {
    return new AuditEventEncrypted().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventEncrypted {
    return new AuditEventEncrypted().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventEncrypted {
    return new AuditEventEncrypted().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventEncrypted | PlainMessage<AuditEventEncrypted> | undefined, b: AuditEventEncrypted | PlainMessage<AuditEventEncrypted> | undefined): boolean {
    return proto3.util.equals(AuditEventEncrypted, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Instance.
 * SOP Instance UID value.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-Instance
 *
 * @generated from message google.fhir.stu3.proto.AuditEventInstance
 */
export class AuditEventInstance extends Message<AuditEventInstance> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<AuditEventInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventInstance {
    return new AuditEventInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventInstance {
    return new AuditEventInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventInstance {
    return new AuditEventInstance().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventInstance | PlainMessage<AuditEventInstance> | undefined, b: AuditEventInstance | PlainMessage<AuditEventInstance> | undefined): boolean {
    return proto3.util.equals(AuditEventInstance, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for MPPS.
 * MPPS instance UID.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-MPPS
 *
 * @generated from message google.fhir.stu3.proto.AuditEventMPPS
 */
export class AuditEventMPPS extends Message<AuditEventMPPS> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<AuditEventMPPS>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventMPPS";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventMPPS {
    return new AuditEventMPPS().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventMPPS {
    return new AuditEventMPPS().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventMPPS {
    return new AuditEventMPPS().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventMPPS | PlainMessage<AuditEventMPPS> | undefined, b: AuditEventMPPS | PlainMessage<AuditEventMPPS> | undefined): boolean {
    return proto3.util.equals(AuditEventMPPS, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for NumberOfInstances.
 * Number of SOP Instances referred to by this entity.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-NumberOfInstances
 *
 * @generated from message google.fhir.stu3.proto.AuditEventNumberOfInstances
 */
export class AuditEventNumberOfInstances extends Message<AuditEventNumberOfInstances> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<AuditEventNumberOfInstances>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventNumberOfInstances";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventNumberOfInstances {
    return new AuditEventNumberOfInstances().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventNumberOfInstances {
    return new AuditEventNumberOfInstances().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventNumberOfInstances {
    return new AuditEventNumberOfInstances().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventNumberOfInstances | PlainMessage<AuditEventNumberOfInstances> | undefined, b: AuditEventNumberOfInstances | PlainMessage<AuditEventNumberOfInstances> | undefined): boolean {
    return proto3.util.equals(AuditEventNumberOfInstances, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ParticipantObjectContainsStudy.
 * Contains Study.
 * See
 * http://hl7.org/fhir/StructureDefinition/auditevent-ParticipantObjectContainsStudy
 *
 * @generated from message google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy
 */
export class AuditEventParticipantObjectContainsStudy extends Message<AuditEventParticipantObjectContainsStudy> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<AuditEventParticipantObjectContainsStudy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventParticipantObjectContainsStudy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventParticipantObjectContainsStudy {
    return new AuditEventParticipantObjectContainsStudy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventParticipantObjectContainsStudy {
    return new AuditEventParticipantObjectContainsStudy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventParticipantObjectContainsStudy {
    return new AuditEventParticipantObjectContainsStudy().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventParticipantObjectContainsStudy | PlainMessage<AuditEventParticipantObjectContainsStudy> | undefined, b: AuditEventParticipantObjectContainsStudy | PlainMessage<AuditEventParticipantObjectContainsStudy> | undefined): boolean {
    return proto3.util.equals(AuditEventParticipantObjectContainsStudy, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for SOPClass.
 * UIDs of SOP classes referred to.
 * See http://hl7.org/fhir/StructureDefinition/auditevent-SOPClass
 *
 * @generated from message google.fhir.stu3.proto.AuditEventSOPClass
 */
export class AuditEventSOPClass extends Message<AuditEventSOPClass> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<AuditEventSOPClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AuditEventSOPClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuditEventSOPClass {
    return new AuditEventSOPClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuditEventSOPClass {
    return new AuditEventSOPClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuditEventSOPClass {
    return new AuditEventSOPClass().fromJsonString(jsonString, options);
  }

  static equals(a: AuditEventSOPClass | PlainMessage<AuditEventSOPClass> | undefined, b: AuditEventSOPClass | PlainMessage<AuditEventSOPClass> | undefined): boolean {
    return proto3.util.equals(AuditEventSOPClass, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Birth Place.
 * Place of Birth for patient.
 * See http://hl7.org/fhir/StructureDefinition/birthPlace
 *
 * @generated from message google.fhir.stu3.proto.PatientBirthPlace
 */
export class PatientBirthPlace extends Message<PatientBirthPlace> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Address value_address = 3;
   */
  valueAddress?: Address;

  constructor(data?: PartialMessage<PatientBirthPlace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientBirthPlace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_address", kind: "message", T: Address },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientBirthPlace {
    return new PatientBirthPlace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientBirthPlace {
    return new PatientBirthPlace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientBirthPlace {
    return new PatientBirthPlace().fromJsonString(jsonString, options);
  }

  static equals(a: PatientBirthPlace | PlainMessage<PatientBirthPlace> | undefined, b: PatientBirthPlace | PlainMessage<PatientBirthPlace> | undefined): boolean {
    return proto3.util.equals(PatientBirthPlace, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Body Site Instance.
 * Target anatomic location or structure.
 * See http://hl7.org/fhir/StructureDefinition/body-site-instance
 *
 * @generated from message google.fhir.stu3.proto.BodySiteInstance
 */
export class BodySiteInstance extends Message<BodySiteInstance> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<BodySiteInstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BodySiteInstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BodySiteInstance {
    return new BodySiteInstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BodySiteInstance {
    return new BodySiteInstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BodySiteInstance {
    return new BodySiteInstance().fromJsonString(jsonString, options);
  }

  static equals(a: BodySiteInstance | PlainMessage<BodySiteInstance> | undefined, b: BodySiteInstance | PlainMessage<BodySiteInstance> | undefined): boolean {
    return proto3.util.equals(BodySiteInstance, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for expectation.
 * SHALL | SHOULD | MAY |SHOULD-NOT.
 * See http://hl7.org/fhir/StructureDefinition/capabilitystatement-expectation
 *
 * @generated from message google.fhir.stu3.proto.CapabilityStatementExpectation
 */
export class CapabilityStatementExpectation extends Message<CapabilityStatementExpectation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ConformanceExpectationCode value_code = 3;
   */
  valueCode?: ConformanceExpectationCode;

  constructor(data?: PartialMessage<CapabilityStatementExpectation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CapabilityStatementExpectation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ConformanceExpectationCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityStatementExpectation {
    return new CapabilityStatementExpectation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityStatementExpectation {
    return new CapabilityStatementExpectation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityStatementExpectation {
    return new CapabilityStatementExpectation().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityStatementExpectation | PlainMessage<CapabilityStatementExpectation> | undefined, b: CapabilityStatementExpectation | PlainMessage<CapabilityStatementExpectation> | undefined): boolean {
    return proto3.util.equals(CapabilityStatementExpectation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for prohibited.
 * Functionality not allowed.
 * See http://hl7.org/fhir/StructureDefinition/capabilitystatement-prohibited
 *
 * @generated from message google.fhir.stu3.proto.CapabilityStatementProhibited
 */
export class CapabilityStatementProhibited extends Message<CapabilityStatementProhibited> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<CapabilityStatementProhibited>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CapabilityStatementProhibited";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityStatementProhibited {
    return new CapabilityStatementProhibited().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityStatementProhibited {
    return new CapabilityStatementProhibited().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityStatementProhibited {
    return new CapabilityStatementProhibited().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityStatementProhibited | PlainMessage<CapabilityStatementProhibited> | undefined, b: CapabilityStatementProhibited | PlainMessage<CapabilityStatementProhibited> | undefined): boolean {
    return proto3.util.equals(CapabilityStatementProhibited, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for search-parameter-combination.
 * An allowable parameter combination.
 * See
 * http://hl7.org/fhir/StructureDefinition/capabilitystatement-search-parameter-combination
 *
 * @generated from message google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination
 */
export class CapabilityStatementSearchParameterCombination extends Message<CapabilityStatementSearchParameterCombination> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * A required search parameter name
   *
   * @generated from field: repeated google.fhir.stu3.proto.String required = 4;
   */
  required: String[] = [];

  /**
   * An optional search parameter name
   *
   * @generated from field: repeated google.fhir.stu3.proto.String optional = 5;
   */
  optional: String[] = [];

  constructor(data?: PartialMessage<CapabilityStatementSearchParameterCombination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CapabilityStatementSearchParameterCombination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "required", kind: "message", T: String, repeated: true },
    { no: 5, name: "optional", kind: "message", T: String, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityStatementSearchParameterCombination {
    return new CapabilityStatementSearchParameterCombination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityStatementSearchParameterCombination {
    return new CapabilityStatementSearchParameterCombination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityStatementSearchParameterCombination {
    return new CapabilityStatementSearchParameterCombination().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityStatementSearchParameterCombination | PlainMessage<CapabilityStatementSearchParameterCombination> | undefined, b: CapabilityStatementSearchParameterCombination | PlainMessage<CapabilityStatementSearchParameterCombination> | undefined): boolean {
    return proto3.util.equals(CapabilityStatementSearchParameterCombination, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for supported-system.
 * Code system not defined in a value set.
 * See
 * http://hl7.org/fhir/StructureDefinition/capabilitystatement-supported-system
 *
 * @generated from message google.fhir.stu3.proto.CapabilityStatementSupportedSystem
 */
export class CapabilityStatementSupportedSystem extends Message<CapabilityStatementSupportedSystem> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<CapabilityStatementSupportedSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CapabilityStatementSupportedSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityStatementSupportedSystem {
    return new CapabilityStatementSupportedSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityStatementSupportedSystem {
    return new CapabilityStatementSupportedSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityStatementSupportedSystem {
    return new CapabilityStatementSupportedSystem().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityStatementSupportedSystem | PlainMessage<CapabilityStatementSupportedSystem> | undefined, b: CapabilityStatementSupportedSystem | PlainMessage<CapabilityStatementSupportedSystem> | undefined): boolean {
    return proto3.util.equals(CapabilityStatementSupportedSystem, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for websocket.
 * Where server websocket end point is found.
 * See http://hl7.org/fhir/StructureDefinition/capabilitystatement-websocket
 *
 * @generated from message google.fhir.stu3.proto.CapabilityStatementWebsocket
 */
export class CapabilityStatementWebsocket extends Message<CapabilityStatementWebsocket> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<CapabilityStatementWebsocket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CapabilityStatementWebsocket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CapabilityStatementWebsocket {
    return new CapabilityStatementWebsocket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CapabilityStatementWebsocket {
    return new CapabilityStatementWebsocket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CapabilityStatementWebsocket {
    return new CapabilityStatementWebsocket().fromJsonString(jsonString, options);
  }

  static equals(a: CapabilityStatementWebsocket | PlainMessage<CapabilityStatementWebsocket> | undefined, b: CapabilityStatementWebsocket | PlainMessage<CapabilityStatementWebsocket> | undefined): boolean {
    return proto3.util.equals(CapabilityStatementWebsocket, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for activity-title.
 * Label for activity.
 * See http://hl7.org/fhir/StructureDefinition/careplan-activity-title
 *
 * @generated from message google.fhir.stu3.proto.CarePlanActivityTitle
 */
export class CarePlanActivityTitle extends Message<CarePlanActivityTitle> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CarePlanActivityTitle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CarePlanActivityTitle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CarePlanActivityTitle {
    return new CarePlanActivityTitle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CarePlanActivityTitle {
    return new CarePlanActivityTitle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CarePlanActivityTitle {
    return new CarePlanActivityTitle().fromJsonString(jsonString, options);
  }

  static equals(a: CarePlanActivityTitle | PlainMessage<CarePlanActivityTitle> | undefined, b: CarePlanActivityTitle | PlainMessage<CarePlanActivityTitle> | undefined): boolean {
    return proto3.util.equals(CarePlanActivityTitle, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for author.
 * User or Org actually involved in creating the value set content.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-author
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemAuthor
 */
export class CodeSystemAuthor extends Message<CodeSystemAuthor> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CodeSystemAuthor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemAuthor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemAuthor {
    return new CodeSystemAuthor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemAuthor {
    return new CodeSystemAuthor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemAuthor {
    return new CodeSystemAuthor().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemAuthor | PlainMessage<CodeSystemAuthor> | undefined, b: CodeSystemAuthor | PlainMessage<CodeSystemAuthor> | undefined): boolean {
    return proto3.util.equals(CodeSystemAuthor, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for comment.
 * Human-specified notes and other documentation.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-comment
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemComment
 */
export class CodeSystemComment extends Message<CodeSystemComment> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Remarks or other text
   *
   * @generated from field: google.fhir.stu3.proto.String content = 4;
   */
  content?: String;

  /**
   * When the comment was created
   *
   * @generated from field: google.fhir.stu3.proto.Instant timestamp = 5;
   */
  timestamp?: Instant;

  constructor(data?: PartialMessage<CodeSystemComment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemComment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "content", kind: "message", T: String },
    { no: 5, name: "timestamp", kind: "message", T: Instant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemComment {
    return new CodeSystemComment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemComment {
    return new CodeSystemComment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemComment {
    return new CodeSystemComment().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemComment | PlainMessage<CodeSystemComment> | undefined, b: CodeSystemComment | PlainMessage<CodeSystemComment> | undefined): boolean {
    return proto3.util.equals(CodeSystemComment, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for comments.
 * Comment about the use of this code in this context.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-comments
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemComments
 */
export class CodeSystemComments extends Message<CodeSystemComments> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CodeSystemComments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemComments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemComments {
    return new CodeSystemComments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemComments {
    return new CodeSystemComments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemComments {
    return new CodeSystemComments().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemComments | PlainMessage<CodeSystemComments> | undefined, b: CodeSystemComments | PlainMessage<CodeSystemComments> | undefined): boolean {
    return proto3.util.equals(CodeSystemComments, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for conceptOrder.
 * Appearance order for user selection.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-conceptOrder
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemConceptOrder
 */
export class CodeSystemConceptOrder extends Message<CodeSystemConceptOrder> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<CodeSystemConceptOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemConceptOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemConceptOrder {
    return new CodeSystemConceptOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemConceptOrder {
    return new CodeSystemConceptOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemConceptOrder {
    return new CodeSystemConceptOrder().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemConceptOrder | PlainMessage<CodeSystemConceptOrder> | undefined, b: CodeSystemConceptOrder | PlainMessage<CodeSystemConceptOrder> | undefined): boolean {
    return proto3.util.equals(CodeSystemConceptOrder, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for deprecated.
 * Whether the concept has been deprecated.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-deprecated
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemDeprecated
 */
export class CodeSystemDeprecated extends Message<CodeSystemDeprecated> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<CodeSystemDeprecated>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemDeprecated";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemDeprecated {
    return new CodeSystemDeprecated().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemDeprecated {
    return new CodeSystemDeprecated().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemDeprecated {
    return new CodeSystemDeprecated().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemDeprecated | PlainMessage<CodeSystemDeprecated> | undefined, b: CodeSystemDeprecated | PlainMessage<CodeSystemDeprecated> | undefined): boolean {
    return proto3.util.equals(CodeSystemDeprecated, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for effectiveDate.
 * When the value set version becomes Active and is available for use.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-effectiveDate
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemEffectiveDate
 */
export class CodeSystemEffectiveDate extends Message<CodeSystemEffectiveDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Date value_date = 3;
   */
  valueDate?: Date;

  constructor(data?: PartialMessage<CodeSystemEffectiveDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemEffectiveDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemEffectiveDate {
    return new CodeSystemEffectiveDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemEffectiveDate {
    return new CodeSystemEffectiveDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemEffectiveDate {
    return new CodeSystemEffectiveDate().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemEffectiveDate | PlainMessage<CodeSystemEffectiveDate> | undefined, b: CodeSystemEffectiveDate | PlainMessage<CodeSystemEffectiveDate> | undefined): boolean {
    return proto3.util.equals(CodeSystemEffectiveDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for expirationDate.
 * When the value set version should no longer be used.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-expirationDate
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemExpirationDate
 */
export class CodeSystemExpirationDate extends Message<CodeSystemExpirationDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Date value_date = 3;
   */
  valueDate?: Date;

  constructor(data?: PartialMessage<CodeSystemExpirationDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemExpirationDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemExpirationDate {
    return new CodeSystemExpirationDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemExpirationDate {
    return new CodeSystemExpirationDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemExpirationDate {
    return new CodeSystemExpirationDate().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemExpirationDate | PlainMessage<CodeSystemExpirationDate> | undefined, b: CodeSystemExpirationDate | PlainMessage<CodeSystemExpirationDate> | undefined): boolean {
    return proto3.util.equals(CodeSystemExpirationDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for history.
 * What has happened over time.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-history
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemHistory
 */
export class CodeSystemHistory extends Message<CodeSystemHistory> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * The name of this set of history entries
   *
   * @generated from field: google.fhir.stu3.proto.String name = 4;
   */
  name?: String;

  /**
   * @generated from field: repeated google.fhir.stu3.proto.CodeSystemHistory.Revision revision = 5;
   */
  revision: CodeSystemHistory_Revision[] = [];

  constructor(data?: PartialMessage<CodeSystemHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "revision", kind: "message", T: CodeSystemHistory_Revision, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemHistory {
    return new CodeSystemHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemHistory {
    return new CodeSystemHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemHistory {
    return new CodeSystemHistory().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemHistory | PlainMessage<CodeSystemHistory> | undefined, b: CodeSystemHistory | PlainMessage<CodeSystemHistory> | undefined): boolean {
    return proto3.util.equals(CodeSystemHistory, a, b);
  }
}

/**
 * Audit of all changes for a history entry
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemHistory.Revision
 */
export class CodeSystemHistory_Revision extends Message<CodeSystemHistory_Revision> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Date the change was made
   *
   * @generated from field: google.fhir.stu3.proto.DateTime date = 4;
   */
  date?: DateTime;

  /**
   * Version marker after the change was made
   *
   * @generated from field: google.fhir.stu3.proto.String id_slice = 5;
   */
  idSlice?: String;

  /**
   * Who made the change
   *
   * @generated from field: google.fhir.stu3.proto.String author = 6;
   */
  author?: String;

  /**
   * Information about the change
   *
   * @generated from field: google.fhir.stu3.proto.String notes = 7;
   */
  notes?: String;

  constructor(data?: PartialMessage<CodeSystemHistory_Revision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemHistory.Revision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 4, name: "date", kind: "message", T: DateTime },
    { no: 5, name: "id_slice", kind: "message", T: String },
    { no: 6, name: "author", kind: "message", T: String },
    { no: 7, name: "notes", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemHistory_Revision {
    return new CodeSystemHistory_Revision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemHistory_Revision {
    return new CodeSystemHistory_Revision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemHistory_Revision {
    return new CodeSystemHistory_Revision().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemHistory_Revision | PlainMessage<CodeSystemHistory_Revision> | undefined, b: CodeSystemHistory_Revision | PlainMessage<CodeSystemHistory_Revision> | undefined): boolean {
    return proto3.util.equals(CodeSystemHistory_Revision, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for keyWord.
 * Descriptors and key terms for search.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-keyWord
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemKeyWord
 */
export class CodeSystemKeyWord extends Message<CodeSystemKeyWord> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CodeSystemKeyWord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemKeyWord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemKeyWord {
    return new CodeSystemKeyWord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemKeyWord {
    return new CodeSystemKeyWord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemKeyWord {
    return new CodeSystemKeyWord().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemKeyWord | PlainMessage<CodeSystemKeyWord> | undefined, b: CodeSystemKeyWord | PlainMessage<CodeSystemKeyWord> | undefined): boolean {
    return proto3.util.equals(CodeSystemKeyWord, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for label.
 * E.g. "(a)", "1.", etc.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-label
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemLabel
 */
export class CodeSystemLabel extends Message<CodeSystemLabel> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CodeSystemLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemLabel {
    return new CodeSystemLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemLabel {
    return new CodeSystemLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemLabel {
    return new CodeSystemLabel().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemLabel | PlainMessage<CodeSystemLabel> | undefined, b: CodeSystemLabel | PlainMessage<CodeSystemLabel> | undefined): boolean {
    return proto3.util.equals(CodeSystemLabel, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for map.
 * A concept map relevant to interpret this value set.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-map
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemMap
 */
export class CodeSystemMap extends Message<CodeSystemMap> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<CodeSystemMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemMap {
    return new CodeSystemMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemMap {
    return new CodeSystemMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemMap {
    return new CodeSystemMap().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemMap | PlainMessage<CodeSystemMap> | undefined, b: CodeSystemMap | PlainMessage<CodeSystemMap> | undefined): boolean {
    return proto3.util.equals(CodeSystemMap, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ordinalValue.
 * Comparison value for ordinal codes.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-ordinalValue
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemOrdinalValue
 */
export class CodeSystemOrdinalValue extends Message<CodeSystemOrdinalValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<CodeSystemOrdinalValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemOrdinalValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemOrdinalValue {
    return new CodeSystemOrdinalValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemOrdinalValue {
    return new CodeSystemOrdinalValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemOrdinalValue {
    return new CodeSystemOrdinalValue().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemOrdinalValue | PlainMessage<CodeSystemOrdinalValue> | undefined, b: CodeSystemOrdinalValue | PlainMessage<CodeSystemOrdinalValue> | undefined): boolean {
    return proto3.util.equals(CodeSystemOrdinalValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for otherName.
 * Alternative names.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-otherName
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemOtherName
 */
export class CodeSystemOtherName extends Message<CodeSystemOtherName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Human readable, short and specific
   *
   * @generated from field: google.fhir.stu3.proto.String name = 4;
   */
  name?: String;

  /**
   * Which name is preferred for this language
   *
   * @generated from field: google.fhir.stu3.proto.Boolean preferred = 5;
   */
  preferred?: Boolean;

  constructor(data?: PartialMessage<CodeSystemOtherName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemOtherName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "preferred", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemOtherName {
    return new CodeSystemOtherName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemOtherName {
    return new CodeSystemOtherName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemOtherName {
    return new CodeSystemOtherName().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemOtherName | PlainMessage<CodeSystemOtherName> | undefined, b: CodeSystemOtherName | PlainMessage<CodeSystemOtherName> | undefined): boolean {
    return proto3.util.equals(CodeSystemOtherName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reference.
 * Url of Value set the code was chosen from.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-reference
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemReference
 */
export class CodeSystemReference extends Message<CodeSystemReference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<CodeSystemReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemReference {
    return new CodeSystemReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemReference {
    return new CodeSystemReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemReference {
    return new CodeSystemReference().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemReference | PlainMessage<CodeSystemReference> | undefined, b: CodeSystemReference | PlainMessage<CodeSystemReference> | undefined): boolean {
    return proto3.util.equals(CodeSystemReference, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for replacedby.
 * A code that replaces this.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-replacedby
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemReplacedby
 */
export class CodeSystemReplacedby extends Message<CodeSystemReplacedby> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<CodeSystemReplacedby>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemReplacedby";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemReplacedby {
    return new CodeSystemReplacedby().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemReplacedby {
    return new CodeSystemReplacedby().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemReplacedby {
    return new CodeSystemReplacedby().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemReplacedby | PlainMessage<CodeSystemReplacedby> | undefined, b: CodeSystemReplacedby | PlainMessage<CodeSystemReplacedby> | undefined): boolean {
    return proto3.util.equals(CodeSystemReplacedby, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sourceReference.
 * Where did this content come from.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-sourceReference
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemSourceReference
 */
export class CodeSystemSourceReference extends Message<CodeSystemSourceReference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<CodeSystemSourceReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemSourceReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemSourceReference {
    return new CodeSystemSourceReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemSourceReference {
    return new CodeSystemSourceReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemSourceReference {
    return new CodeSystemSourceReference().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemSourceReference | PlainMessage<CodeSystemSourceReference> | undefined, b: CodeSystemSourceReference | PlainMessage<CodeSystemSourceReference> | undefined): boolean {
    return proto3.util.equals(CodeSystemSourceReference, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for subsumes.
 * Codes that this concept subsumes that have already been declared elsewhere.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-subsumes
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemSubsumes
 */
export class CodeSystemSubsumes extends Message<CodeSystemSubsumes> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Code value_code = 3;
   */
  valueCode?: Code;

  constructor(data?: PartialMessage<CodeSystemSubsumes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemSubsumes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemSubsumes {
    return new CodeSystemSubsumes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemSubsumes {
    return new CodeSystemSubsumes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemSubsumes {
    return new CodeSystemSubsumes().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemSubsumes | PlainMessage<CodeSystemSubsumes> | undefined, b: CodeSystemSubsumes | PlainMessage<CodeSystemSubsumes> | undefined): boolean {
    return proto3.util.equals(CodeSystemSubsumes, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for trusted-expansion.
 * Reference to a trusted expansion.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-trusted-expansion
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemTrustedExpansion
 */
export class CodeSystemTrustedExpansion extends Message<CodeSystemTrustedExpansion> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<CodeSystemTrustedExpansion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemTrustedExpansion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemTrustedExpansion {
    return new CodeSystemTrustedExpansion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemTrustedExpansion {
    return new CodeSystemTrustedExpansion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemTrustedExpansion {
    return new CodeSystemTrustedExpansion().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemTrustedExpansion | PlainMessage<CodeSystemTrustedExpansion> | undefined, b: CodeSystemTrustedExpansion | PlainMessage<CodeSystemTrustedExpansion> | undefined): boolean {
    return proto3.util.equals(CodeSystemTrustedExpansion, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for usage.
 * Who has used and how?.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-usage
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemUsage
 */
export class CodeSystemUsage extends Message<CodeSystemUsage> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * A consumer of or client for the value set
   *
   * @generated from field: google.fhir.stu3.proto.String user = 4;
   */
  user?: String;

  /**
   * Implementation/project/standard that uses value set
   *
   * @generated from field: google.fhir.stu3.proto.String use = 5;
   */
  use?: String;

  constructor(data?: PartialMessage<CodeSystemUsage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemUsage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "user", kind: "message", T: String },
    { no: 5, name: "use", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemUsage {
    return new CodeSystemUsage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemUsage {
    return new CodeSystemUsage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemUsage {
    return new CodeSystemUsage().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemUsage | PlainMessage<CodeSystemUsage> | undefined, b: CodeSystemUsage | PlainMessage<CodeSystemUsage> | undefined): boolean {
    return proto3.util.equals(CodeSystemUsage, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for warning.
 * Extra warning about the correct use of the value set.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-warning
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemWarning
 */
export class CodeSystemWarning extends Message<CodeSystemWarning> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Markdown value_markdown = 3;
   */
  valueMarkdown?: Markdown;

  constructor(data?: PartialMessage<CodeSystemWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_markdown", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemWarning {
    return new CodeSystemWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemWarning {
    return new CodeSystemWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemWarning {
    return new CodeSystemWarning().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemWarning | PlainMessage<CodeSystemWarning> | undefined, b: CodeSystemWarning | PlainMessage<CodeSystemWarning> | undefined): boolean {
    return proto3.util.equals(CodeSystemWarning, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for workflowStatus.
 * Indicates the state of development of the value set.
 * See http://hl7.org/fhir/StructureDefinition/codesystem-workflowStatus
 *
 * @generated from message google.fhir.stu3.proto.CodeSystemWorkflowStatus
 */
export class CodeSystemWorkflowStatus extends Message<CodeSystemWorkflowStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CodeSystemWorkflowStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodeSystemWorkflowStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodeSystemWorkflowStatus {
    return new CodeSystemWorkflowStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodeSystemWorkflowStatus {
    return new CodeSystemWorkflowStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodeSystemWorkflowStatus {
    return new CodeSystemWorkflowStatus().fromJsonString(jsonString, options);
  }

  static equals(a: CodeSystemWorkflowStatus | PlainMessage<CodeSystemWorkflowStatus> | undefined, b: CodeSystemWorkflowStatus | PlainMessage<CodeSystemWorkflowStatus> | undefined): boolean {
    return proto3.util.equals(CodeSystemWorkflowStatus, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sctdescid.
 * SNOMED CT Description ID.
 * See http://hl7.org/fhir/StructureDefinition/coding-sctdescid
 *
 * @generated from message google.fhir.stu3.proto.CodingSctdescid
 */
export class CodingSctdescid extends Message<CodingSctdescid> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Id value_id = 3;
   */
  valueId?: Id;

  constructor(data?: PartialMessage<CodingSctdescid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodingSctdescid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_id", kind: "message", T: Id },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodingSctdescid {
    return new CodingSctdescid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodingSctdescid {
    return new CodingSctdescid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodingSctdescid {
    return new CodingSctdescid().fromJsonString(jsonString, options);
  }

  static equals(a: CodingSctdescid | PlainMessage<CodingSctdescid> | undefined, b: CodingSctdescid | PlainMessage<CodingSctdescid> | undefined): boolean {
    return proto3.util.equals(CodingSctdescid, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for media.
 * Attached media.
 * See http://hl7.org/fhir/StructureDefinition/communication-media
 *
 * @generated from message google.fhir.stu3.proto.CommunicationMedia
 */
export class CommunicationMedia extends Message<CommunicationMedia> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Attachment value_attachment = 3;
   */
  valueAttachment?: Attachment;

  constructor(data?: PartialMessage<CommunicationMedia>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationMedia";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_attachment", kind: "message", T: Attachment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationMedia {
    return new CommunicationMedia().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationMedia {
    return new CommunicationMedia().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationMedia {
    return new CommunicationMedia().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationMedia | PlainMessage<CommunicationMedia> | undefined, b: CommunicationMedia | PlainMessage<CommunicationMedia> | undefined): boolean {
    return proto3.util.equals(CommunicationMedia, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonNotPerformed.
 * Why the communication was not or could not be carried out.
 * See http://hl7.org/fhir/StructureDefinition/communication-reasonNotPerformed
 *
 * @generated from message google.fhir.stu3.proto.CommunicationReasonNotPerformed
 */
export class CommunicationReasonNotPerformed extends Message<CommunicationReasonNotPerformed> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<CommunicationReasonNotPerformed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationReasonNotPerformed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationReasonNotPerformed {
    return new CommunicationReasonNotPerformed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationReasonNotPerformed {
    return new CommunicationReasonNotPerformed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationReasonNotPerformed {
    return new CommunicationReasonNotPerformed().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationReasonNotPerformed | PlainMessage<CommunicationReasonNotPerformed> | undefined, b: CommunicationReasonNotPerformed | PlainMessage<CommunicationReasonNotPerformed> | undefined): boolean {
    return proto3.util.equals(CommunicationReasonNotPerformed, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for definition.
 * Instantiates protocol or definition.
 * See http://hl7.org/fhir/StructureDefinition/communicationrequest-definition
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestDefinition
 */
export class CommunicationRequestDefinition extends Message<CommunicationRequestDefinition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.CommunicationRequestDefinition.Value value = 3;
   */
  value?: CommunicationRequestDefinition_Value;

  constructor(data?: PartialMessage<CommunicationRequestDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: CommunicationRequestDefinition_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestDefinition {
    return new CommunicationRequestDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestDefinition {
    return new CommunicationRequestDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestDefinition {
    return new CommunicationRequestDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestDefinition | PlainMessage<CommunicationRequestDefinition> | undefined, b: CommunicationRequestDefinition | PlainMessage<CommunicationRequestDefinition> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestDefinition, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestDefinition.Value
 */
export class CommunicationRequestDefinition_Value extends Message<CommunicationRequestDefinition_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.CommunicationRequestDefinition.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CommunicationRequestDefinition_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestDefinition.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestDefinition_Value {
    return new CommunicationRequestDefinition_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestDefinition_Value {
    return new CommunicationRequestDefinition_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestDefinition_Value {
    return new CommunicationRequestDefinition_Value().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestDefinition_Value | PlainMessage<CommunicationRequestDefinition_Value> | undefined, b: CommunicationRequestDefinition_Value | PlainMessage<CommunicationRequestDefinition_Value> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestDefinition_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for orderedBy.
 * Agent that ordered the communication.
 * See http://hl7.org/fhir/StructureDefinition/communicationrequest-orderedBy
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestOrderedBy
 */
export class CommunicationRequestOrderedBy extends Message<CommunicationRequestOrderedBy> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value value = 3;
   */
  value?: CommunicationRequestOrderedBy_Value;

  constructor(data?: PartialMessage<CommunicationRequestOrderedBy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestOrderedBy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: CommunicationRequestOrderedBy_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestOrderedBy {
    return new CommunicationRequestOrderedBy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestOrderedBy {
    return new CommunicationRequestOrderedBy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestOrderedBy {
    return new CommunicationRequestOrderedBy().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestOrderedBy | PlainMessage<CommunicationRequestOrderedBy> | undefined, b: CommunicationRequestOrderedBy | PlainMessage<CommunicationRequestOrderedBy> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestOrderedBy, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value
 */
export class CommunicationRequestOrderedBy_Value extends Message<CommunicationRequestOrderedBy_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CommunicationRequestOrderedBy_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestOrderedBy.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestOrderedBy_Value {
    return new CommunicationRequestOrderedBy_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestOrderedBy_Value {
    return new CommunicationRequestOrderedBy_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestOrderedBy_Value {
    return new CommunicationRequestOrderedBy_Value().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestOrderedBy_Value | PlainMessage<CommunicationRequestOrderedBy_Value> | undefined, b: CommunicationRequestOrderedBy_Value | PlainMessage<CommunicationRequestOrderedBy_Value> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestOrderedBy_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRejected.
 * Why the recipient could not be act upon the request.
 * See
 * http://hl7.org/fhir/StructureDefinition/communicationrequest-reasonRejected
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestReasonRejected
 */
export class CommunicationRequestReasonRejected extends Message<CommunicationRequestReasonRejected> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<CommunicationRequestReasonRejected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestReasonRejected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestReasonRejected {
    return new CommunicationRequestReasonRejected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestReasonRejected {
    return new CommunicationRequestReasonRejected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestReasonRejected {
    return new CommunicationRequestReasonRejected().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestReasonRejected | PlainMessage<CommunicationRequestReasonRejected> | undefined, b: CommunicationRequestReasonRejected | PlainMessage<CommunicationRequestReasonRejected> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestReasonRejected, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for relevantHistory.
 * Key events in history of request.
 * See
 * http://hl7.org/fhir/StructureDefinition/communicationrequest-relevantHistory
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestRelevantHistory
 */
export class CommunicationRequestRelevantHistory extends Message<CommunicationRequestRelevantHistory> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<CommunicationRequestRelevantHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestRelevantHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestRelevantHistory {
    return new CommunicationRequestRelevantHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestRelevantHistory {
    return new CommunicationRequestRelevantHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestRelevantHistory {
    return new CommunicationRequestRelevantHistory().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestRelevantHistory | PlainMessage<CommunicationRequestRelevantHistory> | undefined, b: CommunicationRequestRelevantHistory | PlainMessage<CommunicationRequestRelevantHistory> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestRelevantHistory, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for supportingInfo.
 * Extra information to use in performing request.
 * See
 * http://hl7.org/fhir/StructureDefinition/communicationrequest-supportingInfo
 *
 * @generated from message google.fhir.stu3.proto.CommunicationRequestSupportingInfo
 */
export class CommunicationRequestSupportingInfo extends Message<CommunicationRequestSupportingInfo> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<CommunicationRequestSupportingInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CommunicationRequestSupportingInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CommunicationRequestSupportingInfo {
    return new CommunicationRequestSupportingInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CommunicationRequestSupportingInfo {
    return new CommunicationRequestSupportingInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CommunicationRequestSupportingInfo {
    return new CommunicationRequestSupportingInfo().fromJsonString(jsonString, options);
  }

  static equals(a: CommunicationRequestSupportingInfo | PlainMessage<CommunicationRequestSupportingInfo> | undefined, b: CommunicationRequestSupportingInfo | PlainMessage<CommunicationRequestSupportingInfo> | undefined): boolean {
    return proto3.util.equals(CommunicationRequestSupportingInfo, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for otherConfidentiality.
 * Additional confidentiality codes.
 * See
 * http://hl7.org/fhir/StructureDefinition/composition-clindoc-otherConfidentiality
 *
 * @generated from message google.fhir.stu3.proto.CompositionOtherConfidentiality
 */
export class CompositionOtherConfidentiality extends Message<CompositionOtherConfidentiality> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<CompositionOtherConfidentiality>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CompositionOtherConfidentiality";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompositionOtherConfidentiality {
    return new CompositionOtherConfidentiality().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompositionOtherConfidentiality {
    return new CompositionOtherConfidentiality().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompositionOtherConfidentiality {
    return new CompositionOtherConfidentiality().fromJsonString(jsonString, options);
  }

  static equals(a: CompositionOtherConfidentiality | PlainMessage<CompositionOtherConfidentiality> | undefined, b: CompositionOtherConfidentiality | PlainMessage<CompositionOtherConfidentiality> | undefined): boolean {
    return proto3.util.equals(CompositionOtherConfidentiality, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for bidirectional.
 * Whether the map can be interpreted in reverse.
 * See http://hl7.org/fhir/StructureDefinition/concept-bidirectional
 *
 * @generated from message google.fhir.stu3.proto.ConceptMapBidirectional
 */
export class ConceptMapBidirectional extends Message<ConceptMapBidirectional> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<ConceptMapBidirectional>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConceptMapBidirectional";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMapBidirectional {
    return new ConceptMapBidirectional().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMapBidirectional {
    return new ConceptMapBidirectional().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMapBidirectional {
    return new ConceptMapBidirectional().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMapBidirectional | PlainMessage<ConceptMapBidirectional> | undefined, b: ConceptMapBidirectional | PlainMessage<ConceptMapBidirectional> | undefined): boolean {
    return proto3.util.equals(ConceptMapBidirectional, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for basedOn.
 * Request fufilled by this condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-basedOn
 *
 * @generated from message google.fhir.stu3.proto.ConditionBasedOn
 */
export class ConditionBasedOn extends Message<ConditionBasedOn> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ConditionBasedOn.Value value = 3;
   */
  value?: ConditionBasedOn_Value;

  constructor(data?: PartialMessage<ConditionBasedOn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionBasedOn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ConditionBasedOn_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionBasedOn {
    return new ConditionBasedOn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionBasedOn {
    return new ConditionBasedOn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionBasedOn {
    return new ConditionBasedOn().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionBasedOn | PlainMessage<ConditionBasedOn> | undefined, b: ConditionBasedOn | PlainMessage<ConditionBasedOn> | undefined): boolean {
    return proto3.util.equals(ConditionBasedOn, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ConditionBasedOn.Value
 */
export class ConditionBasedOn_Value extends Message<ConditionBasedOn_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ConditionBasedOn.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConditionBasedOn_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionBasedOn.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionBasedOn_Value {
    return new ConditionBasedOn_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionBasedOn_Value {
    return new ConditionBasedOn_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionBasedOn_Value {
    return new ConditionBasedOn_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionBasedOn_Value | PlainMessage<ConditionBasedOn_Value> | undefined, b: ConditionBasedOn_Value | PlainMessage<ConditionBasedOn_Value> | undefined): boolean {
    return proto3.util.equals(ConditionBasedOn_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for criticality.
 * Potential impact of the condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-criticality
 *
 * @generated from message google.fhir.stu3.proto.ConditionCriticality
 */
export class ConditionCriticality extends Message<ConditionCriticality> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ConditionCriticality>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionCriticality";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionCriticality {
    return new ConditionCriticality().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionCriticality {
    return new ConditionCriticality().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionCriticality {
    return new ConditionCriticality().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionCriticality | PlainMessage<ConditionCriticality> | undefined, b: ConditionCriticality | PlainMessage<ConditionCriticality> | undefined): boolean {
    return proto3.util.equals(ConditionCriticality, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for definition.
 * Instantiates protocol or definition.
 * See http://hl7.org/fhir/StructureDefinition/condition-definition
 *
 * @generated from message google.fhir.stu3.proto.ConditionDefinition
 */
export class ConditionDefinition extends Message<ConditionDefinition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ConditionDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionDefinition {
    return new ConditionDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionDefinition {
    return new ConditionDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionDefinition {
    return new ConditionDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionDefinition | PlainMessage<ConditionDefinition> | undefined, b: ConditionDefinition | PlainMessage<ConditionDefinition> | undefined): boolean {
    return proto3.util.equals(ConditionDefinition, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for dueTo.
 * Causes for this Condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-dueTo
 *
 * @generated from message google.fhir.stu3.proto.ConditionDueTo
 */
export class ConditionDueTo extends Message<ConditionDueTo> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ConditionDueTo.Value value = 3;
   */
  value?: ConditionDueTo_Value;

  constructor(data?: PartialMessage<ConditionDueTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionDueTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ConditionDueTo_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionDueTo {
    return new ConditionDueTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionDueTo {
    return new ConditionDueTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionDueTo {
    return new ConditionDueTo().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionDueTo | PlainMessage<ConditionDueTo> | undefined, b: ConditionDueTo | PlainMessage<ConditionDueTo> | undefined): boolean {
    return proto3.util.equals(ConditionDueTo, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ConditionDueTo.Value
 */
export class ConditionDueTo_Value extends Message<ConditionDueTo_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ConditionDueTo.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConditionDueTo_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionDueTo.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "value" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionDueTo_Value {
    return new ConditionDueTo_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionDueTo_Value {
    return new ConditionDueTo_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionDueTo_Value {
    return new ConditionDueTo_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionDueTo_Value | PlainMessage<ConditionDueTo_Value> | undefined, b: ConditionDueTo_Value | PlainMessage<ConditionDueTo_Value> | undefined): boolean {
    return proto3.util.equals(ConditionDueTo_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for occurredFollowing.
 * Precedent for this Condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-occurredFollowing
 *
 * @generated from message google.fhir.stu3.proto.ConditionOccurredFollowing
 */
export class ConditionOccurredFollowing extends Message<ConditionOccurredFollowing> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ConditionOccurredFollowing.Value value = 3;
   */
  value?: ConditionOccurredFollowing_Value;

  constructor(data?: PartialMessage<ConditionOccurredFollowing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionOccurredFollowing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ConditionOccurredFollowing_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionOccurredFollowing {
    return new ConditionOccurredFollowing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionOccurredFollowing {
    return new ConditionOccurredFollowing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionOccurredFollowing {
    return new ConditionOccurredFollowing().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionOccurredFollowing | PlainMessage<ConditionOccurredFollowing> | undefined, b: ConditionOccurredFollowing | PlainMessage<ConditionOccurredFollowing> | undefined): boolean {
    return proto3.util.equals(ConditionOccurredFollowing, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ConditionOccurredFollowing.Value
 */
export class ConditionOccurredFollowing_Value extends Message<ConditionOccurredFollowing_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ConditionOccurredFollowing.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConditionOccurredFollowing_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionOccurredFollowing.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "value" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionOccurredFollowing_Value {
    return new ConditionOccurredFollowing_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionOccurredFollowing_Value {
    return new ConditionOccurredFollowing_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionOccurredFollowing_Value {
    return new ConditionOccurredFollowing_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionOccurredFollowing_Value | PlainMessage<ConditionOccurredFollowing_Value> | undefined, b: ConditionOccurredFollowing_Value | PlainMessage<ConditionOccurredFollowing_Value> | undefined): boolean {
    return proto3.util.equals(ConditionOccurredFollowing_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for outcome.
 * A consequence of the Condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-outcome
 *
 * @generated from message google.fhir.stu3.proto.ConditionOutcome
 */
export class ConditionOutcome extends Message<ConditionOutcome> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ConditionOutcome>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionOutcome";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionOutcome {
    return new ConditionOutcome().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionOutcome {
    return new ConditionOutcome().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionOutcome {
    return new ConditionOutcome().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionOutcome | PlainMessage<ConditionOutcome> | undefined, b: ConditionOutcome | PlainMessage<ConditionOutcome> | undefined): boolean {
    return proto3.util.equals(ConditionOutcome, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for partOf.
 * Part of this condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-partOf
 *
 * @generated from message google.fhir.stu3.proto.ConditionPartOf
 */
export class ConditionPartOf extends Message<ConditionPartOf> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ConditionPartOf.Value value = 3;
   */
  value?: ConditionPartOf_Value;

  constructor(data?: PartialMessage<ConditionPartOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionPartOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ConditionPartOf_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionPartOf {
    return new ConditionPartOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionPartOf {
    return new ConditionPartOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionPartOf {
    return new ConditionPartOf().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionPartOf | PlainMessage<ConditionPartOf> | undefined, b: ConditionPartOf | PlainMessage<ConditionPartOf> | undefined): boolean {
    return proto3.util.equals(ConditionPartOf, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ConditionPartOf.Value
 */
export class ConditionPartOf_Value extends Message<ConditionPartOf_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ConditionPartOf.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConditionPartOf_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionPartOf.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionPartOf_Value {
    return new ConditionPartOf_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionPartOf_Value {
    return new ConditionPartOf_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionPartOf_Value {
    return new ConditionPartOf_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionPartOf_Value | PlainMessage<ConditionPartOf_Value> | undefined, b: ConditionPartOf_Value | PlainMessage<ConditionPartOf_Value> | undefined): boolean {
    return proto3.util.equals(ConditionPartOf_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ruledOut.
 * Conditions ruled out for this condition.
 * See http://hl7.org/fhir/StructureDefinition/condition-ruledOut
 *
 * @generated from message google.fhir.stu3.proto.ConditionRuledOut
 */
export class ConditionRuledOut extends Message<ConditionRuledOut> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ConditionRuledOut>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionRuledOut";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionRuledOut {
    return new ConditionRuledOut().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionRuledOut {
    return new ConditionRuledOut().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionRuledOut {
    return new ConditionRuledOut().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionRuledOut | PlainMessage<ConditionRuledOut> | undefined, b: ConditionRuledOut | PlainMessage<ConditionRuledOut> | undefined): boolean {
    return proto3.util.equals(ConditionRuledOut, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for targetBodySite.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/condition-targetBodySite
 *
 * @generated from message google.fhir.stu3.proto.ConditionTargetBodySite
 */
export class ConditionTargetBodySite extends Message<ConditionTargetBodySite> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ConditionTargetBodySite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConditionTargetBodySite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConditionTargetBodySite {
    return new ConditionTargetBodySite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConditionTargetBodySite {
    return new ConditionTargetBodySite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConditionTargetBodySite {
    return new ConditionTargetBodySite().fromJsonString(jsonString, options);
  }

  static equals(a: ConditionTargetBodySite | PlainMessage<ConditionTargetBodySite> | undefined, b: ConditionTargetBodySite | PlainMessage<ConditionTargetBodySite> | undefined): boolean {
    return proto3.util.equals(ConditionTargetBodySite, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for location.
 * A location specific constraint.
 * See http://hl7.org/fhir/StructureDefinition/consent-location
 *
 * @generated from message google.fhir.stu3.proto.ConsentLocation
 */
export class ConsentLocation extends Message<ConsentLocation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ConsentLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConsentLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsentLocation {
    return new ConsentLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsentLocation {
    return new ConsentLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsentLocation {
    return new ConsentLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ConsentLocation | PlainMessage<ConsentLocation> | undefined, b: ConsentLocation | PlainMessage<ConsentLocation> | undefined): boolean {
    return proto3.util.equals(ConsentLocation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for NotificationEndpoint.
 * Notification Endpoint.
 * See http://hl7.org/fhir/StructureDefinition/consent-NotificationEndpoint
 *
 * @generated from message google.fhir.stu3.proto.ConsentNotificationEndpoint
 */
export class ConsentNotificationEndpoint extends Message<ConsentNotificationEndpoint> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ConsentNotificationEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConsentNotificationEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsentNotificationEndpoint {
    return new ConsentNotificationEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsentNotificationEndpoint {
    return new ConsentNotificationEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsentNotificationEndpoint {
    return new ConsentNotificationEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: ConsentNotificationEndpoint | PlainMessage<ConsentNotificationEndpoint> | undefined, b: ConsentNotificationEndpoint | PlainMessage<ConsentNotificationEndpoint> | undefined): boolean {
    return proto3.util.equals(ConsentNotificationEndpoint, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Witness.
 * Witness to Consent.
 * See http://hl7.org/fhir/StructureDefinition/consent-Witness
 *
 * @generated from message google.fhir.stu3.proto.ConsentWitness
 */
export class ConsentWitness extends Message<ConsentWitness> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ConsentWitness.Value value = 3;
   */
  value?: ConsentWitness_Value;

  constructor(data?: PartialMessage<ConsentWitness>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConsentWitness";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ConsentWitness_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsentWitness {
    return new ConsentWitness().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsentWitness {
    return new ConsentWitness().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsentWitness {
    return new ConsentWitness().fromJsonString(jsonString, options);
  }

  static equals(a: ConsentWitness | PlainMessage<ConsentWitness> | undefined, b: ConsentWitness | PlainMessage<ConsentWitness> | undefined): boolean {
    return proto3.util.equals(ConsentWitness, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ConsentWitness.Value
 */
export class ConsentWitness_Value extends Message<ConsentWitness_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ConsentWitness.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConsentWitness_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ConsentWitness.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConsentWitness_Value {
    return new ConsentWitness_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConsentWitness_Value {
    return new ConsentWitness_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConsentWitness_Value {
    return new ConsentWitness_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ConsentWitness_Value | PlainMessage<ConsentWitness_Value> | undefined, b: ConsentWitness_Value | PlainMessage<ConsentWitness_Value> | undefined): boolean {
    return proto3.util.equals(ConsentWitness_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for calculatedValue.
 * A calculated value.
 * See http://hl7.org/fhir/StructureDefinition/cqif-calculatedValue
 *
 * @generated from message google.fhir.stu3.proto.CalculatedValue
 */
export class CalculatedValue extends Message<CalculatedValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CalculatedValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CalculatedValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CalculatedValue {
    return new CalculatedValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CalculatedValue {
    return new CalculatedValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CalculatedValue {
    return new CalculatedValue().fromJsonString(jsonString, options);
  }

  static equals(a: CalculatedValue | PlainMessage<CalculatedValue> | undefined, b: CalculatedValue | PlainMessage<CalculatedValue> | undefined): boolean {
    return proto3.util.equals(CalculatedValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for citation.
 * Bibliographic citation for the resource.
 * See http://hl7.org/fhir/StructureDefinition/cqif-citation
 *
 * @generated from message google.fhir.stu3.proto.AttachmentCitation
 */
export class AttachmentCitation extends Message<AttachmentCitation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AttachmentCitation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AttachmentCitation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachmentCitation {
    return new AttachmentCitation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachmentCitation {
    return new AttachmentCitation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachmentCitation {
    return new AttachmentCitation().fromJsonString(jsonString, options);
  }

  static equals(a: AttachmentCitation | PlainMessage<AttachmentCitation> | undefined, b: AttachmentCitation | PlainMessage<AttachmentCitation> | undefined): boolean {
    return proto3.util.equals(AttachmentCitation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for cqifCondition.
 * A condition expression.
 * See http://hl7.org/fhir/StructureDefinition/cqif-condition
 *
 * @generated from message google.fhir.stu3.proto.CqifCondition
 */
export class CqifCondition extends Message<CqifCondition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CqifCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CqifCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CqifCondition {
    return new CqifCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CqifCondition {
    return new CqifCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CqifCondition {
    return new CqifCondition().fromJsonString(jsonString, options);
  }

  static equals(a: CqifCondition | PlainMessage<CqifCondition> | undefined, b: CqifCondition | PlainMessage<CqifCondition> | undefined): boolean {
    return proto3.util.equals(CqifCondition, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for cqlExpression.
 * CQL expression.
 * See http://hl7.org/fhir/StructureDefinition/cqif-cqlExpression
 *
 * @generated from message google.fhir.stu3.proto.CqlExpression
 */
export class CqlExpression extends Message<CqlExpression> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<CqlExpression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CqlExpression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CqlExpression {
    return new CqlExpression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CqlExpression {
    return new CqlExpression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CqlExpression {
    return new CqlExpression().fromJsonString(jsonString, options);
  }

  static equals(a: CqlExpression | PlainMessage<CqlExpression> | undefined, b: CqlExpression | PlainMessage<CqlExpression> | undefined): boolean {
    return proto3.util.equals(CqlExpression, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for fhirPathExpression.
 * FHIRPath expression.
 * See http://hl7.org/fhir/StructureDefinition/cqif-fhirPathExpression
 *
 * @generated from message google.fhir.stu3.proto.FhirPathExpression
 */
export class FhirPathExpression extends Message<FhirPathExpression> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<FhirPathExpression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FhirPathExpression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FhirPathExpression {
    return new FhirPathExpression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FhirPathExpression {
    return new FhirPathExpression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FhirPathExpression {
    return new FhirPathExpression().fromJsonString(jsonString, options);
  }

  static equals(a: FhirPathExpression | PlainMessage<FhirPathExpression> | undefined, b: FhirPathExpression | PlainMessage<FhirPathExpression> | undefined): boolean {
    return proto3.util.equals(FhirPathExpression, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for encounterClass.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidanceencounterClass
 *
 * @generated from message google.fhir.stu3.proto.BasicEncounterClass
 */
export class BasicEncounterClass extends Message<BasicEncounterClass> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicEncounterClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicEncounterClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicEncounterClass {
    return new BasicEncounterClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicEncounterClass {
    return new BasicEncounterClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicEncounterClass {
    return new BasicEncounterClass().fromJsonString(jsonString, options);
  }

  static equals(a: BasicEncounterClass | PlainMessage<BasicEncounterClass> | undefined, b: BasicEncounterClass | PlainMessage<BasicEncounterClass> | undefined): boolean {
    return proto3.util.equals(BasicEncounterClass, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for encounterType.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidanceencounterType
 *
 * @generated from message google.fhir.stu3.proto.BasicEncounterType
 */
export class BasicEncounterType extends Message<BasicEncounterType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicEncounterType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicEncounterType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicEncounterType {
    return new BasicEncounterType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicEncounterType {
    return new BasicEncounterType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicEncounterType {
    return new BasicEncounterType().fromJsonString(jsonString, options);
  }

  static equals(a: BasicEncounterType | PlainMessage<BasicEncounterType> | undefined, b: BasicEncounterType | PlainMessage<BasicEncounterType> | undefined): boolean {
    return proto3.util.equals(BasicEncounterType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for initiatingOrganization.
 * Extension.
 * See
 * http://hl7.org/fhir/StructureDefinition/cqif-guidanceinitiatingOrganization
 *
 * @generated from message google.fhir.stu3.proto.BasicInitiatingOrganization
 */
export class BasicInitiatingOrganization extends Message<BasicInitiatingOrganization> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<BasicInitiatingOrganization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicInitiatingOrganization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicInitiatingOrganization {
    return new BasicInitiatingOrganization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicInitiatingOrganization {
    return new BasicInitiatingOrganization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicInitiatingOrganization {
    return new BasicInitiatingOrganization().fromJsonString(jsonString, options);
  }

  static equals(a: BasicInitiatingOrganization | PlainMessage<BasicInitiatingOrganization> | undefined, b: BasicInitiatingOrganization | PlainMessage<BasicInitiatingOrganization> | undefined): boolean {
    return proto3.util.equals(BasicInitiatingOrganization, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for initiatingPerson.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidanceinitiatingPerson
 *
 * @generated from message google.fhir.stu3.proto.BasicInitiatingPerson
 */
export class BasicInitiatingPerson extends Message<BasicInitiatingPerson> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.BasicInitiatingPerson.Value value = 3;
   */
  value?: BasicInitiatingPerson_Value;

  constructor(data?: PartialMessage<BasicInitiatingPerson>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicInitiatingPerson";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: BasicInitiatingPerson_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicInitiatingPerson {
    return new BasicInitiatingPerson().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicInitiatingPerson {
    return new BasicInitiatingPerson().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicInitiatingPerson {
    return new BasicInitiatingPerson().fromJsonString(jsonString, options);
  }

  static equals(a: BasicInitiatingPerson | PlainMessage<BasicInitiatingPerson> | undefined, b: BasicInitiatingPerson | PlainMessage<BasicInitiatingPerson> | undefined): boolean {
    return proto3.util.equals(BasicInitiatingPerson, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.BasicInitiatingPerson.Value
 */
export class BasicInitiatingPerson_Value extends Message<BasicInitiatingPerson_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.BasicInitiatingPerson.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BasicInitiatingPerson_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicInitiatingPerson.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicInitiatingPerson_Value {
    return new BasicInitiatingPerson_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicInitiatingPerson_Value {
    return new BasicInitiatingPerson_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicInitiatingPerson_Value {
    return new BasicInitiatingPerson_Value().fromJsonString(jsonString, options);
  }

  static equals(a: BasicInitiatingPerson_Value | PlainMessage<BasicInitiatingPerson_Value> | undefined, b: BasicInitiatingPerson_Value | PlainMessage<BasicInitiatingPerson_Value> | undefined): boolean {
    return proto3.util.equals(BasicInitiatingPerson_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for receivingOrganization.
 * Extension.
 * See
 * http://hl7.org/fhir/StructureDefinition/cqif-guidancereceivingOrganization
 *
 * @generated from message google.fhir.stu3.proto.BasicReceivingOrganization
 */
export class BasicReceivingOrganization extends Message<BasicReceivingOrganization> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<BasicReceivingOrganization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicReceivingOrganization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicReceivingOrganization {
    return new BasicReceivingOrganization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicReceivingOrganization {
    return new BasicReceivingOrganization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicReceivingOrganization {
    return new BasicReceivingOrganization().fromJsonString(jsonString, options);
  }

  static equals(a: BasicReceivingOrganization | PlainMessage<BasicReceivingOrganization> | undefined, b: BasicReceivingOrganization | PlainMessage<BasicReceivingOrganization> | undefined): boolean {
    return proto3.util.equals(BasicReceivingOrganization, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for receivingPerson.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidancereceivingPerson
 *
 * @generated from message google.fhir.stu3.proto.BasicReceivingPerson
 */
export class BasicReceivingPerson extends Message<BasicReceivingPerson> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.BasicReceivingPerson.Value value = 3;
   */
  value?: BasicReceivingPerson_Value;

  constructor(data?: PartialMessage<BasicReceivingPerson>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicReceivingPerson";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: BasicReceivingPerson_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicReceivingPerson {
    return new BasicReceivingPerson().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicReceivingPerson {
    return new BasicReceivingPerson().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicReceivingPerson {
    return new BasicReceivingPerson().fromJsonString(jsonString, options);
  }

  static equals(a: BasicReceivingPerson | PlainMessage<BasicReceivingPerson> | undefined, b: BasicReceivingPerson | PlainMessage<BasicReceivingPerson> | undefined): boolean {
    return proto3.util.equals(BasicReceivingPerson, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.BasicReceivingPerson.Value
 */
export class BasicReceivingPerson_Value extends Message<BasicReceivingPerson_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.BasicReceivingPerson.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<BasicReceivingPerson_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicReceivingPerson.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicReceivingPerson_Value {
    return new BasicReceivingPerson_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicReceivingPerson_Value {
    return new BasicReceivingPerson_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicReceivingPerson_Value {
    return new BasicReceivingPerson_Value().fromJsonString(jsonString, options);
  }

  static equals(a: BasicReceivingPerson_Value | PlainMessage<BasicReceivingPerson_Value> | undefined, b: BasicReceivingPerson_Value | PlainMessage<BasicReceivingPerson_Value> | undefined): boolean {
    return proto3.util.equals(BasicReceivingPerson_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for recipientLanguage.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidancerecipientLanguage
 *
 * @generated from message google.fhir.stu3.proto.BasicRecipientLanguage
 */
export class BasicRecipientLanguage extends Message<BasicRecipientLanguage> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicRecipientLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicRecipientLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicRecipientLanguage {
    return new BasicRecipientLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicRecipientLanguage {
    return new BasicRecipientLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicRecipientLanguage {
    return new BasicRecipientLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: BasicRecipientLanguage | PlainMessage<BasicRecipientLanguage> | undefined, b: BasicRecipientLanguage | PlainMessage<BasicRecipientLanguage> | undefined): boolean {
    return proto3.util.equals(BasicRecipientLanguage, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for recipientType.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidancerecipientType
 *
 * @generated from message google.fhir.stu3.proto.BasicRecipientType
 */
export class BasicRecipientType extends Message<BasicRecipientType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicRecipientType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicRecipientType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicRecipientType {
    return new BasicRecipientType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicRecipientType {
    return new BasicRecipientType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicRecipientType {
    return new BasicRecipientType().fromJsonString(jsonString, options);
  }

  static equals(a: BasicRecipientType | PlainMessage<BasicRecipientType> | undefined, b: BasicRecipientType | PlainMessage<BasicRecipientType> | undefined): boolean {
    return proto3.util.equals(BasicRecipientType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for systemUserLanguage.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidancesystemUserLanguage
 *
 * @generated from message google.fhir.stu3.proto.BasicSystemUserLanguage
 */
export class BasicSystemUserLanguage extends Message<BasicSystemUserLanguage> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicSystemUserLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicSystemUserLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicSystemUserLanguage {
    return new BasicSystemUserLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicSystemUserLanguage {
    return new BasicSystemUserLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicSystemUserLanguage {
    return new BasicSystemUserLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: BasicSystemUserLanguage | PlainMessage<BasicSystemUserLanguage> | undefined, b: BasicSystemUserLanguage | PlainMessage<BasicSystemUserLanguage> | undefined): boolean {
    return proto3.util.equals(BasicSystemUserLanguage, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for systemUserTaskContext.
 * The task the system user is performing.
 * See
 * http://hl7.org/fhir/StructureDefinition/cqif-guidancesystemUserTaskContext
 *
 * @generated from message google.fhir.stu3.proto.BasicSystemUserTaskContext
 */
export class BasicSystemUserTaskContext extends Message<BasicSystemUserTaskContext> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicSystemUserTaskContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicSystemUserTaskContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicSystemUserTaskContext {
    return new BasicSystemUserTaskContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicSystemUserTaskContext {
    return new BasicSystemUserTaskContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicSystemUserTaskContext {
    return new BasicSystemUserTaskContext().fromJsonString(jsonString, options);
  }

  static equals(a: BasicSystemUserTaskContext | PlainMessage<BasicSystemUserTaskContext> | undefined, b: BasicSystemUserTaskContext | PlainMessage<BasicSystemUserTaskContext> | undefined): boolean {
    return proto3.util.equals(BasicSystemUserTaskContext, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for systemUserType.
 * The type of user initiating the request.
 * See http://hl7.org/fhir/StructureDefinition/cqif-guidancesystemUserType
 *
 * @generated from message google.fhir.stu3.proto.BasicSystemUserType
 */
export class BasicSystemUserType extends Message<BasicSystemUserType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<BasicSystemUserType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BasicSystemUserType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BasicSystemUserType {
    return new BasicSystemUserType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BasicSystemUserType {
    return new BasicSystemUserType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BasicSystemUserType {
    return new BasicSystemUserType().fromJsonString(jsonString, options);
  }

  static equals(a: BasicSystemUserType | PlainMessage<BasicSystemUserType> | undefined, b: BasicSystemUserType | PlainMessage<BasicSystemUserType> | undefined): boolean {
    return proto3.util.equals(BasicSystemUserType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for initialValue.
 * An initial value expression.
 * See http://hl7.org/fhir/StructureDefinition/cqif-initialValue
 *
 * @generated from message google.fhir.stu3.proto.InitialValue
 */
export class InitialValue extends Message<InitialValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<InitialValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.InitialValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitialValue {
    return new InitialValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitialValue {
    return new InitialValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitialValue {
    return new InitialValue().fromJsonString(jsonString, options);
  }

  static equals(a: InitialValue | PlainMessage<InitialValue> | undefined, b: InitialValue | PlainMessage<InitialValue> | undefined): boolean {
    return proto3.util.equals(InitialValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for cqifLibrary.
 * A library containing logic used by the artifact.
 * See http://hl7.org/fhir/StructureDefinition/cqif-library
 *
 * @generated from message google.fhir.stu3.proto.CqifLibrary
 */
export class CqifLibrary extends Message<CqifLibrary> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<CqifLibrary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CqifLibrary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CqifLibrary {
    return new CqifLibrary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CqifLibrary {
    return new CqifLibrary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CqifLibrary {
    return new CqifLibrary().fromJsonString(jsonString, options);
  }

  static equals(a: CqifLibrary | PlainMessage<CqifLibrary> | undefined, b: CqifLibrary | PlainMessage<CqifLibrary> | undefined): boolean {
    return proto3.util.equals(CqifLibrary, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for measureInfo.
 * Measure criteria for the resource.
 * See http://hl7.org/fhir/StructureDefinition/cqif-measureInfo
 *
 * @generated from message google.fhir.stu3.proto.MeasureInfo
 */
export class MeasureInfo extends Message<MeasureInfo> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * The measure being calculated
   *
   * @generated from field: google.fhir.stu3.proto.Reference measure = 4;
   */
  measure?: Reference;

  /**
   * The group identifier
   *
   * @generated from field: google.fhir.stu3.proto.Identifier group_identifier = 5;
   */
  groupIdentifier?: Identifier;

  /**
   * The population identifier
   *
   * @generated from field: google.fhir.stu3.proto.Identifier population_identifier = 6;
   */
  populationIdentifier?: Identifier;

  constructor(data?: PartialMessage<MeasureInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MeasureInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "measure", kind: "message", T: Reference },
    { no: 5, name: "group_identifier", kind: "message", T: Identifier },
    { no: 6, name: "population_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MeasureInfo {
    return new MeasureInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MeasureInfo {
    return new MeasureInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MeasureInfo {
    return new MeasureInfo().fromJsonString(jsonString, options);
  }

  static equals(a: MeasureInfo | PlainMessage<MeasureInfo> | undefined, b: MeasureInfo | PlainMessage<MeasureInfo> | undefined): boolean {
    return proto3.util.equals(MeasureInfo, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for optionCode.
 * Meaning of the response option.
 * See http://hl7.org/fhir/StructureDefinition/cqif-optionCode
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireOptionCode
 */
export class QuestionnaireOptionCode extends Message<QuestionnaireOptionCode> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<QuestionnaireOptionCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireOptionCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireOptionCode {
    return new QuestionnaireOptionCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireOptionCode {
    return new QuestionnaireOptionCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireOptionCode {
    return new QuestionnaireOptionCode().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireOptionCode | PlainMessage<QuestionnaireOptionCode> | undefined, b: QuestionnaireOptionCode | PlainMessage<QuestionnaireOptionCode> | undefined): boolean {
    return proto3.util.equals(QuestionnaireOptionCode, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for qualityOfEvidence.
 * The quality of the evidence.
 * See http://hl7.org/fhir/StructureDefinition/cqif-qualityOfEvidence
 *
 * @generated from message google.fhir.stu3.proto.AttachmentQualityOfEvidence
 */
export class AttachmentQualityOfEvidence extends Message<AttachmentQualityOfEvidence> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<AttachmentQualityOfEvidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AttachmentQualityOfEvidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachmentQualityOfEvidence {
    return new AttachmentQualityOfEvidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachmentQualityOfEvidence {
    return new AttachmentQualityOfEvidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachmentQualityOfEvidence {
    return new AttachmentQualityOfEvidence().fromJsonString(jsonString, options);
  }

  static equals(a: AttachmentQualityOfEvidence | PlainMessage<AttachmentQualityOfEvidence> | undefined, b: AttachmentQualityOfEvidence | PlainMessage<AttachmentQualityOfEvidence> | undefined): boolean {
    return proto3.util.equals(AttachmentQualityOfEvidence, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sourceValueSet.
 * Source value set for the coding.
 * See http://hl7.org/fhir/StructureDefinition/cqif-sourceValueSet
 *
 * @generated from message google.fhir.stu3.proto.CodingSourceValueSet
 */
export class CodingSourceValueSet extends Message<CodingSourceValueSet> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<CodingSourceValueSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodingSourceValueSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodingSourceValueSet {
    return new CodingSourceValueSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodingSourceValueSet {
    return new CodingSourceValueSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodingSourceValueSet {
    return new CodingSourceValueSet().fromJsonString(jsonString, options);
  }

  static equals(a: CodingSourceValueSet | PlainMessage<CodingSourceValueSet> | undefined, b: CodingSourceValueSet | PlainMessage<CodingSourceValueSet> | undefined): boolean {
    return proto3.util.equals(CodingSourceValueSet, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for strengthOfRecommendation.
 * The strength of the recommendation.
 * See http://hl7.org/fhir/StructureDefinition/cqif-strengthOfRecommendation
 *
 * @generated from message google.fhir.stu3.proto.AttachmentStrengthOfRecommendation
 */
export class AttachmentStrengthOfRecommendation extends Message<AttachmentStrengthOfRecommendation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<AttachmentStrengthOfRecommendation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AttachmentStrengthOfRecommendation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttachmentStrengthOfRecommendation {
    return new AttachmentStrengthOfRecommendation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttachmentStrengthOfRecommendation {
    return new AttachmentStrengthOfRecommendation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttachmentStrengthOfRecommendation {
    return new AttachmentStrengthOfRecommendation().fromJsonString(jsonString, options);
  }

  static equals(a: AttachmentStrengthOfRecommendation | PlainMessage<AttachmentStrengthOfRecommendation> | undefined, b: AttachmentStrengthOfRecommendation | PlainMessage<AttachmentStrengthOfRecommendation> | undefined): boolean {
    return proto3.util.equals(AttachmentStrengthOfRecommendation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Data Absent Reason.
 * unknown | asked | temp | notasked | masked | unsupported | astext | error.
 * See http://hl7.org/fhir/StructureDefinition/data-absent-reason
 *
 * @generated from message google.fhir.stu3.proto.DataAbsentReason
 */
export class DataAbsentReason extends Message<DataAbsentReason> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.DataAbsentReasonCode value_code = 3;
   */
  valueCode?: DataAbsentReasonCode;

  constructor(data?: PartialMessage<DataAbsentReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataAbsentReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: DataAbsentReasonCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataAbsentReason {
    return new DataAbsentReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataAbsentReason {
    return new DataAbsentReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataAbsentReason {
    return new DataAbsentReason().fromJsonString(jsonString, options);
  }

  static equals(a: DataAbsentReason | PlainMessage<DataAbsentReason> | undefined, b: DataAbsentReason | PlainMessage<DataAbsentReason> | undefined): boolean {
    return proto3.util.equals(DataAbsentReason, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for datadictionary.
 * Associates the structure definition with a collection of Data Elements.
 * See http://hl7.org/fhir/StructureDefinition/datadictionary
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionDatadictionary
 */
export class StructureDefinitionDatadictionary extends Message<StructureDefinitionDatadictionary> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<StructureDefinitionDatadictionary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionDatadictionary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionDatadictionary {
    return new StructureDefinitionDatadictionary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionDatadictionary {
    return new StructureDefinitionDatadictionary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionDatadictionary {
    return new StructureDefinitionDatadictionary().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionDatadictionary | PlainMessage<StructureDefinitionDatadictionary> | undefined, b: StructureDefinitionDatadictionary | PlainMessage<StructureDefinitionDatadictionary> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionDatadictionary, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for din.
 * DIN | DIC | Distinct Idendification Code.
 * See http://hl7.org/fhir/StructureDefinition/device-din
 *
 * @generated from message google.fhir.stu3.proto.DeviceDin
 */
export class DeviceDin extends Message<DeviceDin> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<DeviceDin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DeviceDin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDin {
    return new DeviceDin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDin {
    return new DeviceDin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDin {
    return new DeviceDin().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDin | PlainMessage<DeviceDin> | undefined, b: DeviceDin | PlainMessage<DeviceDin> | undefined): boolean {
    return proto3.util.equals(DeviceDin, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for implant-status.
 * Implant Status.
 * See http://hl7.org/fhir/StructureDefinition/device-implant-status
 *
 * @generated from message google.fhir.stu3.proto.DeviceImplantStatus
 */
export class DeviceImplantStatus extends Message<DeviceImplantStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ImplantStatusCode value_code = 3;
   */
  valueCode?: ImplantStatusCode;

  constructor(data?: PartialMessage<DeviceImplantStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DeviceImplantStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ImplantStatusCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceImplantStatus {
    return new DeviceImplantStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceImplantStatus {
    return new DeviceImplantStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceImplantStatus {
    return new DeviceImplantStatus().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceImplantStatus | PlainMessage<DeviceImplantStatus> | undefined, b: DeviceImplantStatus | PlainMessage<DeviceImplantStatus> | undefined): boolean {
    return proto3.util.equals(DeviceImplantStatus, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for patientInstruction.
 * Patient Friendly Insructions.
 * See http://hl7.org/fhir/StructureDefinition/devicerequest-patientInstruction
 *
 * @generated from message google.fhir.stu3.proto.DeviceRequestPatientInstruction
 */
export class DeviceRequestPatientInstruction extends Message<DeviceRequestPatientInstruction> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Language
   *
   * @generated from field: google.fhir.stu3.proto.LanguageCode lang = 4;
   */
  lang?: LanguageCode;

  /**
   * Text
   *
   * @generated from field: google.fhir.stu3.proto.String content = 5;
   */
  content?: String;

  constructor(data?: PartialMessage<DeviceRequestPatientInstruction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DeviceRequestPatientInstruction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "lang", kind: "message", T: LanguageCode },
    { no: 5, name: "content", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceRequestPatientInstruction {
    return new DeviceRequestPatientInstruction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceRequestPatientInstruction {
    return new DeviceRequestPatientInstruction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceRequestPatientInstruction {
    return new DeviceRequestPatientInstruction().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceRequestPatientInstruction | PlainMessage<DeviceRequestPatientInstruction> | undefined, b: DeviceRequestPatientInstruction | PlainMessage<DeviceRequestPatientInstruction> | undefined): boolean {
    return proto3.util.equals(DeviceRequestPatientInstruction, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRejected.
 * If request was rejected, why?.
 * See http://hl7.org/fhir/StructureDefinition/devicerequest-reasonRejected
 *
 * @generated from message google.fhir.stu3.proto.DeviceRequestReasonRejected
 */
export class DeviceRequestReasonRejected extends Message<DeviceRequestReasonRejected> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<DeviceRequestReasonRejected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DeviceRequestReasonRejected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceRequestReasonRejected {
    return new DeviceRequestReasonRejected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceRequestReasonRejected {
    return new DeviceRequestReasonRejected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceRequestReasonRejected {
    return new DeviceRequestReasonRejected().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceRequestReasonRejected | PlainMessage<DeviceRequestReasonRejected> | undefined, b: DeviceRequestReasonRejected | PlainMessage<DeviceRequestReasonRejected> | undefined): boolean {
    return proto3.util.equals(DeviceRequestReasonRejected, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for addendumOf.
 * Additional or Supplement Content.
 * See http://hl7.org/fhir/StructureDefinition/diagnosticReport-addendumOf
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportAddendumOf
 */
export class DiagnosticReportAddendumOf extends Message<DiagnosticReportAddendumOf> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportAddendumOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportAddendumOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportAddendumOf {
    return new DiagnosticReportAddendumOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportAddendumOf {
    return new DiagnosticReportAddendumOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportAddendumOf {
    return new DiagnosticReportAddendumOf().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportAddendumOf | PlainMessage<DiagnosticReportAddendumOf> | undefined, b: DiagnosticReportAddendumOf | PlainMessage<DiagnosticReportAddendumOf> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportAddendumOf, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for extends.
 * Related reports.
 * See http://hl7.org/fhir/StructureDefinition/diagnosticReport-extends
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportExtends
 */
export class DiagnosticReportExtends extends Message<DiagnosticReportExtends> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportExtends>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportExtends";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportExtends {
    return new DiagnosticReportExtends().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportExtends {
    return new DiagnosticReportExtends().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportExtends {
    return new DiagnosticReportExtends().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportExtends | PlainMessage<DiagnosticReportExtends> | undefined, b: DiagnosticReportExtends | PlainMessage<DiagnosticReportExtends> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportExtends, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Analysis.
 * Analysis.
 * See http://hl7.org/fhir/StructureDefinition/DiagnosticReport-geneticsAnalysis
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportAnalysis
 */
export class DiagnosticReportAnalysis extends Message<DiagnosticReportAnalysis> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Analysis type
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Analysis interpretation
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept interpretation = 5;
   */
  interpretation?: CodeableConcept;

  constructor(data?: PartialMessage<DiagnosticReportAnalysis>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportAnalysis";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "interpretation", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportAnalysis {
    return new DiagnosticReportAnalysis().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportAnalysis {
    return new DiagnosticReportAnalysis().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportAnalysis {
    return new DiagnosticReportAnalysis().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportAnalysis | PlainMessage<DiagnosticReportAnalysis> | undefined, b: DiagnosticReportAnalysis | PlainMessage<DiagnosticReportAnalysis> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportAnalysis, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AssessedCondition.
 * AssessedCondition.
 * See
 * http://hl7.org/fhir/StructureDefinition/DiagnosticReport-geneticsAssessedCondition
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportAssessedCondition
 */
export class DiagnosticReportAssessedCondition extends Message<DiagnosticReportAssessedCondition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportAssessedCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportAssessedCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportAssessedCondition {
    return new DiagnosticReportAssessedCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportAssessedCondition {
    return new DiagnosticReportAssessedCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportAssessedCondition {
    return new DiagnosticReportAssessedCondition().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportAssessedCondition | PlainMessage<DiagnosticReportAssessedCondition> | undefined, b: DiagnosticReportAssessedCondition | PlainMessage<DiagnosticReportAssessedCondition> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportAssessedCondition, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for FamilyMemberHistory.
 * FamilyHistory.
 * See
 * http://hl7.org/fhir/StructureDefinition/DiagnosticReport-geneticsFamilyMemberHistory
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory
 */
export class DiagnosticReportFamilyMemberHistory extends Message<DiagnosticReportFamilyMemberHistory> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportFamilyMemberHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportFamilyMemberHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportFamilyMemberHistory {
    return new DiagnosticReportFamilyMemberHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportFamilyMemberHistory {
    return new DiagnosticReportFamilyMemberHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportFamilyMemberHistory {
    return new DiagnosticReportFamilyMemberHistory().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportFamilyMemberHistory | PlainMessage<DiagnosticReportFamilyMemberHistory> | undefined, b: DiagnosticReportFamilyMemberHistory | PlainMessage<DiagnosticReportFamilyMemberHistory> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportFamilyMemberHistory, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for locationPerformed.
 * Location Performed.
 * See
 * http://hl7.org/fhir/StructureDefinition/diagnosticReport-locationPerformed
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportLocationPerformed
 */
export class DiagnosticReportLocationPerformed extends Message<DiagnosticReportLocationPerformed> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportLocationPerformed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportLocationPerformed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportLocationPerformed {
    return new DiagnosticReportLocationPerformed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportLocationPerformed {
    return new DiagnosticReportLocationPerformed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportLocationPerformed {
    return new DiagnosticReportLocationPerformed().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportLocationPerformed | PlainMessage<DiagnosticReportLocationPerformed> | undefined, b: DiagnosticReportLocationPerformed | PlainMessage<DiagnosticReportLocationPerformed> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportLocationPerformed, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for replaces.
 * Replacement for another report.
 * See http://hl7.org/fhir/StructureDefinition/diagnosticReport-replaces
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportReplaces
 */
export class DiagnosticReportReplaces extends Message<DiagnosticReportReplaces> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportReplaces>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportReplaces";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportReplaces {
    return new DiagnosticReportReplaces().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportReplaces {
    return new DiagnosticReportReplaces().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportReplaces {
    return new DiagnosticReportReplaces().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportReplaces | PlainMessage<DiagnosticReportReplaces> | undefined, b: DiagnosticReportReplaces | PlainMessage<DiagnosticReportReplaces> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportReplaces, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for summaryOf.
 * Summary Of Other Reports.
 * See http://hl7.org/fhir/StructureDefinition/diagnosticReport-summaryOf
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportSummaryOf
 */
export class DiagnosticReportSummaryOf extends Message<DiagnosticReportSummaryOf> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportSummaryOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportSummaryOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportSummaryOf {
    return new DiagnosticReportSummaryOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportSummaryOf {
    return new DiagnosticReportSummaryOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportSummaryOf {
    return new DiagnosticReportSummaryOf().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportSummaryOf | PlainMessage<DiagnosticReportSummaryOf> | undefined, b: DiagnosticReportSummaryOf | PlainMessage<DiagnosticReportSummaryOf> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportSummaryOf, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for allowedUnits.
 * Units to use for measured value.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-allowedUnits
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionAllowedUnits
 */
export class ElementDefinitionAllowedUnits extends Message<ElementDefinitionAllowedUnits> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value value = 3;
   */
  value?: ElementDefinitionAllowedUnits_Value;

  constructor(data?: PartialMessage<ElementDefinitionAllowedUnits>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionAllowedUnits";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ElementDefinitionAllowedUnits_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionAllowedUnits {
    return new ElementDefinitionAllowedUnits().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionAllowedUnits {
    return new ElementDefinitionAllowedUnits().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionAllowedUnits {
    return new ElementDefinitionAllowedUnits().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionAllowedUnits | PlainMessage<ElementDefinitionAllowedUnits> | undefined, b: ElementDefinitionAllowedUnits | PlainMessage<ElementDefinitionAllowedUnits> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionAllowedUnits, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value
 */
export class ElementDefinitionAllowedUnits_Value extends Message<ElementDefinitionAllowedUnits_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ElementDefinitionAllowedUnits_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionAllowedUnits.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "value" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionAllowedUnits_Value {
    return new ElementDefinitionAllowedUnits_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionAllowedUnits_Value {
    return new ElementDefinitionAllowedUnits_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionAllowedUnits_Value {
    return new ElementDefinitionAllowedUnits_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionAllowedUnits_Value | PlainMessage<ElementDefinitionAllowedUnits_Value> | undefined, b: ElementDefinitionAllowedUnits_Value | PlainMessage<ElementDefinitionAllowedUnits_Value> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionAllowedUnits_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for bestpractice.
 * Mark a warning invariant as 'best practice'.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-bestpractice
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionBestpractice
 */
export class ElementDefinitionBestpractice extends Message<ElementDefinitionBestpractice> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ElementDefinitionBestpractice.Value value = 3;
   */
  value?: ElementDefinitionBestpractice_Value;

  constructor(data?: PartialMessage<ElementDefinitionBestpractice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionBestpractice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ElementDefinitionBestpractice_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionBestpractice {
    return new ElementDefinitionBestpractice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionBestpractice {
    return new ElementDefinitionBestpractice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionBestpractice {
    return new ElementDefinitionBestpractice().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionBestpractice | PlainMessage<ElementDefinitionBestpractice> | undefined, b: ElementDefinitionBestpractice | PlainMessage<ElementDefinitionBestpractice> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionBestpractice, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionBestpractice.Value
 */
export class ElementDefinitionBestpractice_Value extends Message<ElementDefinitionBestpractice_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ElementDefinitionBestpractice.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Boolean boolean = 1;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ElementDefinitionBestpractice_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionBestpractice.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "message", T: Boolean, oneof: "value" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionBestpractice_Value {
    return new ElementDefinitionBestpractice_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionBestpractice_Value {
    return new ElementDefinitionBestpractice_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionBestpractice_Value {
    return new ElementDefinitionBestpractice_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionBestpractice_Value | PlainMessage<ElementDefinitionBestpractice_Value> | undefined, b: ElementDefinitionBestpractice_Value | PlainMessage<ElementDefinitionBestpractice_Value> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionBestpractice_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for bindingName.
 * Suggested Name for code generation.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-bindingName
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionBindingName
 */
export class ElementDefinitionBindingName extends Message<ElementDefinitionBindingName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionBindingName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionBindingName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionBindingName {
    return new ElementDefinitionBindingName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionBindingName {
    return new ElementDefinitionBindingName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionBindingName {
    return new ElementDefinitionBindingName().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionBindingName | PlainMessage<ElementDefinitionBindingName> | undefined, b: ElementDefinitionBindingName | PlainMessage<ElementDefinitionBindingName> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionBindingName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for equivalence.
 * equivalent | equal | wider | subsumes | narrower | specializes | inexact |
 * unmatched | disjoint. See
 * http://hl7.org/fhir/StructureDefinition/elementdefinition-equivalence
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionEquivalence
 */
export class ElementDefinitionEquivalence extends Message<ElementDefinitionEquivalence> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ConceptMapEquivalenceCode value_code = 3;
   */
  valueCode?: ConceptMapEquivalenceCode;

  constructor(data?: PartialMessage<ElementDefinitionEquivalence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionEquivalence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ConceptMapEquivalenceCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionEquivalence {
    return new ElementDefinitionEquivalence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionEquivalence {
    return new ElementDefinitionEquivalence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionEquivalence {
    return new ElementDefinitionEquivalence().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionEquivalence | PlainMessage<ElementDefinitionEquivalence> | undefined, b: ElementDefinitionEquivalence | PlainMessage<ElementDefinitionEquivalence> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionEquivalence, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for identifier.
 * External Identifier associated with this element.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-identifier
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionIdentifier
 */
export class ElementDefinitionIdentifier extends Message<ElementDefinitionIdentifier> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<ElementDefinitionIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionIdentifier {
    return new ElementDefinitionIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionIdentifier {
    return new ElementDefinitionIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionIdentifier {
    return new ElementDefinitionIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionIdentifier | PlainMessage<ElementDefinitionIdentifier> | undefined, b: ElementDefinitionIdentifier | PlainMessage<ElementDefinitionIdentifier> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionIdentifier, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for inheritedExtensibleValueSet.
 * An extensible Value Set specified in a parent profile.
 * See
 * http://hl7.org/fhir/StructureDefinition/elementdefinition-inheritedExtensibleValueSet
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet
 */
export class ElementDefinitionInheritedExtensibleValueSet extends Message<ElementDefinitionInheritedExtensibleValueSet> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value value = 3;
   */
  value?: ElementDefinitionInheritedExtensibleValueSet_Value;

  constructor(data?: PartialMessage<ElementDefinitionInheritedExtensibleValueSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ElementDefinitionInheritedExtensibleValueSet_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionInheritedExtensibleValueSet {
    return new ElementDefinitionInheritedExtensibleValueSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionInheritedExtensibleValueSet {
    return new ElementDefinitionInheritedExtensibleValueSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionInheritedExtensibleValueSet {
    return new ElementDefinitionInheritedExtensibleValueSet().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionInheritedExtensibleValueSet | PlainMessage<ElementDefinitionInheritedExtensibleValueSet> | undefined, b: ElementDefinitionInheritedExtensibleValueSet | PlainMessage<ElementDefinitionInheritedExtensibleValueSet> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionInheritedExtensibleValueSet, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value
 */
export class ElementDefinitionInheritedExtensibleValueSet_Value extends Message<ElementDefinitionInheritedExtensibleValueSet_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ElementDefinitionInheritedExtensibleValueSet_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionInheritedExtensibleValueSet.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "value" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionInheritedExtensibleValueSet_Value {
    return new ElementDefinitionInheritedExtensibleValueSet_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionInheritedExtensibleValueSet_Value {
    return new ElementDefinitionInheritedExtensibleValueSet_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionInheritedExtensibleValueSet_Value {
    return new ElementDefinitionInheritedExtensibleValueSet_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionInheritedExtensibleValueSet_Value | PlainMessage<ElementDefinitionInheritedExtensibleValueSet_Value> | undefined, b: ElementDefinitionInheritedExtensibleValueSet_Value | PlainMessage<ElementDefinitionInheritedExtensibleValueSet_Value> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionInheritedExtensibleValueSet_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for isCommonBinding.
 * Whether used on multiple resources.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-isCommonBinding
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionIsCommonBinding
 */
export class ElementDefinitionIsCommonBinding extends Message<ElementDefinitionIsCommonBinding> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<ElementDefinitionIsCommonBinding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionIsCommonBinding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionIsCommonBinding {
    return new ElementDefinitionIsCommonBinding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionIsCommonBinding {
    return new ElementDefinitionIsCommonBinding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionIsCommonBinding {
    return new ElementDefinitionIsCommonBinding().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionIsCommonBinding | PlainMessage<ElementDefinitionIsCommonBinding> | undefined, b: ElementDefinitionIsCommonBinding | PlainMessage<ElementDefinitionIsCommonBinding> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionIsCommonBinding, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxValueSet.
 * Maximum Value Set (when strength = extensible).
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-maxValueSet
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionMaxValueSet
 */
export class ElementDefinitionMaxValueSet extends Message<ElementDefinitionMaxValueSet> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value value = 3;
   */
  value?: ElementDefinitionMaxValueSet_Value;

  constructor(data?: PartialMessage<ElementDefinitionMaxValueSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionMaxValueSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ElementDefinitionMaxValueSet_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionMaxValueSet {
    return new ElementDefinitionMaxValueSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionMaxValueSet {
    return new ElementDefinitionMaxValueSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionMaxValueSet {
    return new ElementDefinitionMaxValueSet().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionMaxValueSet | PlainMessage<ElementDefinitionMaxValueSet> | undefined, b: ElementDefinitionMaxValueSet | PlainMessage<ElementDefinitionMaxValueSet> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionMaxValueSet, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value
 */
export class ElementDefinitionMaxValueSet_Value extends Message<ElementDefinitionMaxValueSet_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ElementDefinitionMaxValueSet_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionMaxValueSet.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "value" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionMaxValueSet_Value {
    return new ElementDefinitionMaxValueSet_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionMaxValueSet_Value {
    return new ElementDefinitionMaxValueSet_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionMaxValueSet_Value {
    return new ElementDefinitionMaxValueSet_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionMaxValueSet_Value | PlainMessage<ElementDefinitionMaxValueSet_Value> | undefined, b: ElementDefinitionMaxValueSet_Value | PlainMessage<ElementDefinitionMaxValueSet_Value> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionMaxValueSet_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for minValueSet.
 * Minimum Value Set (what system must support).
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-minValueSet
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionMinValueSet
 */
export class ElementDefinitionMinValueSet extends Message<ElementDefinitionMinValueSet> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value value = 3;
   */
  value?: ElementDefinitionMinValueSet_Value;

  constructor(data?: PartialMessage<ElementDefinitionMinValueSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionMinValueSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ElementDefinitionMinValueSet_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionMinValueSet {
    return new ElementDefinitionMinValueSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionMinValueSet {
    return new ElementDefinitionMinValueSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionMinValueSet {
    return new ElementDefinitionMinValueSet().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionMinValueSet | PlainMessage<ElementDefinitionMinValueSet> | undefined, b: ElementDefinitionMinValueSet | PlainMessage<ElementDefinitionMinValueSet> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionMinValueSet, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value
 */
export class ElementDefinitionMinValueSet_Value extends Message<ElementDefinitionMinValueSet_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ElementDefinitionMinValueSet_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionMinValueSet.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "value" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionMinValueSet_Value {
    return new ElementDefinitionMinValueSet_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionMinValueSet_Value {
    return new ElementDefinitionMinValueSet_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionMinValueSet_Value {
    return new ElementDefinitionMinValueSet_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionMinValueSet_Value | PlainMessage<ElementDefinitionMinValueSet_Value> | undefined, b: ElementDefinitionMinValueSet_Value | PlainMessage<ElementDefinitionMinValueSet_Value> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionMinValueSet_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for namespace.
 * specifiy namespace other than http://hl7.org/fhir.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-namespace
 *
 * @generated from message google.fhir.stu3.proto.Namespace
 */
export class Namespace extends Message<Namespace> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<Namespace>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Namespace";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Namespace {
    return new Namespace().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Namespace {
    return new Namespace().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Namespace {
    return new Namespace().fromJsonString(jsonString, options);
  }

  static equals(a: Namespace | PlainMessage<Namespace> | undefined, b: Namespace | PlainMessage<Namespace> | undefined): boolean {
    return proto3.util.equals(Namespace, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for question.
 * Prompt for element phrased as question.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-question
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionQuestion
 */
export class ElementDefinitionQuestion extends Message<ElementDefinitionQuestion> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionQuestion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionQuestion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionQuestion {
    return new ElementDefinitionQuestion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionQuestion {
    return new ElementDefinitionQuestion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionQuestion {
    return new ElementDefinitionQuestion().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionQuestion | PlainMessage<ElementDefinitionQuestion> | undefined, b: ElementDefinitionQuestion | PlainMessage<ElementDefinitionQuestion> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionQuestion, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for selector.
 * FHIRPath that defines the selection criteria for a slice.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-selector
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionSelector
 */
export class ElementDefinitionSelector extends Message<ElementDefinitionSelector> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionSelector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionSelector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionSelector {
    return new ElementDefinitionSelector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionSelector {
    return new ElementDefinitionSelector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionSelector {
    return new ElementDefinitionSelector().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionSelector | PlainMessage<ElementDefinitionSelector> | undefined, b: ElementDefinitionSelector | PlainMessage<ElementDefinitionSelector> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionSelector, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for translatable.
 * Whether translations apply to this element.
 * See http://hl7.org/fhir/StructureDefinition/elementdefinition-translatable
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionTranslatable
 */
export class ElementDefinitionTranslatable extends Message<ElementDefinitionTranslatable> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<ElementDefinitionTranslatable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionTranslatable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionTranslatable {
    return new ElementDefinitionTranslatable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionTranslatable {
    return new ElementDefinitionTranslatable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionTranslatable {
    return new ElementDefinitionTranslatable().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionTranslatable | PlainMessage<ElementDefinitionTranslatable> | undefined, b: ElementDefinitionTranslatable | PlainMessage<ElementDefinitionTranslatable> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionTranslatable, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for associatedEncounter.
 * Associated Encounter.
 * See http://hl7.org/fhir/StructureDefinition/encounter-associatedEncounter
 *
 * @generated from message google.fhir.stu3.proto.EncounterAssociatedEncounter
 */
export class EncounterAssociatedEncounter extends Message<EncounterAssociatedEncounter> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<EncounterAssociatedEncounter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EncounterAssociatedEncounter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncounterAssociatedEncounter {
    return new EncounterAssociatedEncounter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncounterAssociatedEncounter {
    return new EncounterAssociatedEncounter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncounterAssociatedEncounter {
    return new EncounterAssociatedEncounter().fromJsonString(jsonString, options);
  }

  static equals(a: EncounterAssociatedEncounter | PlainMessage<EncounterAssociatedEncounter> | undefined, b: EncounterAssociatedEncounter | PlainMessage<EncounterAssociatedEncounter> | undefined): boolean {
    return proto3.util.equals(EncounterAssociatedEncounter, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for modeOfArrival.
 * The method of arrival of the patient into the facility.
 * See http://hl7.org/fhir/StructureDefinition/encounter-modeOfArrival
 *
 * @generated from message google.fhir.stu3.proto.EncounterModeOfArrival
 */
export class EncounterModeOfArrival extends Message<EncounterModeOfArrival> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<EncounterModeOfArrival>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EncounterModeOfArrival";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncounterModeOfArrival {
    return new EncounterModeOfArrival().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncounterModeOfArrival {
    return new EncounterModeOfArrival().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncounterModeOfArrival {
    return new EncounterModeOfArrival().fromJsonString(jsonString, options);
  }

  static equals(a: EncounterModeOfArrival | PlainMessage<EncounterModeOfArrival> | undefined, b: EncounterModeOfArrival | PlainMessage<EncounterModeOfArrival> | undefined): boolean {
    return proto3.util.equals(EncounterModeOfArrival, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for primaryDiagnosis.
 * Primary Diagnosis of this encounter (priority order - 1 = highest).
 * See http://hl7.org/fhir/StructureDefinition/encounter-primaryDiagnosis
 *
 * @generated from message google.fhir.stu3.proto.EncounterPrimaryDiagnosis
 */
export class EncounterPrimaryDiagnosis extends Message<EncounterPrimaryDiagnosis> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.PositiveInt value_positive_int = 3;
   */
  valuePositiveInt?: PositiveInt;

  constructor(data?: PartialMessage<EncounterPrimaryDiagnosis>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EncounterPrimaryDiagnosis";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_positive_int", kind: "message", T: PositiveInt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncounterPrimaryDiagnosis {
    return new EncounterPrimaryDiagnosis().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncounterPrimaryDiagnosis {
    return new EncounterPrimaryDiagnosis().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncounterPrimaryDiagnosis {
    return new EncounterPrimaryDiagnosis().fromJsonString(jsonString, options);
  }

  static equals(a: EncounterPrimaryDiagnosis | PlainMessage<EncounterPrimaryDiagnosis> | undefined, b: EncounterPrimaryDiagnosis | PlainMessage<EncounterPrimaryDiagnosis> | undefined): boolean {
    return proto3.util.equals(EncounterPrimaryDiagnosis, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonCancelled.
 * Explanation for cancellation.
 * See http://hl7.org/fhir/StructureDefinition/encounter-reasonCancelled
 *
 * @generated from message google.fhir.stu3.proto.EncounterReasonCancelled
 */
export class EncounterReasonCancelled extends Message<EncounterReasonCancelled> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<EncounterReasonCancelled>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EncounterReasonCancelled";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EncounterReasonCancelled {
    return new EncounterReasonCancelled().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EncounterReasonCancelled {
    return new EncounterReasonCancelled().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EncounterReasonCancelled {
    return new EncounterReasonCancelled().fromJsonString(jsonString, options);
  }

  static equals(a: EncounterReasonCancelled | PlainMessage<EncounterReasonCancelled> | undefined, b: EncounterReasonCancelled | PlainMessage<EncounterReasonCancelled> | undefined): boolean {
    return proto3.util.equals(EncounterReasonCancelled, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for entryFormat.
 * User prompt for format.
 * See http://hl7.org/fhir/StructureDefinition/entryFormat
 *
 * @generated from message google.fhir.stu3.proto.EntryFormat
 */
export class EntryFormat extends Message<EntryFormat> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<EntryFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EntryFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntryFormat {
    return new EntryFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntryFormat {
    return new EntryFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntryFormat {
    return new EntryFormat().fromJsonString(jsonString, options);
  }

  static equals(a: EntryFormat | PlainMessage<EntryFormat> | undefined, b: EntryFormat | PlainMessage<EntryFormat> | undefined): boolean {
    return proto3.util.equals(EntryFormat, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for definition.
 * Instantiates protocol or definition.
 * See http://hl7.org/fhir/StructureDefinition/event-definition
 *
 * @generated from message google.fhir.stu3.proto.Definition
 */
export class Definition extends Message<Definition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.Definition.Value value = 3;
   */
  value?: Definition_Value;

  constructor(data?: PartialMessage<Definition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Definition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: Definition_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Definition {
    return new Definition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Definition {
    return new Definition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Definition {
    return new Definition().fromJsonString(jsonString, options);
  }

  static equals(a: Definition | PlainMessage<Definition> | undefined, b: Definition | PlainMessage<Definition> | undefined): boolean {
    return proto3.util.equals(Definition, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.Definition.Value
 */
export class Definition_Value extends Message<Definition_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Definition.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Definition_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Definition.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Definition_Value {
    return new Definition_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Definition_Value {
    return new Definition_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Definition_Value {
    return new Definition_Value().fromJsonString(jsonString, options);
  }

  static equals(a: Definition_Value | PlainMessage<Definition_Value> | undefined, b: Definition_Value | PlainMessage<Definition_Value> | undefined): boolean {
    return proto3.util.equals(Definition_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for notDone.
 * Event did not occur.
 * See http://hl7.org/fhir/StructureDefinition/event-notDone
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportNotDone
 */
export class DiagnosticReportNotDone extends Message<DiagnosticReportNotDone> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<DiagnosticReportNotDone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportNotDone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportNotDone {
    return new DiagnosticReportNotDone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportNotDone {
    return new DiagnosticReportNotDone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportNotDone {
    return new DiagnosticReportNotDone().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportNotDone | PlainMessage<DiagnosticReportNotDone> | undefined, b: DiagnosticReportNotDone | PlainMessage<DiagnosticReportNotDone> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportNotDone, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for OnBehalfOf.
 * Organization was acting for.
 * See http://hl7.org/fhir/StructureDefinition/event-OnBehalfOf
 *
 * @generated from message google.fhir.stu3.proto.OnBehalfOf
 */
export class OnBehalfOf extends Message<OnBehalfOf> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<OnBehalfOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OnBehalfOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OnBehalfOf {
    return new OnBehalfOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OnBehalfOf {
    return new OnBehalfOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OnBehalfOf {
    return new OnBehalfOf().fromJsonString(jsonString, options);
  }

  static equals(a: OnBehalfOf | PlainMessage<OnBehalfOf> | undefined, b: OnBehalfOf | PlainMessage<OnBehalfOf> | undefined): boolean {
    return proto3.util.equals(OnBehalfOf, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for partOf.
 * Part of referenced event.
 * See http://hl7.org/fhir/StructureDefinition/event-partOf
 *
 * @generated from message google.fhir.stu3.proto.PartOf
 */
export class PartOf extends Message<PartOf> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<PartOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PartOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PartOf {
    return new PartOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PartOf {
    return new PartOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PartOf {
    return new PartOf().fromJsonString(jsonString, options);
  }

  static equals(a: PartOf | PlainMessage<PartOf> | undefined, b: PartOf | PlainMessage<PartOf> | undefined): boolean {
    return proto3.util.equals(PartOf, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for performerRole.
 * What type of performance was done.
 * See http://hl7.org/fhir/StructureDefinition/event-performerRole
 *
 * @generated from message google.fhir.stu3.proto.ObservationPerformerRole
 */
export class ObservationPerformerRole extends Message<ObservationPerformerRole> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationPerformerRole>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationPerformerRole";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationPerformerRole {
    return new ObservationPerformerRole().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationPerformerRole {
    return new ObservationPerformerRole().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationPerformerRole {
    return new ObservationPerformerRole().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationPerformerRole | PlainMessage<ObservationPerformerRole> | undefined, b: ObservationPerformerRole | PlainMessage<ObservationPerformerRole> | undefined): boolean {
    return proto3.util.equals(ObservationPerformerRole, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonCode.
 * Why was event performed?.
 * See http://hl7.org/fhir/StructureDefinition/event-reasonCode
 *
 * @generated from message google.fhir.stu3.proto.ReasonCode
 */
export class ReasonCode extends Message<ReasonCode> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ReasonCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ReasonCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReasonCode {
    return new ReasonCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReasonCode {
    return new ReasonCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReasonCode {
    return new ReasonCode().fromJsonString(jsonString, options);
  }

  static equals(a: ReasonCode | PlainMessage<ReasonCode> | undefined, b: ReasonCode | PlainMessage<ReasonCode> | undefined): boolean {
    return proto3.util.equals(ReasonCode, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonReference.
 * Why was event performed?.
 * See http://hl7.org/fhir/StructureDefinition/event-reasonReference
 *
 * @generated from message google.fhir.stu3.proto.ReasonReference
 */
export class ReasonReference extends Message<ReasonReference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ReasonReference.Value value = 3;
   */
  value?: ReasonReference_Value;

  constructor(data?: PartialMessage<ReasonReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ReasonReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ReasonReference_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReasonReference {
    return new ReasonReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReasonReference {
    return new ReasonReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReasonReference {
    return new ReasonReference().fromJsonString(jsonString, options);
  }

  static equals(a: ReasonReference | PlainMessage<ReasonReference> | undefined, b: ReasonReference | PlainMessage<ReasonReference> | undefined): boolean {
    return proto3.util.equals(ReasonReference, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ReasonReference.Value
 */
export class ReasonReference_Value extends Message<ReasonReference_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ReasonReference.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ReasonReference_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ReasonReference.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReasonReference_Value {
    return new ReasonReference_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReasonReference_Value {
    return new ReasonReference_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReasonReference_Value {
    return new ReasonReference_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ReasonReference_Value | PlainMessage<ReasonReference_Value> | undefined, b: ReasonReference_Value | PlainMessage<ReasonReference_Value> | undefined): boolean {
    return proto3.util.equals(ReasonReference_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for observation.
 * Genetic markers, ethnicity, etc.
 * See
 * http://hl7.org/fhir/StructureDefinition/family-member-history-genetics-observation
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistoryObservation
 */
export class FamilyMemberHistoryObservation extends Message<FamilyMemberHistoryObservation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<FamilyMemberHistoryObservation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistoryObservation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistoryObservation {
    return new FamilyMemberHistoryObservation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistoryObservation {
    return new FamilyMemberHistoryObservation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistoryObservation {
    return new FamilyMemberHistoryObservation().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistoryObservation | PlainMessage<FamilyMemberHistoryObservation> | undefined, b: FamilyMemberHistoryObservation | PlainMessage<FamilyMemberHistoryObservation> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistoryObservation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for parent.
 * Mother(s) & Father(s) - genetic & other.
 * See
 * http://hl7.org/fhir/StructureDefinition/family-member-history-genetics-parent
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistoryParent
 */
export class FamilyMemberHistoryParent extends Message<FamilyMemberHistoryParent> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * mother | father | adoptive mother | etc.
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Link to parent relative(s)
   *
   * @generated from field: google.fhir.stu3.proto.Reference reference = 5;
   */
  reference?: Reference;

  constructor(data?: PartialMessage<FamilyMemberHistoryParent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistoryParent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistoryParent {
    return new FamilyMemberHistoryParent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistoryParent {
    return new FamilyMemberHistoryParent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistoryParent {
    return new FamilyMemberHistoryParent().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistoryParent | PlainMessage<FamilyMemberHistoryParent> | undefined, b: FamilyMemberHistoryParent | PlainMessage<FamilyMemberHistoryParent> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistoryParent, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sibling.
 * natural brother(s) & natural sister(s) - genetic & other.
 * See
 * http://hl7.org/fhir/StructureDefinition/family-member-history-genetics-sibling
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistorySibling
 */
export class FamilyMemberHistorySibling extends Message<FamilyMemberHistorySibling> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * sibling | brother | sister | etc.
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Link to sibling relative(s)
   *
   * @generated from field: google.fhir.stu3.proto.Reference reference = 5;
   */
  reference?: Reference;

  constructor(data?: PartialMessage<FamilyMemberHistorySibling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistorySibling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistorySibling {
    return new FamilyMemberHistorySibling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistorySibling {
    return new FamilyMemberHistorySibling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistorySibling {
    return new FamilyMemberHistorySibling().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistorySibling | PlainMessage<FamilyMemberHistorySibling> | undefined, b: FamilyMemberHistorySibling | PlainMessage<FamilyMemberHistorySibling> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistorySibling, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for abatement.
 * When (or if) the family member's condition resolved.
 * See http://hl7.org/fhir/StructureDefinition/familymemberhistory-abatement
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistoryAbatement
 */
export class FamilyMemberHistoryAbatement extends Message<FamilyMemberHistoryAbatement> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value value = 3;
   */
  value?: FamilyMemberHistoryAbatement_Value;

  constructor(data?: PartialMessage<FamilyMemberHistoryAbatement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistoryAbatement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: FamilyMemberHistoryAbatement_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistoryAbatement {
    return new FamilyMemberHistoryAbatement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistoryAbatement {
    return new FamilyMemberHistoryAbatement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistoryAbatement {
    return new FamilyMemberHistoryAbatement().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistoryAbatement | PlainMessage<FamilyMemberHistoryAbatement> | undefined, b: FamilyMemberHistoryAbatement | PlainMessage<FamilyMemberHistoryAbatement> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistoryAbatement, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value
 */
export class FamilyMemberHistoryAbatement_Value extends Message<FamilyMemberHistoryAbatement_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Age age = 2;
     */
    value: Age;
    case: "age";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Boolean boolean = 3;
     */
    value: Boolean;
    case: "boolean";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FamilyMemberHistoryAbatement_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistoryAbatement.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "value" },
    { no: 2, name: "age", kind: "message", T: Age, oneof: "value" },
    { no: 3, name: "boolean", kind: "message", T: Boolean, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistoryAbatement_Value {
    return new FamilyMemberHistoryAbatement_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistoryAbatement_Value {
    return new FamilyMemberHistoryAbatement_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistoryAbatement_Value {
    return new FamilyMemberHistoryAbatement_Value().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistoryAbatement_Value | PlainMessage<FamilyMemberHistoryAbatement_Value> | undefined, b: FamilyMemberHistoryAbatement_Value | PlainMessage<FamilyMemberHistoryAbatement_Value> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistoryAbatement_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for patient-record.
 * Link to patient record.
 * See
 * http://hl7.org/fhir/StructureDefinition/familymemberhistory-patient-record
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord
 */
export class FamilyMemberHistoryPatientRecord extends Message<FamilyMemberHistoryPatientRecord> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<FamilyMemberHistoryPatientRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistoryPatientRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistoryPatientRecord {
    return new FamilyMemberHistoryPatientRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistoryPatientRecord {
    return new FamilyMemberHistoryPatientRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistoryPatientRecord {
    return new FamilyMemberHistoryPatientRecord().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistoryPatientRecord | PlainMessage<FamilyMemberHistoryPatientRecord> | undefined, b: FamilyMemberHistoryPatientRecord | PlainMessage<FamilyMemberHistoryPatientRecord> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistoryPatientRecord, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for severity.
 * The seriousness of the family member condition.
 * See http://hl7.org/fhir/StructureDefinition/familymemberhistory-severity
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistorySeverity
 */
export class FamilyMemberHistorySeverity extends Message<FamilyMemberHistorySeverity> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<FamilyMemberHistorySeverity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistorySeverity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistorySeverity {
    return new FamilyMemberHistorySeverity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistorySeverity {
    return new FamilyMemberHistorySeverity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistorySeverity {
    return new FamilyMemberHistorySeverity().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistorySeverity | PlainMessage<FamilyMemberHistorySeverity> | undefined, b: FamilyMemberHistorySeverity | PlainMessage<FamilyMemberHistorySeverity> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistorySeverity, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for type.
 * Purpose of the family member history.
 * See http://hl7.org/fhir/StructureDefinition/familymemberhistory-type
 *
 * @generated from message google.fhir.stu3.proto.FamilyMemberHistoryType
 */
export class FamilyMemberHistoryType extends Message<FamilyMemberHistoryType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<FamilyMemberHistoryType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FamilyMemberHistoryType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FamilyMemberHistoryType {
    return new FamilyMemberHistoryType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FamilyMemberHistoryType {
    return new FamilyMemberHistoryType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FamilyMemberHistoryType {
    return new FamilyMemberHistoryType().fromJsonString(jsonString, options);
  }

  static equals(a: FamilyMemberHistoryType | PlainMessage<FamilyMemberHistoryType> | undefined, b: FamilyMemberHistoryType | PlainMessage<FamilyMemberHistoryType> | undefined): boolean {
    return proto3.util.equals(FamilyMemberHistoryType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for detail.
 * Resource with details for flag.
 * See http://hl7.org/fhir/StructureDefinition/flag-detail
 *
 * @generated from message google.fhir.stu3.proto.FlagDetail
 */
export class FlagDetail extends Message<FlagDetail> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<FlagDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FlagDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlagDetail {
    return new FlagDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlagDetail {
    return new FlagDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlagDetail {
    return new FlagDetail().fromJsonString(jsonString, options);
  }

  static equals(a: FlagDetail | PlainMessage<FlagDetail> | undefined, b: FlagDetail | PlainMessage<FlagDetail> | undefined): boolean {
    return proto3.util.equals(FlagDetail, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for priority.
 * An alarm code.
 * See http://hl7.org/fhir/StructureDefinition/flag-priority
 *
 * @generated from message google.fhir.stu3.proto.FlagPriority
 */
export class FlagPriority extends Message<FlagPriority> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<FlagPriority>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.FlagPriority";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FlagPriority {
    return new FlagPriority().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FlagPriority {
    return new FlagPriority().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FlagPriority {
    return new FlagPriority().fromJsonString(jsonString, options);
  }

  static equals(a: FlagPriority | PlainMessage<FlagPriority> | undefined, b: FlagPriority | PlainMessage<FlagPriority> | undefined): boolean {
    return proto3.util.equals(FlagPriority, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Geolocation.
 * The absolute geographic location.
 * See http://hl7.org/fhir/StructureDefinition/geolocation
 *
 * @generated from message google.fhir.stu3.proto.AddressGeolocation
 */
export class AddressGeolocation extends Message<AddressGeolocation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Latitude with WGS84 datum
   *
   * @generated from field: google.fhir.stu3.proto.Decimal latitude = 4;
   */
  latitude?: Decimal;

  /**
   * Longitude with WGS84 datum
   *
   * @generated from field: google.fhir.stu3.proto.Decimal longitude = 5;
   */
  longitude?: Decimal;

  constructor(data?: PartialMessage<AddressGeolocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressGeolocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "latitude", kind: "message", T: Decimal },
    { no: 5, name: "longitude", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressGeolocation {
    return new AddressGeolocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressGeolocation {
    return new AddressGeolocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressGeolocation {
    return new AddressGeolocation().fromJsonString(jsonString, options);
  }

  static equals(a: AddressGeolocation | PlainMessage<AddressGeolocation> | undefined, b: AddressGeolocation | PlainMessage<AddressGeolocation> | undefined): boolean {
    return proto3.util.equals(AddressGeolocation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for acceptance.
 * Individual acceptance of goal.
 * See http://hl7.org/fhir/StructureDefinition/goal-acceptance
 *
 * @generated from message google.fhir.stu3.proto.GoalAcceptance
 */
export class GoalAcceptance extends Message<GoalAcceptance> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Individual whose acceptance is reflected
   *
   * @generated from field: google.fhir.stu3.proto.Reference individual = 4;
   */
  individual?: Reference;

  /**
   * agree | disagree | pending
   *
   * @generated from field: google.fhir.stu3.proto.GoalAcceptanceStatusCode status = 5;
   */
  status?: GoalAcceptanceStatusCode;

  /**
   * Priority of goal for individual
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept priority = 6;
   */
  priority?: CodeableConcept;

  constructor(data?: PartialMessage<GoalAcceptance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.GoalAcceptance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "individual", kind: "message", T: Reference },
    { no: 5, name: "status", kind: "message", T: GoalAcceptanceStatusCode },
    { no: 6, name: "priority", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalAcceptance {
    return new GoalAcceptance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalAcceptance {
    return new GoalAcceptance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalAcceptance {
    return new GoalAcceptance().fromJsonString(jsonString, options);
  }

  static equals(a: GoalAcceptance | PlainMessage<GoalAcceptance> | undefined, b: GoalAcceptance | PlainMessage<GoalAcceptance> | undefined): boolean {
    return proto3.util.equals(GoalAcceptance, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for pertainsToGoal.
 * Pertains to goal.
 * See http://hl7.org/fhir/StructureDefinition/goal-pertainsToGoal
 *
 * @generated from message google.fhir.stu3.proto.ResourcePertainsToGoal
 */
export class ResourcePertainsToGoal extends Message<ResourcePertainsToGoal> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ResourcePertainsToGoal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ResourcePertainsToGoal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourcePertainsToGoal {
    return new ResourcePertainsToGoal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourcePertainsToGoal {
    return new ResourcePertainsToGoal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourcePertainsToGoal {
    return new ResourcePertainsToGoal().fromJsonString(jsonString, options);
  }

  static equals(a: ResourcePertainsToGoal | PlainMessage<ResourcePertainsToGoal> | undefined, b: ResourcePertainsToGoal | PlainMessage<ResourcePertainsToGoal> | undefined): boolean {
    return proto3.util.equals(ResourcePertainsToGoal, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRejected.
 * The reason the goal was not accepted.
 * See http://hl7.org/fhir/StructureDefinition/goal-reasonRejected
 *
 * @generated from message google.fhir.stu3.proto.GoalReasonRejected
 */
export class GoalReasonRejected extends Message<GoalReasonRejected> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<GoalReasonRejected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.GoalReasonRejected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalReasonRejected {
    return new GoalReasonRejected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalReasonRejected {
    return new GoalReasonRejected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalReasonRejected {
    return new GoalReasonRejected().fromJsonString(jsonString, options);
  }

  static equals(a: GoalReasonRejected | PlainMessage<GoalReasonRejected> | undefined, b: GoalReasonRejected | PlainMessage<GoalReasonRejected> | undefined): boolean {
    return proto3.util.equals(GoalReasonRejected, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for relationship.
 * Goals related to this Goal.
 * See http://hl7.org/fhir/StructureDefinition/goal-relationship
 *
 * @generated from message google.fhir.stu3.proto.GoalRelationship
 */
export class GoalRelationship extends Message<GoalRelationship> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * predecessor | successor | replacement | other
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Related goal
   *
   * @generated from field: google.fhir.stu3.proto.Reference target = 5;
   */
  target?: Reference;

  constructor(data?: PartialMessage<GoalRelationship>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.GoalRelationship";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "target", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoalRelationship {
    return new GoalRelationship().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoalRelationship {
    return new GoalRelationship().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoalRelationship {
    return new GoalRelationship().fromJsonString(jsonString, options);
  }

  static equals(a: GoalRelationship | PlainMessage<GoalRelationship> | undefined, b: GoalRelationship | PlainMessage<GoalRelationship> | undefined): boolean {
    return proto3.util.equals(GoalRelationship, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for allele-database.
 * Allele Database.
 * See
 * http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-allele-database
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportAlleleDatabase
 */
export class DiagnosticReportAlleleDatabase extends Message<DiagnosticReportAlleleDatabase> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<DiagnosticReportAlleleDatabase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportAlleleDatabase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportAlleleDatabase {
    return new DiagnosticReportAlleleDatabase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportAlleleDatabase {
    return new DiagnosticReportAlleleDatabase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportAlleleDatabase {
    return new DiagnosticReportAlleleDatabase().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportAlleleDatabase | PlainMessage<DiagnosticReportAlleleDatabase> | undefined, b: DiagnosticReportAlleleDatabase | PlainMessage<DiagnosticReportAlleleDatabase> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportAlleleDatabase, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for glstring.
 * glstring.
 * See http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-glstring
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportGlstring
 */
export class DiagnosticReportGlstring extends Message<DiagnosticReportGlstring> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * glstring.url
   *
   * @generated from field: google.fhir.stu3.proto.Uri url = 4;
   */
  url?: Uri;

  /**
   * glstring.text
   *
   * @generated from field: google.fhir.stu3.proto.String text = 5;
   */
  text?: String;

  constructor(data?: PartialMessage<DiagnosticReportGlstring>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportGlstring";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "url", kind: "message", T: Uri },
    { no: 5, name: "text", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportGlstring {
    return new DiagnosticReportGlstring().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportGlstring {
    return new DiagnosticReportGlstring().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportGlstring {
    return new DiagnosticReportGlstring().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportGlstring | PlainMessage<DiagnosticReportGlstring> | undefined, b: DiagnosticReportGlstring | PlainMessage<DiagnosticReportGlstring> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportGlstring, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for haploid.
 * haploid.
 * See http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-haploid
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportHaploid
 */
export class DiagnosticReportHaploid extends Message<DiagnosticReportHaploid> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * haploid-locus
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept locus = 4;
   */
  locus?: CodeableConcept;

  /**
   * haploid-type
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * haploid-method
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept method = 6;
   */
  method?: CodeableConcept;

  constructor(data?: PartialMessage<DiagnosticReportHaploid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportHaploid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "locus", kind: "message", T: CodeableConcept },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "method", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportHaploid {
    return new DiagnosticReportHaploid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportHaploid {
    return new DiagnosticReportHaploid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportHaploid {
    return new DiagnosticReportHaploid().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportHaploid | PlainMessage<DiagnosticReportHaploid> | undefined, b: DiagnosticReportHaploid | PlainMessage<DiagnosticReportHaploid> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportHaploid, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for method.
 * The platform, methodology and software applied at the time of the
 * genotyping.
 * See http://hl7.org/fhir/StructureDefinition/hla-genotyping-results-method
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportMethod
 */
export class DiagnosticReportMethod extends Message<DiagnosticReportMethod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<DiagnosticReportMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportMethod {
    return new DiagnosticReportMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportMethod {
    return new DiagnosticReportMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportMethod {
    return new DiagnosticReportMethod().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportMethod | PlainMessage<DiagnosticReportMethod> | undefined, b: DiagnosticReportMethod | PlainMessage<DiagnosticReportMethod> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportMethod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for http-response-header.
 * HTTP header returned by the interaction.
 * See http://hl7.org/fhir/StructureDefinition/http-response-header
 *
 * @generated from message google.fhir.stu3.proto.BundleHttpResponseHeader
 */
export class BundleHttpResponseHeader extends Message<BundleHttpResponseHeader> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<BundleHttpResponseHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BundleHttpResponseHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BundleHttpResponseHeader {
    return new BundleHttpResponseHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BundleHttpResponseHeader {
    return new BundleHttpResponseHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BundleHttpResponseHeader {
    return new BundleHttpResponseHeader().fromJsonString(jsonString, options);
  }

  static equals(a: BundleHttpResponseHeader | PlainMessage<BundleHttpResponseHeader> | undefined, b: BundleHttpResponseHeader | PlainMessage<BundleHttpResponseHeader> | undefined): boolean {
    return proto3.util.equals(BundleHttpResponseHeader, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for assembly-order.
 * Preferred display order of name parts.
 * See http://hl7.org/fhir/StructureDefinition/humanname-assembly-order
 *
 * @generated from message google.fhir.stu3.proto.HumanNameAssemblyOrder
 */
export class HumanNameAssemblyOrder extends Message<HumanNameAssemblyOrder> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.HumanNameAssemblyOrderCode value_code = 3;
   */
  valueCode?: HumanNameAssemblyOrderCode;

  constructor(data?: PartialMessage<HumanNameAssemblyOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameAssemblyOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: HumanNameAssemblyOrderCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameAssemblyOrder {
    return new HumanNameAssemblyOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameAssemblyOrder {
    return new HumanNameAssemblyOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameAssemblyOrder {
    return new HumanNameAssemblyOrder().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameAssemblyOrder | PlainMessage<HumanNameAssemblyOrder> | undefined, b: HumanNameAssemblyOrder | PlainMessage<HumanNameAssemblyOrder> | undefined): boolean {
    return proto3.util.equals(HumanNameAssemblyOrder, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for fathers-family.
 * Portion of family name derived from father.
 * See http://hl7.org/fhir/StructureDefinition/humanname-fathers-family
 *
 * @generated from message google.fhir.stu3.proto.HumanNameFathersFamily
 */
export class HumanNameFathersFamily extends Message<HumanNameFathersFamily> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<HumanNameFathersFamily>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameFathersFamily";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameFathersFamily {
    return new HumanNameFathersFamily().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameFathersFamily {
    return new HumanNameFathersFamily().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameFathersFamily {
    return new HumanNameFathersFamily().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameFathersFamily | PlainMessage<HumanNameFathersFamily> | undefined, b: HumanNameFathersFamily | PlainMessage<HumanNameFathersFamily> | undefined): boolean {
    return proto3.util.equals(HumanNameFathersFamily, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for mothers-family.
 * Portion of family name derived from mother.
 * See http://hl7.org/fhir/StructureDefinition/humanname-mothers-family
 *
 * @generated from message google.fhir.stu3.proto.HumanNameMothersFamily
 */
export class HumanNameMothersFamily extends Message<HumanNameMothersFamily> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<HumanNameMothersFamily>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameMothersFamily";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameMothersFamily {
    return new HumanNameMothersFamily().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameMothersFamily {
    return new HumanNameMothersFamily().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameMothersFamily {
    return new HumanNameMothersFamily().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameMothersFamily | PlainMessage<HumanNameMothersFamily> | undefined, b: HumanNameMothersFamily | PlainMessage<HumanNameMothersFamily> | undefined): boolean {
    return proto3.util.equals(HumanNameMothersFamily, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for own-name.
 * Portion derived from person's own surname.
 * See http://hl7.org/fhir/StructureDefinition/humanname-own-name
 *
 * @generated from message google.fhir.stu3.proto.HumanNameOwnName
 */
export class HumanNameOwnName extends Message<HumanNameOwnName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<HumanNameOwnName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameOwnName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameOwnName {
    return new HumanNameOwnName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameOwnName {
    return new HumanNameOwnName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameOwnName {
    return new HumanNameOwnName().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameOwnName | PlainMessage<HumanNameOwnName> | undefined, b: HumanNameOwnName | PlainMessage<HumanNameOwnName> | undefined): boolean {
    return proto3.util.equals(HumanNameOwnName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for own-prefix.
 * Voorvoegsel derived from person's own surname.
 * See http://hl7.org/fhir/StructureDefinition/humanname-own-prefix
 *
 * @generated from message google.fhir.stu3.proto.HumanNameOwnPrefix
 */
export class HumanNameOwnPrefix extends Message<HumanNameOwnPrefix> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<HumanNameOwnPrefix>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameOwnPrefix";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameOwnPrefix {
    return new HumanNameOwnPrefix().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameOwnPrefix {
    return new HumanNameOwnPrefix().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameOwnPrefix {
    return new HumanNameOwnPrefix().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameOwnPrefix | PlainMessage<HumanNameOwnPrefix> | undefined, b: HumanNameOwnPrefix | PlainMessage<HumanNameOwnPrefix> | undefined): boolean {
    return proto3.util.equals(HumanNameOwnPrefix, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for partner-name.
 * Portion derived from person's partner's surname.
 * See http://hl7.org/fhir/StructureDefinition/humanname-partner-name
 *
 * @generated from message google.fhir.stu3.proto.HumanNamePartnerName
 */
export class HumanNamePartnerName extends Message<HumanNamePartnerName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<HumanNamePartnerName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNamePartnerName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNamePartnerName {
    return new HumanNamePartnerName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNamePartnerName {
    return new HumanNamePartnerName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNamePartnerName {
    return new HumanNamePartnerName().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNamePartnerName | PlainMessage<HumanNamePartnerName> | undefined, b: HumanNamePartnerName | PlainMessage<HumanNamePartnerName> | undefined): boolean {
    return proto3.util.equals(HumanNamePartnerName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for partner-prefix.
 * Voorvoegsel derived from person's partner's surname.
 * See http://hl7.org/fhir/StructureDefinition/humanname-partner-prefix
 *
 * @generated from message google.fhir.stu3.proto.HumanNamePartnerPrefix
 */
export class HumanNamePartnerPrefix extends Message<HumanNamePartnerPrefix> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<HumanNamePartnerPrefix>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNamePartnerPrefix";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNamePartnerPrefix {
    return new HumanNamePartnerPrefix().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNamePartnerPrefix {
    return new HumanNamePartnerPrefix().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNamePartnerPrefix {
    return new HumanNamePartnerPrefix().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNamePartnerPrefix | PlainMessage<HumanNamePartnerPrefix> | undefined, b: HumanNamePartnerPrefix | PlainMessage<HumanNamePartnerPrefix> | undefined): boolean {
    return proto3.util.equals(HumanNamePartnerPrefix, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for validDate.
 * External Identifier associated with this element.
 * See http://hl7.org/fhir/StructureDefinition/identifier-validDate
 *
 * @generated from message google.fhir.stu3.proto.IdentifierValidDate
 */
export class IdentifierValidDate extends Message<IdentifierValidDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.DateTime value_date_time = 3;
   */
  valueDateTime?: DateTime;

  constructor(data?: PartialMessage<IdentifierValidDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.IdentifierValidDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date_time", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IdentifierValidDate {
    return new IdentifierValidDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IdentifierValidDate {
    return new IdentifierValidDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IdentifierValidDate {
    return new IdentifierValidDate().fromJsonString(jsonString, options);
  }

  static equals(a: IdentifierValidDate | PlainMessage<IdentifierValidDate> | undefined, b: IdentifierValidDate | PlainMessage<IdentifierValidDate> | undefined): boolean {
    return proto3.util.equals(IdentifierValidDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for page.
 * Page for this resource.
 * See http://hl7.org/fhir/StructureDefinition/implementationguide-page
 *
 * @generated from message google.fhir.stu3.proto.ImplementationGuidePage
 */
export class ImplementationGuidePage extends Message<ImplementationGuidePage> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ImplementationGuidePage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ImplementationGuidePage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ImplementationGuidePage {
    return new ImplementationGuidePage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ImplementationGuidePage {
    return new ImplementationGuidePage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ImplementationGuidePage {
    return new ImplementationGuidePage().fromJsonString(jsonString, options);
  }

  static equals(a: ImplementationGuidePage | PlainMessage<ImplementationGuidePage> | undefined, b: ImplementationGuidePage | PlainMessage<ImplementationGuidePage> | undefined): boolean {
    return proto3.util.equals(ImplementationGuidePage, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AD-use.
 * BAD | CONF | HP | HV | DIR | PUB | PHYS | PST.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-AD-use
 *
 * @generated from message google.fhir.stu3.proto.AddressADUse
 */
export class AddressADUse extends Message<AddressADUse> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.PostalAddressUseTypeCode value_code = 3;
   */
  valueCode?: PostalAddressUseTypeCode;

  constructor(data?: PartialMessage<AddressADUse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADUse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: PostalAddressUseTypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADUse {
    return new AddressADUse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADUse {
    return new AddressADUse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADUse {
    return new AddressADUse().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADUse | PlainMessage<AddressADUse> | undefined, b: AddressADUse | PlainMessage<AddressADUse> | undefined): boolean {
    return proto3.util.equals(AddressADUse, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-additionalLocator.
 * additionalLocator.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-additionalLocator
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPAdditionalLocator
 */
export class AddressADXPAdditionalLocator extends Message<AddressADXPAdditionalLocator> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPAdditionalLocator>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPAdditionalLocator";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPAdditionalLocator {
    return new AddressADXPAdditionalLocator().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPAdditionalLocator {
    return new AddressADXPAdditionalLocator().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPAdditionalLocator {
    return new AddressADXPAdditionalLocator().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPAdditionalLocator | PlainMessage<AddressADXPAdditionalLocator> | undefined, b: AddressADXPAdditionalLocator | PlainMessage<AddressADXPAdditionalLocator> | undefined): boolean {
    return proto3.util.equals(AddressADXPAdditionalLocator, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-buildingNumberSuffix.
 * buildingNumberSuffix.
 * See
 * http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-buildingNumberSuffix
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix
 */
export class AddressADXPBuildingNumberSuffix extends Message<AddressADXPBuildingNumberSuffix> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPBuildingNumberSuffix>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPBuildingNumberSuffix";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPBuildingNumberSuffix {
    return new AddressADXPBuildingNumberSuffix().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPBuildingNumberSuffix {
    return new AddressADXPBuildingNumberSuffix().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPBuildingNumberSuffix {
    return new AddressADXPBuildingNumberSuffix().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPBuildingNumberSuffix | PlainMessage<AddressADXPBuildingNumberSuffix> | undefined, b: AddressADXPBuildingNumberSuffix | PlainMessage<AddressADXPBuildingNumberSuffix> | undefined): boolean {
    return proto3.util.equals(AddressADXPBuildingNumberSuffix, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-careOf.
 * careOf.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-careOf
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPCareOf
 */
export class AddressADXPCareOf extends Message<AddressADXPCareOf> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPCareOf>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPCareOf";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPCareOf {
    return new AddressADXPCareOf().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPCareOf {
    return new AddressADXPCareOf().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPCareOf {
    return new AddressADXPCareOf().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPCareOf | PlainMessage<AddressADXPCareOf> | undefined, b: AddressADXPCareOf | PlainMessage<AddressADXPCareOf> | undefined): boolean {
    return proto3.util.equals(AddressADXPCareOf, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-censusTract.
 * censusTract.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-censusTract
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPCensusTract
 */
export class AddressADXPCensusTract extends Message<AddressADXPCensusTract> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPCensusTract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPCensusTract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPCensusTract {
    return new AddressADXPCensusTract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPCensusTract {
    return new AddressADXPCensusTract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPCensusTract {
    return new AddressADXPCensusTract().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPCensusTract | PlainMessage<AddressADXPCensusTract> | undefined, b: AddressADXPCensusTract | PlainMessage<AddressADXPCensusTract> | undefined): boolean {
    return proto3.util.equals(AddressADXPCensusTract, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-delimiter.
 * delimiter.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-delimiter
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDelimiter
 */
export class AddressADXPDelimiter extends Message<AddressADXPDelimiter> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDelimiter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDelimiter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDelimiter {
    return new AddressADXPDelimiter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDelimiter {
    return new AddressADXPDelimiter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDelimiter {
    return new AddressADXPDelimiter().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDelimiter | PlainMessage<AddressADXPDelimiter> | undefined, b: AddressADXPDelimiter | PlainMessage<AddressADXPDelimiter> | undefined): boolean {
    return proto3.util.equals(AddressADXPDelimiter, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-deliveryAddressLine.
 * deliveryAddressLine.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryAddressLine
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDeliveryAddressLine
 */
export class AddressADXPDeliveryAddressLine extends Message<AddressADXPDeliveryAddressLine> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDeliveryAddressLine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDeliveryAddressLine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDeliveryAddressLine {
    return new AddressADXPDeliveryAddressLine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDeliveryAddressLine {
    return new AddressADXPDeliveryAddressLine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDeliveryAddressLine {
    return new AddressADXPDeliveryAddressLine().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDeliveryAddressLine | PlainMessage<AddressADXPDeliveryAddressLine> | undefined, b: AddressADXPDeliveryAddressLine | PlainMessage<AddressADXPDeliveryAddressLine> | undefined): boolean {
    return proto3.util.equals(AddressADXPDeliveryAddressLine, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-deliveryInstallationArea.
 * deliveryInstallationArea.
 * See
 * http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryInstallationArea
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea
 */
export class AddressADXPDeliveryInstallationArea extends Message<AddressADXPDeliveryInstallationArea> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDeliveryInstallationArea>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDeliveryInstallationArea";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDeliveryInstallationArea {
    return new AddressADXPDeliveryInstallationArea().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDeliveryInstallationArea {
    return new AddressADXPDeliveryInstallationArea().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDeliveryInstallationArea {
    return new AddressADXPDeliveryInstallationArea().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDeliveryInstallationArea | PlainMessage<AddressADXPDeliveryInstallationArea> | undefined, b: AddressADXPDeliveryInstallationArea | PlainMessage<AddressADXPDeliveryInstallationArea> | undefined): boolean {
    return proto3.util.equals(AddressADXPDeliveryInstallationArea, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for
 * ADXP-deliveryInstallationQualifier. deliveryInstallationQualifier. See
 * http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryInstallationQualifier
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier
 */
export class AddressADXPDeliveryInstallationQualifier extends Message<AddressADXPDeliveryInstallationQualifier> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDeliveryInstallationQualifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDeliveryInstallationQualifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDeliveryInstallationQualifier {
    return new AddressADXPDeliveryInstallationQualifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDeliveryInstallationQualifier {
    return new AddressADXPDeliveryInstallationQualifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDeliveryInstallationQualifier {
    return new AddressADXPDeliveryInstallationQualifier().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDeliveryInstallationQualifier | PlainMessage<AddressADXPDeliveryInstallationQualifier> | undefined, b: AddressADXPDeliveryInstallationQualifier | PlainMessage<AddressADXPDeliveryInstallationQualifier> | undefined): boolean {
    return proto3.util.equals(AddressADXPDeliveryInstallationQualifier, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-deliveryInstallationType.
 * deliveryInstallationType.
 * See
 * http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryInstallationType
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDeliveryInstallationType
 */
export class AddressADXPDeliveryInstallationType extends Message<AddressADXPDeliveryInstallationType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDeliveryInstallationType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDeliveryInstallationType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDeliveryInstallationType {
    return new AddressADXPDeliveryInstallationType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDeliveryInstallationType {
    return new AddressADXPDeliveryInstallationType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDeliveryInstallationType {
    return new AddressADXPDeliveryInstallationType().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDeliveryInstallationType | PlainMessage<AddressADXPDeliveryInstallationType> | undefined, b: AddressADXPDeliveryInstallationType | PlainMessage<AddressADXPDeliveryInstallationType> | undefined): boolean {
    return proto3.util.equals(AddressADXPDeliveryInstallationType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-deliveryMode.
 * deliveryMode.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryMode
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDeliveryMode
 */
export class AddressADXPDeliveryMode extends Message<AddressADXPDeliveryMode> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDeliveryMode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDeliveryMode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDeliveryMode {
    return new AddressADXPDeliveryMode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDeliveryMode {
    return new AddressADXPDeliveryMode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDeliveryMode {
    return new AddressADXPDeliveryMode().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDeliveryMode | PlainMessage<AddressADXPDeliveryMode> | undefined, b: AddressADXPDeliveryMode | PlainMessage<AddressADXPDeliveryMode> | undefined): boolean {
    return proto3.util.equals(AddressADXPDeliveryMode, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-deliveryModeIdentifier.
 * deliveryModeIdentifier.
 * See
 * http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-deliveryModeIdentifier
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier
 */
export class AddressADXPDeliveryModeIdentifier extends Message<AddressADXPDeliveryModeIdentifier> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDeliveryModeIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDeliveryModeIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDeliveryModeIdentifier {
    return new AddressADXPDeliveryModeIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDeliveryModeIdentifier {
    return new AddressADXPDeliveryModeIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDeliveryModeIdentifier {
    return new AddressADXPDeliveryModeIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDeliveryModeIdentifier | PlainMessage<AddressADXPDeliveryModeIdentifier> | undefined, b: AddressADXPDeliveryModeIdentifier | PlainMessage<AddressADXPDeliveryModeIdentifier> | undefined): boolean {
    return proto3.util.equals(AddressADXPDeliveryModeIdentifier, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-direction.
 * direction.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-direction
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPDirection
 */
export class AddressADXPDirection extends Message<AddressADXPDirection> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPDirection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPDirection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPDirection {
    return new AddressADXPDirection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPDirection {
    return new AddressADXPDirection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPDirection {
    return new AddressADXPDirection().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPDirection | PlainMessage<AddressADXPDirection> | undefined, b: AddressADXPDirection | PlainMessage<AddressADXPDirection> | undefined): boolean {
    return proto3.util.equals(AddressADXPDirection, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-houseNumber.
 * houseNumber.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumber
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPHouseNumber
 */
export class AddressADXPHouseNumber extends Message<AddressADXPHouseNumber> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPHouseNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPHouseNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPHouseNumber {
    return new AddressADXPHouseNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPHouseNumber {
    return new AddressADXPHouseNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPHouseNumber {
    return new AddressADXPHouseNumber().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPHouseNumber | PlainMessage<AddressADXPHouseNumber> | undefined, b: AddressADXPHouseNumber | PlainMessage<AddressADXPHouseNumber> | undefined): boolean {
    return proto3.util.equals(AddressADXPHouseNumber, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-houseNumberNumeric.
 * houseNumberNumeric.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-houseNumberNumeric
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPHouseNumberNumeric
 */
export class AddressADXPHouseNumberNumeric extends Message<AddressADXPHouseNumberNumeric> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPHouseNumberNumeric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPHouseNumberNumeric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPHouseNumberNumeric {
    return new AddressADXPHouseNumberNumeric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPHouseNumberNumeric {
    return new AddressADXPHouseNumberNumeric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPHouseNumberNumeric {
    return new AddressADXPHouseNumberNumeric().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPHouseNumberNumeric | PlainMessage<AddressADXPHouseNumberNumeric> | undefined, b: AddressADXPHouseNumberNumeric | PlainMessage<AddressADXPHouseNumberNumeric> | undefined): boolean {
    return proto3.util.equals(AddressADXPHouseNumberNumeric, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-postBox.
 * postBox.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-postBox
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPPostBox
 */
export class AddressADXPPostBox extends Message<AddressADXPPostBox> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPPostBox>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPPostBox";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPPostBox {
    return new AddressADXPPostBox().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPPostBox {
    return new AddressADXPPostBox().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPPostBox {
    return new AddressADXPPostBox().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPPostBox | PlainMessage<AddressADXPPostBox> | undefined, b: AddressADXPPostBox | PlainMessage<AddressADXPPostBox> | undefined): boolean {
    return proto3.util.equals(AddressADXPPostBox, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-precinct.
 * precinct.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-precinct
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPPrecinct
 */
export class AddressADXPPrecinct extends Message<AddressADXPPrecinct> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPPrecinct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPPrecinct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPPrecinct {
    return new AddressADXPPrecinct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPPrecinct {
    return new AddressADXPPrecinct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPPrecinct {
    return new AddressADXPPrecinct().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPPrecinct | PlainMessage<AddressADXPPrecinct> | undefined, b: AddressADXPPrecinct | PlainMessage<AddressADXPPrecinct> | undefined): boolean {
    return proto3.util.equals(AddressADXPPrecinct, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-streetAddressLine.
 * streetAddressLine.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetAddressLine
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPStreetAddressLine
 */
export class AddressADXPStreetAddressLine extends Message<AddressADXPStreetAddressLine> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPStreetAddressLine>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPStreetAddressLine";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPStreetAddressLine {
    return new AddressADXPStreetAddressLine().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPStreetAddressLine {
    return new AddressADXPStreetAddressLine().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPStreetAddressLine {
    return new AddressADXPStreetAddressLine().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPStreetAddressLine | PlainMessage<AddressADXPStreetAddressLine> | undefined, b: AddressADXPStreetAddressLine | PlainMessage<AddressADXPStreetAddressLine> | undefined): boolean {
    return proto3.util.equals(AddressADXPStreetAddressLine, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-streetName.
 * streetName.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetName
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPStreetName
 */
export class AddressADXPStreetName extends Message<AddressADXPStreetName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPStreetName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPStreetName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPStreetName {
    return new AddressADXPStreetName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPStreetName {
    return new AddressADXPStreetName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPStreetName {
    return new AddressADXPStreetName().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPStreetName | PlainMessage<AddressADXPStreetName> | undefined, b: AddressADXPStreetName | PlainMessage<AddressADXPStreetName> | undefined): boolean {
    return proto3.util.equals(AddressADXPStreetName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-streetNameBase.
 * streetNameBase.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetNameBase
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPStreetNameBase
 */
export class AddressADXPStreetNameBase extends Message<AddressADXPStreetNameBase> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPStreetNameBase>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPStreetNameBase";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPStreetNameBase {
    return new AddressADXPStreetNameBase().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPStreetNameBase {
    return new AddressADXPStreetNameBase().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPStreetNameBase {
    return new AddressADXPStreetNameBase().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPStreetNameBase | PlainMessage<AddressADXPStreetNameBase> | undefined, b: AddressADXPStreetNameBase | PlainMessage<AddressADXPStreetNameBase> | undefined): boolean {
    return proto3.util.equals(AddressADXPStreetNameBase, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-streetNameType.
 * streetNameType.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-streetNameType
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPStreetNameType
 */
export class AddressADXPStreetNameType extends Message<AddressADXPStreetNameType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPStreetNameType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPStreetNameType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPStreetNameType {
    return new AddressADXPStreetNameType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPStreetNameType {
    return new AddressADXPStreetNameType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPStreetNameType {
    return new AddressADXPStreetNameType().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPStreetNameType | PlainMessage<AddressADXPStreetNameType> | undefined, b: AddressADXPStreetNameType | PlainMessage<AddressADXPStreetNameType> | undefined): boolean {
    return proto3.util.equals(AddressADXPStreetNameType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-unitID.
 * unitID.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-unitID
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPUnitID
 */
export class AddressADXPUnitID extends Message<AddressADXPUnitID> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPUnitID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPUnitID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPUnitID {
    return new AddressADXPUnitID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPUnitID {
    return new AddressADXPUnitID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPUnitID {
    return new AddressADXPUnitID().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPUnitID | PlainMessage<AddressADXPUnitID> | undefined, b: AddressADXPUnitID | PlainMessage<AddressADXPUnitID> | undefined): boolean {
    return proto3.util.equals(AddressADXPUnitID, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ADXP-unitType.
 * unitType.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-ADXP-unitType
 *
 * @generated from message google.fhir.stu3.proto.AddressADXPUnitType
 */
export class AddressADXPUnitType extends Message<AddressADXPUnitType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AddressADXPUnitType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AddressADXPUnitType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressADXPUnitType {
    return new AddressADXPUnitType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressADXPUnitType {
    return new AddressADXPUnitType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressADXPUnitType {
    return new AddressADXPUnitType().fromJsonString(jsonString, options);
  }

  static equals(a: AddressADXPUnitType | PlainMessage<AddressADXPUnitType> | undefined, b: AddressADXPUnitType | PlainMessage<AddressADXPUnitType> | undefined): boolean {
    return proto3.util.equals(AddressADXPUnitType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for CO-value.
 * Numerical value associated with the code.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-CO-value
 *
 * @generated from message google.fhir.stu3.proto.CodingCOValue
 */
export class CodingCOValue extends Message<CodingCOValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<CodingCOValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.CodingCOValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CodingCOValue {
    return new CodingCOValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CodingCOValue {
    return new CodingCOValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CodingCOValue {
    return new CodingCOValue().fromJsonString(jsonString, options);
  }

  static equals(a: CodingCOValue | PlainMessage<CodingCOValue> | undefined, b: CodingCOValue | PlainMessage<CodingCOValue> | undefined): boolean {
    return proto3.util.equals(CodingCOValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for EN-qualifier.
 * LS | AC | NB | PR | HON | BR | AD | SP | MID | CL | IN | VV.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier
 *
 * @generated from message google.fhir.stu3.proto.HumanNameENQualifier
 */
export class HumanNameENQualifier extends Message<HumanNameENQualifier> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.EntityNamePartQualifierCode value_code = 3;
   */
  valueCode?: EntityNamePartQualifierCode;

  constructor(data?: PartialMessage<HumanNameENQualifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameENQualifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: EntityNamePartQualifierCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameENQualifier {
    return new HumanNameENQualifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameENQualifier {
    return new HumanNameENQualifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameENQualifier {
    return new HumanNameENQualifier().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameENQualifier | PlainMessage<HumanNameENQualifier> | undefined, b: HumanNameENQualifier | PlainMessage<HumanNameENQualifier> | undefined): boolean {
    return proto3.util.equals(HumanNameENQualifier, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for EN-representation.
 * ABC | IDE | SYL.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-EN-representation
 *
 * @generated from message google.fhir.stu3.proto.HumanNameENRepresentation
 */
export class HumanNameENRepresentation extends Message<HumanNameENRepresentation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.NameRepresentationUseCode value_code = 3;
   */
  valueCode?: NameRepresentationUseCode;

  constructor(data?: PartialMessage<HumanNameENRepresentation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.HumanNameENRepresentation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: NameRepresentationUseCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HumanNameENRepresentation {
    return new HumanNameENRepresentation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HumanNameENRepresentation {
    return new HumanNameENRepresentation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HumanNameENRepresentation {
    return new HumanNameENRepresentation().fromJsonString(jsonString, options);
  }

  static equals(a: HumanNameENRepresentation | PlainMessage<HumanNameENRepresentation> | undefined, b: HumanNameENRepresentation | PlainMessage<HumanNameENRepresentation> | undefined): boolean {
    return proto3.util.equals(HumanNameENRepresentation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for nullFlavor.
 * NI | OTH | NINF | PINF | UNK | ASKU | NAV | NASK | TRC | MSK | NA | QS.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-nullFlavor
 *
 * @generated from message google.fhir.stu3.proto.AnyNullFlavor
 */
export class AnyNullFlavor extends Message<AnyNullFlavor> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.NullFlavorCode value_code = 3;
   */
  valueCode?: NullFlavorCode;

  constructor(data?: PartialMessage<AnyNullFlavor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AnyNullFlavor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: NullFlavorCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyNullFlavor {
    return new AnyNullFlavor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyNullFlavor {
    return new AnyNullFlavor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyNullFlavor {
    return new AnyNullFlavor().fromJsonString(jsonString, options);
  }

  static equals(a: AnyNullFlavor | PlainMessage<AnyNullFlavor> | undefined, b: AnyNullFlavor | PlainMessage<AnyNullFlavor> | undefined): boolean {
    return proto3.util.equals(AnyNullFlavor, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for preferred.
 * Preferred.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-preferred
 *
 * @generated from message google.fhir.stu3.proto.AnyPreferred
 */
export class AnyPreferred extends Message<AnyPreferred> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<AnyPreferred>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AnyPreferred";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyPreferred {
    return new AnyPreferred().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyPreferred {
    return new AnyPreferred().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyPreferred {
    return new AnyPreferred().fromJsonString(jsonString, options);
  }

  static equals(a: AnyPreferred | PlainMessage<AnyPreferred> | undefined, b: AnyPreferred | PlainMessage<AnyPreferred> | undefined): boolean {
    return proto3.util.equals(AnyPreferred, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for SC-coding.
 * code for string.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-SC-coding
 *
 * @generated from message google.fhir.stu3.proto.StringSCCoding
 */
export class StringSCCoding extends Message<StringSCCoding> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<StringSCCoding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StringSCCoding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringSCCoding {
    return new StringSCCoding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringSCCoding {
    return new StringSCCoding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringSCCoding {
    return new StringSCCoding().fromJsonString(jsonString, options);
  }

  static equals(a: StringSCCoding | PlainMessage<StringSCCoding> | undefined, b: StringSCCoding | PlainMessage<StringSCCoding> | undefined): boolean {
    return proto3.util.equals(StringSCCoding, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for TEL-address.
 * RFC 3966 compliant telephone or fax number.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-TEL-address
 *
 * @generated from message google.fhir.stu3.proto.ContactPointTELAddress
 */
export class ContactPointTELAddress extends Message<ContactPointTELAddress> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ContactPointTELAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ContactPointTELAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContactPointTELAddress {
    return new ContactPointTELAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContactPointTELAddress {
    return new ContactPointTELAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContactPointTELAddress {
    return new ContactPointTELAddress().fromJsonString(jsonString, options);
  }

  static equals(a: ContactPointTELAddress | PlainMessage<ContactPointTELAddress> | undefined, b: ContactPointTELAddress | PlainMessage<ContactPointTELAddress> | undefined): boolean {
    return proto3.util.equals(ContactPointTELAddress, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for uncertainty.
 * Standard Deviation (same units as the quantity).
 * See http://hl7.org/fhir/StructureDefinition/iso21090-uncertainty
 *
 * @generated from message google.fhir.stu3.proto.QuantityUncertainty
 */
export class QuantityUncertainty extends Message<QuantityUncertainty> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<QuantityUncertainty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuantityUncertainty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuantityUncertainty {
    return new QuantityUncertainty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuantityUncertainty {
    return new QuantityUncertainty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuantityUncertainty {
    return new QuantityUncertainty().fromJsonString(jsonString, options);
  }

  static equals(a: QuantityUncertainty | PlainMessage<QuantityUncertainty> | undefined, b: QuantityUncertainty | PlainMessage<QuantityUncertainty> | undefined): boolean {
    return proto3.util.equals(QuantityUncertainty, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for uncertaintyType.
 * Probability Distribution Type for uncertainty.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-uncertaintyType
 *
 * @generated from message google.fhir.stu3.proto.QuantityUncertaintyType
 */
export class QuantityUncertaintyType extends Message<QuantityUncertaintyType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ProbabilityDistributionTypeCode value_code = 3;
   */
  valueCode?: ProbabilityDistributionTypeCode;

  constructor(data?: PartialMessage<QuantityUncertaintyType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuantityUncertaintyType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ProbabilityDistributionTypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuantityUncertaintyType {
    return new QuantityUncertaintyType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuantityUncertaintyType {
    return new QuantityUncertaintyType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuantityUncertaintyType {
    return new QuantityUncertaintyType().fromJsonString(jsonString, options);
  }

  static equals(a: QuantityUncertaintyType | PlainMessage<QuantityUncertaintyType> | undefined, b: QuantityUncertaintyType | PlainMessage<QuantityUncertaintyType> | undefined): boolean {
    return proto3.util.equals(QuantityUncertaintyType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for verification.
 * verification.
 * See http://hl7.org/fhir/StructureDefinition/iso21090-verification
 *
 * @generated from message google.fhir.stu3.proto.AnyVerification
 */
export class AnyVerification extends Message<AnyVerification> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<AnyVerification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AnyVerification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnyVerification {
    return new AnyVerification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnyVerification {
    return new AnyVerification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnyVerification {
    return new AnyVerification().fromJsonString(jsonString, options);
  }

  static equals(a: AnyVerification | PlainMessage<AnyVerification> | undefined, b: AnyVerification | PlainMessage<AnyVerification> | undefined): boolean {
    return proto3.util.equals(AnyVerification, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for alias.
 * Alias.
 * See http://hl7.org/fhir/StructureDefinition/location-alias
 *
 * @generated from message google.fhir.stu3.proto.LocationAlias
 */
export class LocationAlias extends Message<LocationAlias> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<LocationAlias>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.LocationAlias";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LocationAlias {
    return new LocationAlias().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LocationAlias {
    return new LocationAlias().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LocationAlias {
    return new LocationAlias().fromJsonString(jsonString, options);
  }

  static equals(a: LocationAlias | PlainMessage<LocationAlias> | undefined, b: LocationAlias | PlainMessage<LocationAlias> | undefined): boolean {
    return proto3.util.equals(LocationAlias, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for location-distance.
 * The distance this resource is from a provided location (geocode point).
 * See http://hl7.org/fhir/StructureDefinition/location-distance
 *
 * @generated from message google.fhir.stu3.proto.BundleLocationDistance
 */
export class BundleLocationDistance extends Message<BundleLocationDistance> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Distance value_distance = 3;
   */
  valueDistance?: Distance;

  constructor(data?: PartialMessage<BundleLocationDistance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BundleLocationDistance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_distance", kind: "message", T: Distance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BundleLocationDistance {
    return new BundleLocationDistance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BundleLocationDistance {
    return new BundleLocationDistance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BundleLocationDistance {
    return new BundleLocationDistance().fromJsonString(jsonString, options);
  }

  static equals(a: BundleLocationDistance | PlainMessage<BundleLocationDistance> | undefined, b: BundleLocationDistance | PlainMessage<BundleLocationDistance> | undefined): boolean {
    return proto3.util.equals(BundleLocationDistance, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for mapSourcePublisher.
 * Who published the mapping source.
 * See http://hl7.org/fhir/StructureDefinition/mapSourcePublisher
 *
 * @generated from message google.fhir.stu3.proto.DataElementMapSourcePublisher
 */
export class DataElementMapSourcePublisher extends Message<DataElementMapSourcePublisher> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<DataElementMapSourcePublisher>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DataElementMapSourcePublisher";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataElementMapSourcePublisher {
    return new DataElementMapSourcePublisher().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataElementMapSourcePublisher {
    return new DataElementMapSourcePublisher().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataElementMapSourcePublisher {
    return new DataElementMapSourcePublisher().fromJsonString(jsonString, options);
  }

  static equals(a: DataElementMapSourcePublisher | PlainMessage<DataElementMapSourcePublisher> | undefined, b: DataElementMapSourcePublisher | PlainMessage<DataElementMapSourcePublisher> | undefined): boolean {
    return proto3.util.equals(DataElementMapSourcePublisher, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for match-grade.
 * How likely this resource is to be a match.
 * See http://hl7.org/fhir/StructureDefinition/match-grade
 *
 * @generated from message google.fhir.stu3.proto.BundleMatchGrade
 */
export class BundleMatchGrade extends Message<BundleMatchGrade> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.MatchGradeCode value_code = 3;
   */
  valueCode?: MatchGradeCode;

  constructor(data?: PartialMessage<BundleMatchGrade>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BundleMatchGrade";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: MatchGradeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BundleMatchGrade {
    return new BundleMatchGrade().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BundleMatchGrade {
    return new BundleMatchGrade().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BundleMatchGrade {
    return new BundleMatchGrade().fromJsonString(jsonString, options);
  }

  static equals(a: BundleMatchGrade | PlainMessage<BundleMatchGrade> | undefined, b: BundleMatchGrade | PlainMessage<BundleMatchGrade> | undefined): boolean {
    return proto3.util.equals(BundleMatchGrade, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxDecimalPlaces.
 * Maximum digits after decimal.
 * See http://hl7.org/fhir/StructureDefinition/maxDecimalPlaces
 *
 * @generated from message google.fhir.stu3.proto.MaxDecimalPlaces
 */
export class MaxDecimalPlaces extends Message<MaxDecimalPlaces> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<MaxDecimalPlaces>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MaxDecimalPlaces";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaxDecimalPlaces {
    return new MaxDecimalPlaces().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaxDecimalPlaces {
    return new MaxDecimalPlaces().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaxDecimalPlaces {
    return new MaxDecimalPlaces().fromJsonString(jsonString, options);
  }

  static equals(a: MaxDecimalPlaces | PlainMessage<MaxDecimalPlaces> | undefined, b: MaxDecimalPlaces | PlainMessage<MaxDecimalPlaces> | undefined): boolean {
    return proto3.util.equals(MaxDecimalPlaces, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxSize.
 * Max size in MB.
 * See http://hl7.org/fhir/StructureDefinition/maxSize
 *
 * @generated from message google.fhir.stu3.proto.MaxSize
 */
export class MaxSize extends Message<MaxSize> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<MaxSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MaxSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaxSize {
    return new MaxSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaxSize {
    return new MaxSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaxSize {
    return new MaxSize().fromJsonString(jsonString, options);
  }

  static equals(a: MaxSize | PlainMessage<MaxSize> | undefined, b: MaxSize | PlainMessage<MaxSize> | undefined): boolean {
    return proto3.util.equals(MaxSize, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxValue.
 * Must be <= this value.
 * See http://hl7.org/fhir/StructureDefinition/maxValue
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireMaxValue
 */
export class QuestionnaireMaxValue extends Message<QuestionnaireMaxValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.QuestionnaireMaxValue.Value value = 3;
   */
  value?: QuestionnaireMaxValue_Value;

  constructor(data?: PartialMessage<QuestionnaireMaxValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireMaxValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: QuestionnaireMaxValue_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireMaxValue {
    return new QuestionnaireMaxValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireMaxValue {
    return new QuestionnaireMaxValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireMaxValue {
    return new QuestionnaireMaxValue().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireMaxValue | PlainMessage<QuestionnaireMaxValue> | undefined, b: QuestionnaireMaxValue | PlainMessage<QuestionnaireMaxValue> | undefined): boolean {
    return proto3.util.equals(QuestionnaireMaxValue, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireMaxValue.Value
 */
export class QuestionnaireMaxValue_Value extends Message<QuestionnaireMaxValue_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.QuestionnaireMaxValue.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.DateTime date_time = 2;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Time time = 3;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Instant instant = 4;
     */
    value: Instant;
    case: "instant";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Decimal decimal = 5;
     */
    value: Decimal;
    case: "decimal";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Integer integer = 6;
     */
    value: Integer;
    case: "integer";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QuestionnaireMaxValue_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireMaxValue.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "value" },
    { no: 2, name: "date_time", kind: "message", T: DateTime, oneof: "value" },
    { no: 3, name: "time", kind: "message", T: Time, oneof: "value" },
    { no: 4, name: "instant", kind: "message", T: Instant, oneof: "value" },
    { no: 5, name: "decimal", kind: "message", T: Decimal, oneof: "value" },
    { no: 6, name: "integer", kind: "message", T: Integer, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireMaxValue_Value {
    return new QuestionnaireMaxValue_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireMaxValue_Value {
    return new QuestionnaireMaxValue_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireMaxValue_Value {
    return new QuestionnaireMaxValue_Value().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireMaxValue_Value | PlainMessage<QuestionnaireMaxValue_Value> | undefined, b: QuestionnaireMaxValue_Value | PlainMessage<QuestionnaireMaxValue_Value> | undefined): boolean {
    return proto3.util.equals(QuestionnaireMaxValue_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for usualRoute.
 * Typical application route.
 * See http://hl7.org/fhir/StructureDefinition/medication-usualRoute
 *
 * @generated from message google.fhir.stu3.proto.MedicationUsualRoute
 */
export class MedicationUsualRoute extends Message<MedicationUsualRoute> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<MedicationUsualRoute>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MedicationUsualRoute";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationUsualRoute {
    return new MedicationUsualRoute().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationUsualRoute {
    return new MedicationUsualRoute().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationUsualRoute {
    return new MedicationUsualRoute().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationUsualRoute | PlainMessage<MedicationUsualRoute> | undefined, b: MedicationUsualRoute | PlainMessage<MedicationUsualRoute> | undefined): boolean {
    return proto3.util.equals(MedicationUsualRoute, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for validityPeriod.
 * Time interval for medication administration.
 * See http://hl7.org/fhir/StructureDefinition/medicationdispense-validityPeriod
 *
 * @generated from message google.fhir.stu3.proto.MedicationDispenseValidityPeriod
 */
export class MedicationDispenseValidityPeriod extends Message<MedicationDispenseValidityPeriod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Period value_period = 3;
   */
  valuePeriod?: Period;

  constructor(data?: PartialMessage<MedicationDispenseValidityPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MedicationDispenseValidityPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispenseValidityPeriod {
    return new MedicationDispenseValidityPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispenseValidityPeriod {
    return new MedicationDispenseValidityPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispenseValidityPeriod {
    return new MedicationDispenseValidityPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispenseValidityPeriod | PlainMessage<MedicationDispenseValidityPeriod> | undefined, b: MedicationDispenseValidityPeriod | PlainMessage<MedicationDispenseValidityPeriod> | undefined): boolean {
    return proto3.util.equals(MedicationDispenseValidityPeriod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Prescriber.
 * Who ordered the initial medication(s).
 * See http://hl7.org/fhir/StructureDefinition/medicationstatement-Prescriber
 *
 * @generated from message google.fhir.stu3.proto.MedicationStatementPrescriber
 */
export class MedicationStatementPrescriber extends Message<MedicationStatementPrescriber> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<MedicationStatementPrescriber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MedicationStatementPrescriber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationStatementPrescriber {
    return new MedicationStatementPrescriber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationStatementPrescriber {
    return new MedicationStatementPrescriber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationStatementPrescriber {
    return new MedicationStatementPrescriber().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationStatementPrescriber | PlainMessage<MedicationStatementPrescriber> | undefined, b: MedicationStatementPrescriber | PlainMessage<MedicationStatementPrescriber> | undefined): boolean {
    return proto3.util.equals(MedicationStatementPrescriber, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for messageheader-response-request.
 * messageheader initiator requests a response.
 * See http://hl7.org/fhir/StructureDefinition/messageheader-response-request
 *
 * @generated from message google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest
 */
export class MessageHeaderMessageheaderResponseRequest extends Message<MessageHeaderMessageheaderResponseRequest> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.MessageHeaderResponseRequestCode value_code = 3;
   */
  valueCode?: MessageHeaderResponseRequestCode;

  constructor(data?: PartialMessage<MessageHeaderMessageheaderResponseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MessageHeaderMessageheaderResponseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: MessageHeaderResponseRequestCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeaderMessageheaderResponseRequest {
    return new MessageHeaderMessageheaderResponseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeaderMessageheaderResponseRequest {
    return new MessageHeaderMessageheaderResponseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeaderMessageheaderResponseRequest {
    return new MessageHeaderMessageheaderResponseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeaderMessageheaderResponseRequest | PlainMessage<MessageHeaderMessageheaderResponseRequest> | undefined, b: MessageHeaderMessageheaderResponseRequest | PlainMessage<MessageHeaderMessageheaderResponseRequest> | undefined): boolean {
    return proto3.util.equals(MessageHeaderMessageheaderResponseRequest, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for mimeType.
 * Type of attachment.
 * See http://hl7.org/fhir/StructureDefinition/mimeType
 *
 * @generated from message google.fhir.stu3.proto.MimeType
 */
export class MimeType extends Message<MimeType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.MimeTypeCode value_code = 3;
   */
  valueCode?: MimeTypeCode;

  constructor(data?: PartialMessage<MimeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MimeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: MimeTypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MimeType {
    return new MimeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MimeType {
    return new MimeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MimeType {
    return new MimeType().fromJsonString(jsonString, options);
  }

  static equals(a: MimeType | PlainMessage<MimeType> | undefined, b: MimeType | PlainMessage<MimeType> | undefined): boolean {
    return proto3.util.equals(MimeType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for minLength.
 * At least this many characters.
 * See http://hl7.org/fhir/StructureDefinition/minLength
 *
 * @generated from message google.fhir.stu3.proto.MinLength
 */
export class MinLength extends Message<MinLength> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<MinLength>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MinLength";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MinLength {
    return new MinLength().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MinLength {
    return new MinLength().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MinLength {
    return new MinLength().fromJsonString(jsonString, options);
  }

  static equals(a: MinLength | PlainMessage<MinLength> | undefined, b: MinLength | PlainMessage<MinLength> | undefined): boolean {
    return proto3.util.equals(MinLength, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for minValue.
 * Must be >= this value.
 * See http://hl7.org/fhir/StructureDefinition/minValue
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireMinValue
 */
export class QuestionnaireMinValue extends Message<QuestionnaireMinValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.QuestionnaireMinValue.Value value = 3;
   */
  value?: QuestionnaireMinValue_Value;

  constructor(data?: PartialMessage<QuestionnaireMinValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireMinValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: QuestionnaireMinValue_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireMinValue {
    return new QuestionnaireMinValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireMinValue {
    return new QuestionnaireMinValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireMinValue {
    return new QuestionnaireMinValue().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireMinValue | PlainMessage<QuestionnaireMinValue> | undefined, b: QuestionnaireMinValue | PlainMessage<QuestionnaireMinValue> | undefined): boolean {
    return proto3.util.equals(QuestionnaireMinValue, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireMinValue.Value
 */
export class QuestionnaireMinValue_Value extends Message<QuestionnaireMinValue_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.QuestionnaireMinValue.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.DateTime date_time = 2;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Time time = 3;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Instant instant = 4;
     */
    value: Instant;
    case: "instant";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Decimal decimal = 5;
     */
    value: Decimal;
    case: "decimal";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Integer integer = 6;
     */
    value: Integer;
    case: "integer";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QuestionnaireMinValue_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireMinValue.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "value" },
    { no: 2, name: "date_time", kind: "message", T: DateTime, oneof: "value" },
    { no: 3, name: "time", kind: "message", T: Time, oneof: "value" },
    { no: 4, name: "instant", kind: "message", T: Instant, oneof: "value" },
    { no: 5, name: "decimal", kind: "message", T: Decimal, oneof: "value" },
    { no: 6, name: "integer", kind: "message", T: Integer, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireMinValue_Value {
    return new QuestionnaireMinValue_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireMinValue_Value {
    return new QuestionnaireMinValue_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireMinValue_Value {
    return new QuestionnaireMinValue_Value().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireMinValue_Value | PlainMessage<QuestionnaireMinValue_Value> | undefined, b: QuestionnaireMinValue_Value | PlainMessage<QuestionnaireMinValue_Value> | undefined): boolean {
    return proto3.util.equals(QuestionnaireMinValue_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for bodyPosition.
 * The body position during the observation.
 * See http://hl7.org/fhir/StructureDefinition/observation-bodyPosition
 *
 * @generated from message google.fhir.stu3.proto.ObservationBodyPosition
 */
export class ObservationBodyPosition extends Message<ObservationBodyPosition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationBodyPosition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationBodyPosition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationBodyPosition {
    return new ObservationBodyPosition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationBodyPosition {
    return new ObservationBodyPosition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationBodyPosition {
    return new ObservationBodyPosition().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationBodyPosition | PlainMessage<ObservationBodyPosition> | undefined, b: ObservationBodyPosition | PlainMessage<ObservationBodyPosition> | undefined): boolean {
    return proto3.util.equals(ObservationBodyPosition, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for delta.
 * Qualitative change or trend in the measurement.
 * See http://hl7.org/fhir/StructureDefinition/observation-delta
 *
 * @generated from message google.fhir.stu3.proto.ObservationDelta
 */
export class ObservationDelta extends Message<ObservationDelta> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationDelta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationDelta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDelta {
    return new ObservationDelta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDelta {
    return new ObservationDelta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDelta {
    return new ObservationDelta().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDelta | PlainMessage<ObservationDelta> | undefined, b: ObservationDelta | PlainMessage<ObservationDelta> | undefined): boolean {
    return proto3.util.equals(ObservationDelta, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for eventTiming.
 * Approximate time of observation.
 * See http://hl7.org/fhir/StructureDefinition/observation-eventTiming
 *
 * @generated from message google.fhir.stu3.proto.ObservationEventTiming
 */
export class ObservationEventTiming extends Message<ObservationEventTiming> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Life events
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * How close to event
   *
   * @generated from field: google.fhir.stu3.proto.Quantity offset = 5;
   */
  offset?: Quantity;

  constructor(data?: PartialMessage<ObservationEventTiming>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationEventTiming";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "offset", kind: "message", T: Quantity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationEventTiming {
    return new ObservationEventTiming().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationEventTiming {
    return new ObservationEventTiming().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationEventTiming {
    return new ObservationEventTiming().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationEventTiming | PlainMessage<ObservationEventTiming> | undefined, b: ObservationEventTiming | PlainMessage<ObservationEventTiming> | undefined): boolean {
    return proto3.util.equals(ObservationEventTiming, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for focal-subject.
 * Focal Subject.
 * See http://hl7.org/fhir/StructureDefinition/observation-focal-subject
 *
 * @generated from message google.fhir.stu3.proto.ObservationFocalSubject
 */
export class ObservationFocalSubject extends Message<ObservationFocalSubject> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationFocalSubject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationFocalSubject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationFocalSubject {
    return new ObservationFocalSubject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationFocalSubject {
    return new ObservationFocalSubject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationFocalSubject {
    return new ObservationFocalSubject().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationFocalSubject | PlainMessage<ObservationFocalSubject> | undefined, b: ObservationFocalSubject | PlainMessage<ObservationFocalSubject> | undefined): boolean {
    return proto3.util.equals(ObservationFocalSubject, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AlleleName.
 * Name of allele.
 * See http://hl7.org/fhir/StructureDefinition/observation-geneticsAlleleName
 *
 * @generated from message google.fhir.stu3.proto.ObservationAlleleName
 */
export class ObservationAlleleName extends Message<ObservationAlleleName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationAlleleName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationAlleleName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationAlleleName {
    return new ObservationAlleleName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationAlleleName {
    return new ObservationAlleleName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationAlleleName {
    return new ObservationAlleleName().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationAlleleName | PlainMessage<ObservationAlleleName> | undefined, b: ObservationAlleleName | PlainMessage<ObservationAlleleName> | undefined): boolean {
    return proto3.util.equals(ObservationAlleleName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AllelicFrequency.
 * Allele frequency.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsAllelicFrequency
 *
 * @generated from message google.fhir.stu3.proto.ObservationAllelicFrequency
 */
export class ObservationAllelicFrequency extends Message<ObservationAllelicFrequency> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<ObservationAllelicFrequency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationAllelicFrequency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationAllelicFrequency {
    return new ObservationAllelicFrequency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationAllelicFrequency {
    return new ObservationAllelicFrequency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationAllelicFrequency {
    return new ObservationAllelicFrequency().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationAllelicFrequency | PlainMessage<ObservationAllelicFrequency> | undefined, b: ObservationAllelicFrequency | PlainMessage<ObservationAllelicFrequency> | undefined): boolean {
    return proto3.util.equals(ObservationAllelicFrequency, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AllelicState.
 * The level of occurrence of a single DNA sequence variant within a set of
 * chromosomes: Heteroplasmic / Homoplasmic / Homozygous / Heterozygous /
 * Hemizygous. See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsAllelicState
 *
 * @generated from message google.fhir.stu3.proto.ObservationAllelicState
 */
export class ObservationAllelicState extends Message<ObservationAllelicState> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationAllelicState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationAllelicState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationAllelicState {
    return new ObservationAllelicState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationAllelicState {
    return new ObservationAllelicState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationAllelicState {
    return new ObservationAllelicState().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationAllelicState | PlainMessage<ObservationAllelicState> | undefined, b: ObservationAllelicState | PlainMessage<ObservationAllelicState> | undefined): boolean {
    return proto3.util.equals(ObservationAllelicState, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AminoAcidChangeName.
 * HGVS nomenclature for observed Amino Acid Change.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsAminoAcidChangeName
 *
 * @generated from message google.fhir.stu3.proto.ObservationAminoAcidChangeName
 */
export class ObservationAminoAcidChangeName extends Message<ObservationAminoAcidChangeName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationAminoAcidChangeName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationAminoAcidChangeName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationAminoAcidChangeName {
    return new ObservationAminoAcidChangeName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationAminoAcidChangeName {
    return new ObservationAminoAcidChangeName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationAminoAcidChangeName {
    return new ObservationAminoAcidChangeName().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationAminoAcidChangeName | PlainMessage<ObservationAminoAcidChangeName> | undefined, b: ObservationAminoAcidChangeName | PlainMessage<ObservationAminoAcidChangeName> | undefined): boolean {
    return proto3.util.equals(ObservationAminoAcidChangeName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for AminoAcidChangeType.
 * Amino Acid Change Type.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsAminoAcidChangeType
 *
 * @generated from message google.fhir.stu3.proto.ObservationAminoAcidChangeType
 */
export class ObservationAminoAcidChangeType extends Message<ObservationAminoAcidChangeType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationAminoAcidChangeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationAminoAcidChangeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationAminoAcidChangeType {
    return new ObservationAminoAcidChangeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationAminoAcidChangeType {
    return new ObservationAminoAcidChangeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationAminoAcidChangeType {
    return new ObservationAminoAcidChangeType().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationAminoAcidChangeType | PlainMessage<ObservationAminoAcidChangeType> | undefined, b: ObservationAminoAcidChangeType | PlainMessage<ObservationAminoAcidChangeType> | undefined): boolean {
    return proto3.util.equals(ObservationAminoAcidChangeType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for CopyNumberEvent.
 * Copy number variation.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsCopyNumberEvent
 *
 * @generated from message google.fhir.stu3.proto.ObservationCopyNumberEvent
 */
export class ObservationCopyNumberEvent extends Message<ObservationCopyNumberEvent> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationCopyNumberEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationCopyNumberEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationCopyNumberEvent {
    return new ObservationCopyNumberEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationCopyNumberEvent {
    return new ObservationCopyNumberEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationCopyNumberEvent {
    return new ObservationCopyNumberEvent().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationCopyNumberEvent | PlainMessage<ObservationCopyNumberEvent> | undefined, b: ObservationCopyNumberEvent | PlainMessage<ObservationCopyNumberEvent> | undefined): boolean {
    return proto3.util.equals(ObservationCopyNumberEvent, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for DNARegionName.
 * DNA region name.
 * See http://hl7.org/fhir/StructureDefinition/observation-geneticsDNARegionName
 *
 * @generated from message google.fhir.stu3.proto.ObservationDNARegionName
 */
export class ObservationDNARegionName extends Message<ObservationDNARegionName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ObservationDNARegionName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationDNARegionName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDNARegionName {
    return new ObservationDNARegionName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDNARegionName {
    return new ObservationDNARegionName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDNARegionName {
    return new ObservationDNARegionName().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDNARegionName | PlainMessage<ObservationDNARegionName> | undefined, b: ObservationDNARegionName | PlainMessage<ObservationDNARegionName> | undefined): boolean {
    return proto3.util.equals(ObservationDNARegionName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for DNASequenceVariantName.
 * HGVS nomenclature for observed DNA sequence variant.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsDNASequenceVariantName
 *
 * @generated from message google.fhir.stu3.proto.ObservationDNASequenceVariantName
 */
export class ObservationDNASequenceVariantName extends Message<ObservationDNASequenceVariantName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationDNASequenceVariantName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationDNASequenceVariantName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDNASequenceVariantName {
    return new ObservationDNASequenceVariantName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDNASequenceVariantName {
    return new ObservationDNASequenceVariantName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDNASequenceVariantName {
    return new ObservationDNASequenceVariantName().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDNASequenceVariantName | PlainMessage<ObservationDNASequenceVariantName> | undefined, b: ObservationDNASequenceVariantName | PlainMessage<ObservationDNASequenceVariantName> | undefined): boolean {
    return proto3.util.equals(ObservationDNASequenceVariantName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for DNASequenceVariantType.
 * DNA sequence variant type.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsDNASequenceVariantType
 *
 * @generated from message google.fhir.stu3.proto.ObservationDNASequenceVariantType
 */
export class ObservationDNASequenceVariantType extends Message<ObservationDNASequenceVariantType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationDNASequenceVariantType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationDNASequenceVariantType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDNASequenceVariantType {
    return new ObservationDNASequenceVariantType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDNASequenceVariantType {
    return new ObservationDNASequenceVariantType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDNASequenceVariantType {
    return new ObservationDNASequenceVariantType().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDNASequenceVariantType | PlainMessage<ObservationDNASequenceVariantType> | undefined, b: ObservationDNASequenceVariantType | PlainMessage<ObservationDNASequenceVariantType> | undefined): boolean {
    return proto3.util.equals(ObservationDNASequenceVariantType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for DNAVariantId.
 * DNA sequence variant ID.
 * See http://hl7.org/fhir/StructureDefinition/observation-geneticsDNAVariantId
 *
 * @generated from message google.fhir.stu3.proto.ObservationDNAVariantId
 */
export class ObservationDNAVariantId extends Message<ObservationDNAVariantId> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationDNAVariantId>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationDNAVariantId";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDNAVariantId {
    return new ObservationDNAVariantId().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDNAVariantId {
    return new ObservationDNAVariantId().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDNAVariantId {
    return new ObservationDNAVariantId().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDNAVariantId | PlainMessage<ObservationDNAVariantId> | undefined, b: ObservationDNAVariantId | PlainMessage<ObservationDNAVariantId> | undefined): boolean {
    return proto3.util.equals(ObservationDNAVariantId, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Gene.
 * HGNC gene symbol.
 * See http://hl7.org/fhir/StructureDefinition/observation-geneticsGene
 *
 * @generated from message google.fhir.stu3.proto.ObservationGene
 */
export class ObservationGene extends Message<ObservationGene> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationGene>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationGene";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationGene {
    return new ObservationGene().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationGene {
    return new ObservationGene().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationGene {
    return new ObservationGene().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationGene | PlainMessage<ObservationGene> | undefined, b: ObservationGene | PlainMessage<ObservationGene> | undefined): boolean {
    return proto3.util.equals(ObservationGene, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for GenomicSourceClass.
 * Genomic source class.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsGenomicSourceClass
 *
 * @generated from message google.fhir.stu3.proto.ObservationGenomicSourceClass
 */
export class ObservationGenomicSourceClass extends Message<ObservationGenomicSourceClass> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ObservationGenomicSourceClass>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationGenomicSourceClass";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationGenomicSourceClass {
    return new ObservationGenomicSourceClass().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationGenomicSourceClass {
    return new ObservationGenomicSourceClass().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationGenomicSourceClass {
    return new ObservationGenomicSourceClass().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationGenomicSourceClass | PlainMessage<ObservationGenomicSourceClass> | undefined, b: ObservationGenomicSourceClass | PlainMessage<ObservationGenomicSourceClass> | undefined): boolean {
    return proto3.util.equals(ObservationGenomicSourceClass, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Interpretation.
 * Clinical interpretations for variant.
 * See
 * http://hl7.org/fhir/StructureDefinition/observation-geneticsInterpretation
 *
 * @generated from message google.fhir.stu3.proto.ObservationInterpretation
 */
export class ObservationInterpretation extends Message<ObservationInterpretation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ObservationInterpretation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationInterpretation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationInterpretation {
    return new ObservationInterpretation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationInterpretation {
    return new ObservationInterpretation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationInterpretation {
    return new ObservationInterpretation().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationInterpretation | PlainMessage<ObservationInterpretation> | undefined, b: ObservationInterpretation | PlainMessage<ObservationInterpretation> | undefined): boolean {
    return proto3.util.equals(ObservationInterpretation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for PhaseSet.
 * Phase set identifier (UUID/OID).
 * See http://hl7.org/fhir/StructureDefinition/observation-geneticsPhaseSet
 *
 * @generated from message google.fhir.stu3.proto.ObservationPhaseSet
 */
export class ObservationPhaseSet extends Message<ObservationPhaseSet> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ObservationPhaseSet>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationPhaseSet";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationPhaseSet {
    return new ObservationPhaseSet().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationPhaseSet {
    return new ObservationPhaseSet().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationPhaseSet {
    return new ObservationPhaseSet().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationPhaseSet | PlainMessage<ObservationPhaseSet> | undefined, b: ObservationPhaseSet | PlainMessage<ObservationPhaseSet> | undefined): boolean {
    return proto3.util.equals(ObservationPhaseSet, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Sequence.
 * Sequence.
 * See http://hl7.org/fhir/StructureDefinition/observation-geneticsSequence
 *
 * @generated from message google.fhir.stu3.proto.ObservationSequence
 */
export class ObservationSequence extends Message<ObservationSequence> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ObservationSequence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationSequence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationSequence {
    return new ObservationSequence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationSequence {
    return new ObservationSequence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationSequence {
    return new ObservationSequence().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationSequence | PlainMessage<ObservationSequence> | undefined, b: ObservationSequence | PlainMessage<ObservationSequence> | undefined): boolean {
    return proto3.util.equals(ObservationSequence, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for time-offset.
 * Time Offset for interlacing.
 * See http://hl7.org/fhir/StructureDefinition/observation-time-offset
 *
 * @generated from message google.fhir.stu3.proto.ObservationTimeOffset
 */
export class ObservationTimeOffset extends Message<ObservationTimeOffset> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<ObservationTimeOffset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ObservationTimeOffset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationTimeOffset {
    return new ObservationTimeOffset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationTimeOffset {
    return new ObservationTimeOffset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationTimeOffset {
    return new ObservationTimeOffset().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationTimeOffset | PlainMessage<ObservationTimeOffset> | undefined, b: ObservationTimeOffset | PlainMessage<ObservationTimeOffset> | undefined): boolean {
    return proto3.util.equals(ObservationTimeOffset, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for administration.
 * Actual medication record, if known.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-administration
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceAdministration
 */
export class AllergyIntoleranceAdministration extends Message<AllergyIntoleranceAdministration> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<AllergyIntoleranceAdministration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceAdministration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceAdministration {
    return new AllergyIntoleranceAdministration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceAdministration {
    return new AllergyIntoleranceAdministration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceAdministration {
    return new AllergyIntoleranceAdministration().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceAdministration | PlainMessage<AllergyIntoleranceAdministration> | undefined, b: AllergyIntoleranceAdministration | PlainMessage<AllergyIntoleranceAdministration> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceAdministration, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for careplan.
 * Clinical Management Details.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-careplan
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceCareplan
 */
export class AllergyIntoleranceCareplan extends Message<AllergyIntoleranceCareplan> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<AllergyIntoleranceCareplan>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceCareplan";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceCareplan {
    return new AllergyIntoleranceCareplan().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceCareplan {
    return new AllergyIntoleranceCareplan().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceCareplan {
    return new AllergyIntoleranceCareplan().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceCareplan | PlainMessage<AllergyIntoleranceCareplan> | undefined, b: AllergyIntoleranceCareplan | PlainMessage<AllergyIntoleranceCareplan> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceCareplan, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for exposureDate.
 * Date(/time) of first exposure to Substance.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-exposureDate
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceExposureDate
 */
export class AllergyIntoleranceExposureDate extends Message<AllergyIntoleranceExposureDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.DateTime value_date_time = 3;
   */
  valueDateTime?: DateTime;

  constructor(data?: PartialMessage<AllergyIntoleranceExposureDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceExposureDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date_time", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceExposureDate {
    return new AllergyIntoleranceExposureDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceExposureDate {
    return new AllergyIntoleranceExposureDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceExposureDate {
    return new AllergyIntoleranceExposureDate().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceExposureDate | PlainMessage<AllergyIntoleranceExposureDate> | undefined, b: AllergyIntoleranceExposureDate | PlainMessage<AllergyIntoleranceExposureDate> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceExposureDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for exposureDescription.
 * Text description about exposure to the Substance.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-exposureDescription
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceExposureDescription
 */
export class AllergyIntoleranceExposureDescription extends Message<AllergyIntoleranceExposureDescription> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AllergyIntoleranceExposureDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceExposureDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceExposureDescription {
    return new AllergyIntoleranceExposureDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceExposureDescription {
    return new AllergyIntoleranceExposureDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceExposureDescription {
    return new AllergyIntoleranceExposureDescription().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceExposureDescription | PlainMessage<AllergyIntoleranceExposureDescription> | undefined, b: AllergyIntoleranceExposureDescription | PlainMessage<AllergyIntoleranceExposureDescription> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceExposureDescription, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for exposureDuration.
 * Amount of time individual was exposed to Substance.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-exposureDuration
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceExposureDuration
 */
export class AllergyIntoleranceExposureDuration extends Message<AllergyIntoleranceExposureDuration> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Duration value_duration = 3;
   */
  valueDuration?: Duration;

  constructor(data?: PartialMessage<AllergyIntoleranceExposureDuration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceExposureDuration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceExposureDuration {
    return new AllergyIntoleranceExposureDuration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceExposureDuration {
    return new AllergyIntoleranceExposureDuration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceExposureDuration {
    return new AllergyIntoleranceExposureDuration().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceExposureDuration | PlainMessage<AllergyIntoleranceExposureDuration> | undefined, b: AllergyIntoleranceExposureDuration | PlainMessage<AllergyIntoleranceExposureDuration> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceExposureDuration, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for location.
 * Body site of manifestations.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-location
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceLocation
 */
export class AllergyIntoleranceLocation extends Message<AllergyIntoleranceLocation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<AllergyIntoleranceLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceLocation {
    return new AllergyIntoleranceLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceLocation {
    return new AllergyIntoleranceLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceLocation {
    return new AllergyIntoleranceLocation().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceLocation | PlainMessage<AllergyIntoleranceLocation> | undefined, b: AllergyIntoleranceLocation | PlainMessage<AllergyIntoleranceLocation> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceLocation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for management.
 * Clinical Management Description.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-management
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceManagement
 */
export class AllergyIntoleranceManagement extends Message<AllergyIntoleranceManagement> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<AllergyIntoleranceManagement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceManagement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceManagement {
    return new AllergyIntoleranceManagement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceManagement {
    return new AllergyIntoleranceManagement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceManagement {
    return new AllergyIntoleranceManagement().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceManagement | PlainMessage<AllergyIntoleranceManagement> | undefined, b: AllergyIntoleranceManagement | PlainMessage<AllergyIntoleranceManagement> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceManagement, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for test.
 * Observations that confirm or refute.
 * See http://hl7.org/fhir/StructureDefinition/openEHR-test
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceTest
 */
export class AllergyIntoleranceTest extends Message<AllergyIntoleranceTest> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.AllergyIntoleranceTest.Value value = 3;
   */
  value?: AllergyIntoleranceTest_Value;

  constructor(data?: PartialMessage<AllergyIntoleranceTest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceTest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: AllergyIntoleranceTest_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceTest {
    return new AllergyIntoleranceTest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceTest {
    return new AllergyIntoleranceTest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceTest {
    return new AllergyIntoleranceTest().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceTest | PlainMessage<AllergyIntoleranceTest> | undefined, b: AllergyIntoleranceTest | PlainMessage<AllergyIntoleranceTest> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceTest, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.AllergyIntoleranceTest.Value
 */
export class AllergyIntoleranceTest_Value extends Message<AllergyIntoleranceTest_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.AllergyIntoleranceTest.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AllergyIntoleranceTest_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AllergyIntoleranceTest.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntoleranceTest_Value {
    return new AllergyIntoleranceTest_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntoleranceTest_Value {
    return new AllergyIntoleranceTest_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntoleranceTest_Value {
    return new AllergyIntoleranceTest_Value().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntoleranceTest_Value | PlainMessage<AllergyIntoleranceTest_Value> | undefined, b: AllergyIntoleranceTest_Value | PlainMessage<AllergyIntoleranceTest_Value> | undefined): boolean {
    return proto3.util.equals(AllergyIntoleranceTest_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for authority.
 * Reference to where the rule is defined.
 * See http://hl7.org/fhir/StructureDefinition/operationoutcome-authority
 *
 * @generated from message google.fhir.stu3.proto.OperationOutcomeAuthority
 */
export class OperationOutcomeAuthority extends Message<OperationOutcomeAuthority> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<OperationOutcomeAuthority>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OperationOutcomeAuthority";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationOutcomeAuthority {
    return new OperationOutcomeAuthority().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationOutcomeAuthority {
    return new OperationOutcomeAuthority().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationOutcomeAuthority {
    return new OperationOutcomeAuthority().fromJsonString(jsonString, options);
  }

  static equals(a: OperationOutcomeAuthority | PlainMessage<OperationOutcomeAuthority> | undefined, b: OperationOutcomeAuthority | PlainMessage<OperationOutcomeAuthority> | undefined): boolean {
    return proto3.util.equals(OperationOutcomeAuthority, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for detectedIssue.
 * Reference to a contra-indication that is the basis for this error.
 * See http://hl7.org/fhir/StructureDefinition/operationoutcome-detectedIssue
 *
 * @generated from message google.fhir.stu3.proto.OperationOutcomeDetectedIssue
 */
export class OperationOutcomeDetectedIssue extends Message<OperationOutcomeDetectedIssue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<OperationOutcomeDetectedIssue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OperationOutcomeDetectedIssue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationOutcomeDetectedIssue {
    return new OperationOutcomeDetectedIssue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationOutcomeDetectedIssue {
    return new OperationOutcomeDetectedIssue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationOutcomeDetectedIssue {
    return new OperationOutcomeDetectedIssue().fromJsonString(jsonString, options);
  }

  static equals(a: OperationOutcomeDetectedIssue | PlainMessage<OperationOutcomeDetectedIssue> | undefined, b: OperationOutcomeDetectedIssue | PlainMessage<OperationOutcomeDetectedIssue> | undefined): boolean {
    return proto3.util.equals(OperationOutcomeDetectedIssue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for issue-source.
 * Source of a validation message.
 * See http://hl7.org/fhir/StructureDefinition/operationoutcome-issue-source
 *
 * @generated from message google.fhir.stu3.proto.OperationOutcomeIssueSource
 */
export class OperationOutcomeIssueSource extends Message<OperationOutcomeIssueSource> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<OperationOutcomeIssueSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OperationOutcomeIssueSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationOutcomeIssueSource {
    return new OperationOutcomeIssueSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationOutcomeIssueSource {
    return new OperationOutcomeIssueSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationOutcomeIssueSource {
    return new OperationOutcomeIssueSource().fromJsonString(jsonString, options);
  }

  static equals(a: OperationOutcomeIssueSource | PlainMessage<OperationOutcomeIssueSource> | undefined, b: OperationOutcomeIssueSource | PlainMessage<OperationOutcomeIssueSource> | undefined): boolean {
    return proto3.util.equals(OperationOutcomeIssueSource, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for alias.
 * Alias.
 * See http://hl7.org/fhir/StructureDefinition/organization-alias
 *
 * @generated from message google.fhir.stu3.proto.OrganizationAlias
 */
export class OrganizationAlias extends Message<OrganizationAlias> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<OrganizationAlias>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OrganizationAlias";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationAlias {
    return new OrganizationAlias().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationAlias {
    return new OrganizationAlias().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationAlias {
    return new OrganizationAlias().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationAlias | PlainMessage<OrganizationAlias> | undefined, b: OrganizationAlias | PlainMessage<OrganizationAlias> | undefined): boolean {
    return proto3.util.equals(OrganizationAlias, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for period.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/organization-period
 *
 * @generated from message google.fhir.stu3.proto.OrganizationPeriod
 */
export class OrganizationPeriod extends Message<OrganizationPeriod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Period value_period = 3;
   */
  valuePeriod?: Period;

  constructor(data?: PartialMessage<OrganizationPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OrganizationPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationPeriod {
    return new OrganizationPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationPeriod {
    return new OrganizationPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationPeriod {
    return new OrganizationPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationPeriod | PlainMessage<OrganizationPeriod> | undefined, b: OrganizationPeriod | PlainMessage<OrganizationPeriod> | undefined): boolean {
    return proto3.util.equals(OrganizationPeriod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for preferredContact.
 * Extension.
 * See http://hl7.org/fhir/StructureDefinition/organization-preferredContact
 *
 * @generated from message google.fhir.stu3.proto.OrganizationPreferredContact
 */
export class OrganizationPreferredContact extends Message<OrganizationPreferredContact> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<OrganizationPreferredContact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.OrganizationPreferredContact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationPreferredContact {
    return new OrganizationPreferredContact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationPreferredContact {
    return new OrganizationPreferredContact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationPreferredContact {
    return new OrganizationPreferredContact().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationPreferredContact | PlainMessage<OrganizationPreferredContact> | undefined, b: OrganizationPreferredContact | PlainMessage<OrganizationPreferredContact> | undefined): boolean {
    return proto3.util.equals(OrganizationPreferredContact, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for adoptionInfo.
 * The adoption status of the patient.
 * See http://hl7.org/fhir/StructureDefinition/patient-adoptionInfo
 *
 * @generated from message google.fhir.stu3.proto.PatientAdoptionInfo
 */
export class PatientAdoptionInfo extends Message<PatientAdoptionInfo> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<PatientAdoptionInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientAdoptionInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientAdoptionInfo {
    return new PatientAdoptionInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientAdoptionInfo {
    return new PatientAdoptionInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientAdoptionInfo {
    return new PatientAdoptionInfo().fromJsonString(jsonString, options);
  }

  static equals(a: PatientAdoptionInfo | PlainMessage<PatientAdoptionInfo> | undefined, b: PatientAdoptionInfo | PlainMessage<PatientAdoptionInfo> | undefined): boolean {
    return proto3.util.equals(PatientAdoptionInfo, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for birthTime.
 * Time of day of birth.
 * See http://hl7.org/fhir/StructureDefinition/patient-birthTime
 *
 * @generated from message google.fhir.stu3.proto.PatientBirthTime
 */
export class PatientBirthTime extends Message<PatientBirthTime> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.DateTime value_date_time = 3;
   */
  valueDateTime?: DateTime;

  constructor(data?: PartialMessage<PatientBirthTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientBirthTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date_time", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientBirthTime {
    return new PatientBirthTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientBirthTime {
    return new PatientBirthTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientBirthTime {
    return new PatientBirthTime().fromJsonString(jsonString, options);
  }

  static equals(a: PatientBirthTime | PlainMessage<PatientBirthTime> | undefined, b: PatientBirthTime | PlainMessage<PatientBirthTime> | undefined): boolean {
    return proto3.util.equals(PatientBirthTime, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for cadavericDonor.
 * Post-mortem donor status.
 * See http://hl7.org/fhir/StructureDefinition/patient-cadavericDonor
 *
 * @generated from message google.fhir.stu3.proto.PatientCadavericDonor
 */
export class PatientCadavericDonor extends Message<PatientCadavericDonor> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<PatientCadavericDonor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientCadavericDonor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientCadavericDonor {
    return new PatientCadavericDonor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientCadavericDonor {
    return new PatientCadavericDonor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientCadavericDonor {
    return new PatientCadavericDonor().fromJsonString(jsonString, options);
  }

  static equals(a: PatientCadavericDonor | PlainMessage<PatientCadavericDonor> | undefined, b: PatientCadavericDonor | PlainMessage<PatientCadavericDonor> | undefined): boolean {
    return proto3.util.equals(PatientCadavericDonor, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for citizenship.
 * Nation(s) where the patient claims citizenship.
 * See http://hl7.org/fhir/StructureDefinition/patient-citizenship
 *
 * @generated from message google.fhir.stu3.proto.PatientCitizenship
 */
export class PatientCitizenship extends Message<PatientCitizenship> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Nation code of citizenship
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Time period of citizenship
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 5;
   */
  period?: Period;

  constructor(data?: PartialMessage<PatientCitizenship>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientCitizenship";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientCitizenship {
    return new PatientCitizenship().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientCitizenship {
    return new PatientCitizenship().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientCitizenship {
    return new PatientCitizenship().fromJsonString(jsonString, options);
  }

  static equals(a: PatientCitizenship | PlainMessage<PatientCitizenship> | undefined, b: PatientCitizenship | PlainMessage<PatientCitizenship> | undefined): boolean {
    return proto3.util.equals(PatientCitizenship, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for clinicalTrial.
 * The patient's participation in clinical trials.
 * See http://hl7.org/fhir/StructureDefinition/patient-clinicalTrial
 *
 * @generated from message google.fhir.stu3.proto.PatientClinicalTrial
 */
export class PatientClinicalTrial extends Message<PatientClinicalTrial> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * National Clinical Trial number
   *
   * @generated from field: google.fhir.stu3.proto.String nct = 4 [json_name = "NCT"];
   */
  nct?: String;

  /**
   * The period of participation in the clinical trial
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 5;
   */
  period?: Period;

  /**
   * The reason for participation in the clinical trial
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept reason = 6;
   */
  reason?: CodeableConcept;

  constructor(data?: PartialMessage<PatientClinicalTrial>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientClinicalTrial";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "nct", jsonName: "NCT", kind: "message", T: String },
    { no: 5, name: "period", kind: "message", T: Period },
    { no: 6, name: "reason", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientClinicalTrial {
    return new PatientClinicalTrial().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientClinicalTrial {
    return new PatientClinicalTrial().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientClinicalTrial {
    return new PatientClinicalTrial().fromJsonString(jsonString, options);
  }

  static equals(a: PatientClinicalTrial | PlainMessage<PatientClinicalTrial> | undefined, b: PatientClinicalTrial | PlainMessage<PatientClinicalTrial> | undefined): boolean {
    return proto3.util.equals(PatientClinicalTrial, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for congregation.
 * A group of place of religious practice.
 * See http://hl7.org/fhir/StructureDefinition/patient-congregation
 *
 * @generated from message google.fhir.stu3.proto.PatientCongregation
 */
export class PatientCongregation extends Message<PatientCongregation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<PatientCongregation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientCongregation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientCongregation {
    return new PatientCongregation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientCongregation {
    return new PatientCongregation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientCongregation {
    return new PatientCongregation().fromJsonString(jsonString, options);
  }

  static equals(a: PatientCongregation | PlainMessage<PatientCongregation> | undefined, b: PatientCongregation | PlainMessage<PatientCongregation> | undefined): boolean {
    return proto3.util.equals(PatientCongregation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for disability.
 * Condition(s) limiting movement, senses, or activities.
 * See http://hl7.org/fhir/StructureDefinition/patient-disability
 *
 * @generated from message google.fhir.stu3.proto.PatientDisability
 */
export class PatientDisability extends Message<PatientDisability> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<PatientDisability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientDisability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientDisability {
    return new PatientDisability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientDisability {
    return new PatientDisability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientDisability {
    return new PatientDisability().fromJsonString(jsonString, options);
  }

  static equals(a: PatientDisability | PlainMessage<PatientDisability> | undefined, b: PatientDisability | PlainMessage<PatientDisability> | undefined): boolean {
    return proto3.util.equals(PatientDisability, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for importance.
 * Special status given the patient.
 * See http://hl7.org/fhir/StructureDefinition/patient-importance
 *
 * @generated from message google.fhir.stu3.proto.PatientImportance
 */
export class PatientImportance extends Message<PatientImportance> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<PatientImportance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientImportance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientImportance {
    return new PatientImportance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientImportance {
    return new PatientImportance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientImportance {
    return new PatientImportance().fromJsonString(jsonString, options);
  }

  static equals(a: PatientImportance | PlainMessage<PatientImportance> | undefined, b: PatientImportance | PlainMessage<PatientImportance> | undefined): boolean {
    return proto3.util.equals(PatientImportance, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for interpreterRequired.
 * Whether the patient needs an interpreter.
 * See http://hl7.org/fhir/StructureDefinition/patient-interpreterRequired
 *
 * @generated from message google.fhir.stu3.proto.PatientInterpreterRequired
 */
export class PatientInterpreterRequired extends Message<PatientInterpreterRequired> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<PatientInterpreterRequired>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientInterpreterRequired";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientInterpreterRequired {
    return new PatientInterpreterRequired().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientInterpreterRequired {
    return new PatientInterpreterRequired().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientInterpreterRequired {
    return new PatientInterpreterRequired().fromJsonString(jsonString, options);
  }

  static equals(a: PatientInterpreterRequired | PlainMessage<PatientInterpreterRequired> | undefined, b: PatientInterpreterRequired | PlainMessage<PatientInterpreterRequired> | undefined): boolean {
    return proto3.util.equals(PatientInterpreterRequired, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for mothersMaidenName.
 * Mother's Maiden name.
 * See http://hl7.org/fhir/StructureDefinition/patient-mothersMaidenName
 *
 * @generated from message google.fhir.stu3.proto.PatientMothersMaidenName
 */
export class PatientMothersMaidenName extends Message<PatientMothersMaidenName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<PatientMothersMaidenName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientMothersMaidenName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientMothersMaidenName {
    return new PatientMothersMaidenName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientMothersMaidenName {
    return new PatientMothersMaidenName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientMothersMaidenName {
    return new PatientMothersMaidenName().fromJsonString(jsonString, options);
  }

  static equals(a: PatientMothersMaidenName | PlainMessage<PatientMothersMaidenName> | undefined, b: PatientMothersMaidenName | PlainMessage<PatientMothersMaidenName> | undefined): boolean {
    return proto3.util.equals(PatientMothersMaidenName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for nationality.
 * Nationality.
 * See http://hl7.org/fhir/StructureDefinition/patient-nationality
 *
 * @generated from message google.fhir.stu3.proto.PatientNationality
 */
export class PatientNationality extends Message<PatientNationality> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Nationality Code
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Nationality Period
   *
   * @generated from field: google.fhir.stu3.proto.Period period = 5;
   */
  period?: Period;

  constructor(data?: PartialMessage<PatientNationality>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientNationality";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientNationality {
    return new PatientNationality().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientNationality {
    return new PatientNationality().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientNationality {
    return new PatientNationality().fromJsonString(jsonString, options);
  }

  static equals(a: PatientNationality | PlainMessage<PatientNationality> | undefined, b: PatientNationality | PlainMessage<PatientNationality> | undefined): boolean {
    return proto3.util.equals(PatientNationality, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for religion.
 * The patient's professed religious affiliations.
 * See http://hl7.org/fhir/StructureDefinition/patient-religion
 *
 * @generated from message google.fhir.stu3.proto.PatientReligion
 */
export class PatientReligion extends Message<PatientReligion> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<PatientReligion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PatientReligion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatientReligion {
    return new PatientReligion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatientReligion {
    return new PatientReligion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatientReligion {
    return new PatientReligion().fromJsonString(jsonString, options);
  }

  static equals(a: PatientReligion | PlainMessage<PatientReligion> | undefined, b: PatientReligion | PlainMessage<PatientReligion> | undefined): boolean {
    return proto3.util.equals(PatientReligion, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for doseType.
 * The type of dose, e.g., loading.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-doseType
 *
 * @generated from message google.fhir.stu3.proto.DoseType
 */
export class DoseType extends Message<DoseType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<DoseType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DoseType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DoseType {
    return new DoseType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DoseType {
    return new DoseType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DoseType {
    return new DoseType().fromJsonString(jsonString, options);
  }

  static equals(a: DoseType | PlainMessage<DoseType> | undefined, b: DoseType | PlainMessage<DoseType> | undefined): boolean {
    return proto3.util.equals(DoseType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for infuseOver.
 * The length of the infusion.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-infuseOver
 *
 * @generated from message google.fhir.stu3.proto.InfuseOver
 */
export class InfuseOver extends Message<InfuseOver> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Duration value_duration = 3;
   */
  valueDuration?: Duration;

  constructor(data?: PartialMessage<InfuseOver>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.InfuseOver";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InfuseOver {
    return new InfuseOver().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InfuseOver {
    return new InfuseOver().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InfuseOver {
    return new InfuseOver().fromJsonString(jsonString, options);
  }

  static equals(a: InfuseOver | PlainMessage<InfuseOver> | undefined, b: InfuseOver | PlainMessage<InfuseOver> | undefined): boolean {
    return proto3.util.equals(InfuseOver, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxDeliveryRate.
 * The maximum rate of substance administration.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-maxDeliveryRate
 *
 * @generated from message google.fhir.stu3.proto.MaxDeliveryRate
 */
export class MaxDeliveryRate extends Message<MaxDeliveryRate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Ratio value_ratio = 3;
   */
  valueRatio?: Ratio;

  constructor(data?: PartialMessage<MaxDeliveryRate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MaxDeliveryRate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_ratio", kind: "message", T: Ratio },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaxDeliveryRate {
    return new MaxDeliveryRate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaxDeliveryRate {
    return new MaxDeliveryRate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaxDeliveryRate {
    return new MaxDeliveryRate().fromJsonString(jsonString, options);
  }

  static equals(a: MaxDeliveryRate | PlainMessage<MaxDeliveryRate> | undefined, b: MaxDeliveryRate | PlainMessage<MaxDeliveryRate> | undefined): boolean {
    return proto3.util.equals(MaxDeliveryRate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxDeliveryVolume.
 * The maximum amount of fluid to infuse.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-maxDeliveryVolume
 *
 * @generated from message google.fhir.stu3.proto.MaxDeliveryVolume
 */
export class MaxDeliveryVolume extends Message<MaxDeliveryVolume> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Quantity value_quantity = 3;
   */
  valueQuantity?: Quantity;

  constructor(data?: PartialMessage<MaxDeliveryVolume>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MaxDeliveryVolume";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_quantity", kind: "message", T: Quantity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MaxDeliveryVolume {
    return new MaxDeliveryVolume().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MaxDeliveryVolume {
    return new MaxDeliveryVolume().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MaxDeliveryVolume {
    return new MaxDeliveryVolume().fromJsonString(jsonString, options);
  }

  static equals(a: MaxDeliveryVolume | PlainMessage<MaxDeliveryVolume> | undefined, b: MaxDeliveryVolume | PlainMessage<MaxDeliveryVolume> | undefined): boolean {
    return proto3.util.equals(MaxDeliveryVolume, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for minDosePerPeriod.
 * The minimum quantity of substance per period.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-minDosePerPeriod
 *
 * @generated from message google.fhir.stu3.proto.MinDosePerPeriod
 */
export class MinDosePerPeriod extends Message<MinDosePerPeriod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Ratio value_ratio = 3;
   */
  valueRatio?: Ratio;

  constructor(data?: PartialMessage<MinDosePerPeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.MinDosePerPeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_ratio", kind: "message", T: Ratio },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MinDosePerPeriod {
    return new MinDosePerPeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MinDosePerPeriod {
    return new MinDosePerPeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MinDosePerPeriod {
    return new MinDosePerPeriod().fromJsonString(jsonString, options);
  }

  static equals(a: MinDosePerPeriod | PlainMessage<MinDosePerPeriod> | undefined, b: MinDosePerPeriod | PlainMessage<MinDosePerPeriod> | undefined): boolean {
    return proto3.util.equals(MinDosePerPeriod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for rateGoal.
 * The target rate for the infusion.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-rateGoal
 *
 * @generated from message google.fhir.stu3.proto.RateGoal
 */
export class RateGoal extends Message<RateGoal> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Ratio value_ratio = 3;
   */
  valueRatio?: Ratio;

  constructor(data?: PartialMessage<RateGoal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.RateGoal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_ratio", kind: "message", T: Ratio },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateGoal {
    return new RateGoal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateGoal {
    return new RateGoal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateGoal {
    return new RateGoal().fromJsonString(jsonString, options);
  }

  static equals(a: RateGoal | PlainMessage<RateGoal> | undefined, b: RateGoal | PlainMessage<RateGoal> | undefined): boolean {
    return proto3.util.equals(RateGoal, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for rateIncrement.
 * Change in dosing rate per interval.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-rateIncrement
 *
 * @generated from message google.fhir.stu3.proto.RateIncrement
 */
export class RateIncrement extends Message<RateIncrement> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Ratio value_ratio = 3;
   */
  valueRatio?: Ratio;

  constructor(data?: PartialMessage<RateIncrement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.RateIncrement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_ratio", kind: "message", T: Ratio },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateIncrement {
    return new RateIncrement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateIncrement {
    return new RateIncrement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateIncrement {
    return new RateIncrement().fromJsonString(jsonString, options);
  }

  static equals(a: RateIncrement | PlainMessage<RateIncrement> | undefined, b: RateIncrement | PlainMessage<RateIncrement> | undefined): boolean {
    return proto3.util.equals(RateIncrement, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for rateIncrementInterval.
 * The period of time between rate increments.
 * See
 * http://hl7.org/fhir/StructureDefinition/pharmacy-core-rateIncrementInterval
 *
 * @generated from message google.fhir.stu3.proto.RateIncrementInterval
 */
export class RateIncrementInterval extends Message<RateIncrementInterval> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Duration value_duration = 3;
   */
  valueDuration?: Duration;

  constructor(data?: PartialMessage<RateIncrementInterval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.RateIncrementInterval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_duration", kind: "message", T: Duration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RateIncrementInterval {
    return new RateIncrementInterval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RateIncrementInterval {
    return new RateIncrementInterval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RateIncrementInterval {
    return new RateIncrementInterval().fromJsonString(jsonString, options);
  }

  static equals(a: RateIncrementInterval | PlainMessage<RateIncrementInterval> | undefined, b: RateIncrementInterval | PlainMessage<RateIncrementInterval> | undefined): boolean {
    return proto3.util.equals(RateIncrementInterval, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for refillsRemaining.
 * Number of refills allowed.
 * See http://hl7.org/fhir/StructureDefinition/pharmacy-core-refillsRemaining
 *
 * @generated from message google.fhir.stu3.proto.RefillsRemaining
 */
export class RefillsRemaining extends Message<RefillsRemaining> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<RefillsRemaining>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.RefillsRemaining";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefillsRemaining {
    return new RefillsRemaining().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefillsRemaining {
    return new RefillsRemaining().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefillsRemaining {
    return new RefillsRemaining().fromJsonString(jsonString, options);
  }

  static equals(a: RefillsRemaining | PlainMessage<RefillsRemaining> | undefined, b: RefillsRemaining | PlainMessage<RefillsRemaining> | undefined): boolean {
    return proto3.util.equals(RefillsRemaining, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for animalSpecies.
 * The Species of the Service Animal.
 * See http://hl7.org/fhir/StructureDefinition/practitioner-animalSpecies
 *
 * @generated from message google.fhir.stu3.proto.AnimalSpecies
 */
export class AnimalSpecies extends Message<AnimalSpecies> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<AnimalSpecies>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.AnimalSpecies";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnimalSpecies {
    return new AnimalSpecies().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnimalSpecies {
    return new AnimalSpecies().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnimalSpecies {
    return new AnimalSpecies().fromJsonString(jsonString, options);
  }

  static equals(a: AnimalSpecies | PlainMessage<AnimalSpecies> | undefined, b: AnimalSpecies | PlainMessage<AnimalSpecies> | undefined): boolean {
    return proto3.util.equals(AnimalSpecies, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for classification.
 * Classification of the provider.
 * See http://hl7.org/fhir/StructureDefinition/practitioner-classification
 *
 * @generated from message google.fhir.stu3.proto.PractitionerClassification
 */
export class PractitionerClassification extends Message<PractitionerClassification> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<PractitionerClassification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PractitionerClassification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PractitionerClassification {
    return new PractitionerClassification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PractitionerClassification {
    return new PractitionerClassification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PractitionerClassification {
    return new PractitionerClassification().fromJsonString(jsonString, options);
  }

  static equals(a: PractitionerClassification | PlainMessage<PractitionerClassification> | undefined, b: PractitionerClassification | PlainMessage<PractitionerClassification> | undefined): boolean {
    return proto3.util.equals(PractitionerClassification, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for primaryInd.
 * Indicator of primary specialty.
 * See http://hl7.org/fhir/StructureDefinition/practitionerrole-primaryInd
 *
 * @generated from message google.fhir.stu3.proto.PractitionerRolePrimaryInd
 */
export class PractitionerRolePrimaryInd extends Message<PractitionerRolePrimaryInd> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<PractitionerRolePrimaryInd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.PractitionerRolePrimaryInd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PractitionerRolePrimaryInd {
    return new PractitionerRolePrimaryInd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PractitionerRolePrimaryInd {
    return new PractitionerRolePrimaryInd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PractitionerRolePrimaryInd {
    return new PractitionerRolePrimaryInd().fromJsonString(jsonString, options);
  }

  static equals(a: PractitionerRolePrimaryInd | PlainMessage<PractitionerRolePrimaryInd> | undefined, b: PractitionerRolePrimaryInd | PlainMessage<PractitionerRolePrimaryInd> | undefined): boolean {
    return proto3.util.equals(PractitionerRolePrimaryInd, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for approachBodySite.
 * The access point or points used for this procedure.
 * See http://hl7.org/fhir/StructureDefinition/procedure-approachBodySite
 *
 * @generated from message google.fhir.stu3.proto.ProcedureApproachBodySite
 */
export class ProcedureApproachBodySite extends Message<ProcedureApproachBodySite> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ProcedureApproachBodySite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureApproachBodySite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureApproachBodySite {
    return new ProcedureApproachBodySite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureApproachBodySite {
    return new ProcedureApproachBodySite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureApproachBodySite {
    return new ProcedureApproachBodySite().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureApproachBodySite | PlainMessage<ProcedureApproachBodySite> | undefined, b: ProcedureApproachBodySite | PlainMessage<ProcedureApproachBodySite> | undefined): boolean {
    return proto3.util.equals(ProcedureApproachBodySite, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for causedBy.
 * Related item that caused this procedure.
 * See http://hl7.org/fhir/StructureDefinition/procedure-causedBy
 *
 * @generated from message google.fhir.stu3.proto.ProcedureCausedBy
 */
export class ProcedureCausedBy extends Message<ProcedureCausedBy> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.ProcedureCausedBy.Value value = 3;
   */
  value?: ProcedureCausedBy_Value;

  constructor(data?: PartialMessage<ProcedureCausedBy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureCausedBy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: ProcedureCausedBy_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureCausedBy {
    return new ProcedureCausedBy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureCausedBy {
    return new ProcedureCausedBy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureCausedBy {
    return new ProcedureCausedBy().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureCausedBy | PlainMessage<ProcedureCausedBy> | undefined, b: ProcedureCausedBy | PlainMessage<ProcedureCausedBy> | undefined): boolean {
    return proto3.util.equals(ProcedureCausedBy, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.ProcedureCausedBy.Value
 */
export class ProcedureCausedBy_Value extends Message<ProcedureCausedBy_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.ProcedureCausedBy.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProcedureCausedBy_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureCausedBy.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureCausedBy_Value {
    return new ProcedureCausedBy_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureCausedBy_Value {
    return new ProcedureCausedBy_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureCausedBy_Value {
    return new ProcedureCausedBy_Value().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureCausedBy_Value | PlainMessage<ProcedureCausedBy_Value> | undefined, b: ProcedureCausedBy_Value | PlainMessage<ProcedureCausedBy_Value> | undefined): boolean {
    return proto3.util.equals(ProcedureCausedBy_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for incisionDateTime.
 * The first incision time.
 * See http://hl7.org/fhir/StructureDefinition/procedure-incisionDateTime
 *
 * @generated from message google.fhir.stu3.proto.ProcedureIncisionDateTime
 */
export class ProcedureIncisionDateTime extends Message<ProcedureIncisionDateTime> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.DateTime value_date_time = 3;
   */
  valueDateTime?: DateTime;

  constructor(data?: PartialMessage<ProcedureIncisionDateTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureIncisionDateTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date_time", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureIncisionDateTime {
    return new ProcedureIncisionDateTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureIncisionDateTime {
    return new ProcedureIncisionDateTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureIncisionDateTime {
    return new ProcedureIncisionDateTime().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureIncisionDateTime | PlainMessage<ProcedureIncisionDateTime> | undefined, b: ProcedureIncisionDateTime | PlainMessage<ProcedureIncisionDateTime> | undefined): boolean {
    return proto3.util.equals(ProcedureIncisionDateTime, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for method.
 * The method used to perform the procedure.
 * See http://hl7.org/fhir/StructureDefinition/procedure-method
 *
 * @generated from message google.fhir.stu3.proto.ProcedureMethod
 */
export class ProcedureMethod extends Message<ProcedureMethod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ProcedureMethod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureMethod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureMethod {
    return new ProcedureMethod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureMethod {
    return new ProcedureMethod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureMethod {
    return new ProcedureMethod().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureMethod | PlainMessage<ProcedureMethod> | undefined, b: ProcedureMethod | PlainMessage<ProcedureMethod> | undefined): boolean {
    return proto3.util.equals(ProcedureMethod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for progressStatus.
 * A details procedure progress.
 * See http://hl7.org/fhir/StructureDefinition/procedure-progressStatus
 *
 * @generated from message google.fhir.stu3.proto.ProcedureProgressStatus
 */
export class ProcedureProgressStatus extends Message<ProcedureProgressStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ProcedureProgressStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureProgressStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureProgressStatus {
    return new ProcedureProgressStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureProgressStatus {
    return new ProcedureProgressStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureProgressStatus {
    return new ProcedureProgressStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureProgressStatus | PlainMessage<ProcedureProgressStatus> | undefined, b: ProcedureProgressStatus | PlainMessage<ProcedureProgressStatus> | undefined): boolean {
    return proto3.util.equals(ProcedureProgressStatus, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for schedule.
 * Schedule followed.
 * See http://hl7.org/fhir/StructureDefinition/procedure-schedule
 *
 * @generated from message google.fhir.stu3.proto.ProcedureSchedule
 */
export class ProcedureSchedule extends Message<ProcedureSchedule> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Timing value_timing = 3;
   */
  valueTiming?: Timing;

  constructor(data?: PartialMessage<ProcedureSchedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureSchedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_timing", kind: "message", T: Timing },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureSchedule {
    return new ProcedureSchedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureSchedule {
    return new ProcedureSchedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureSchedule {
    return new ProcedureSchedule().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureSchedule | PlainMessage<ProcedureSchedule> | undefined, b: ProcedureSchedule | PlainMessage<ProcedureSchedule> | undefined): boolean {
    return proto3.util.equals(ProcedureSchedule, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for targetBodySite.
 * The target point for this procedure.
 * See http://hl7.org/fhir/StructureDefinition/procedure-targetBodySite
 *
 * @generated from message google.fhir.stu3.proto.ProcedureTargetBodySite
 */
export class ProcedureTargetBodySite extends Message<ProcedureTargetBodySite> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ProcedureTargetBodySite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureTargetBodySite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureTargetBodySite {
    return new ProcedureTargetBodySite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureTargetBodySite {
    return new ProcedureTargetBodySite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureTargetBodySite {
    return new ProcedureTargetBodySite().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureTargetBodySite | PlainMessage<ProcedureTargetBodySite> | undefined, b: ProcedureTargetBodySite | PlainMessage<ProcedureTargetBodySite> | undefined): boolean {
    return proto3.util.equals(ProcedureTargetBodySite, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for approachBodySite.
 * The requested access point or points used for this procedure.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-approachBodySite
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestApproachBodySite
 */
export class ProcedureRequestApproachBodySite extends Message<ProcedureRequestApproachBodySite> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ProcedureRequestApproachBodySite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestApproachBodySite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestApproachBodySite {
    return new ProcedureRequestApproachBodySite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestApproachBodySite {
    return new ProcedureRequestApproachBodySite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestApproachBodySite {
    return new ProcedureRequestApproachBodySite().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestApproachBodySite | PlainMessage<ProcedureRequestApproachBodySite> | undefined, b: ProcedureRequestApproachBodySite | PlainMessage<ProcedureRequestApproachBodySite> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestApproachBodySite, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for authorizedBy.
 * Authorizer of the request.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-authorizedBy
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestAuthorizedBy
 */
export class ProcedureRequestAuthorizedBy extends Message<ProcedureRequestAuthorizedBy> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ProcedureRequestAuthorizedBy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestAuthorizedBy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestAuthorizedBy {
    return new ProcedureRequestAuthorizedBy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestAuthorizedBy {
    return new ProcedureRequestAuthorizedBy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestAuthorizedBy {
    return new ProcedureRequestAuthorizedBy().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestAuthorizedBy | PlainMessage<ProcedureRequestAuthorizedBy> | undefined, b: ProcedureRequestAuthorizedBy | PlainMessage<ProcedureRequestAuthorizedBy> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestAuthorizedBy, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Item.
 * The items the orderer requested.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-geneticsItem
 *
 * @generated from message google.fhir.stu3.proto.DiagnosticReportItem
 */
export class DiagnosticReportItem extends Message<DiagnosticReportItem> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Code to indicate the item (test, panel or sequence variant) being ordered
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Indicate the genetic variant ordered to be tested
   *
   * @generated from field: google.fhir.stu3.proto.Reference genetics_observation = 5;
   */
  geneticsObservation?: Reference;

  /**
   * If this item relates to specific specimens
   *
   * @generated from field: google.fhir.stu3.proto.Reference specimen = 6;
   */
  specimen?: Reference;

  /**
   * proposed | draft | planned | requested | received | accepted | in-progress
   * | review | completed | cancelled | suspended | rejected | failed
   *
   * @generated from field: google.fhir.stu3.proto.Code status = 7;
   */
  status?: Code;

  constructor(data?: PartialMessage<DiagnosticReportItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DiagnosticReportItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "genetics_observation", kind: "message", T: Reference },
    { no: 6, name: "specimen", kind: "message", T: Reference },
    { no: 7, name: "status", kind: "message", T: Code },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportItem {
    return new DiagnosticReportItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportItem {
    return new DiagnosticReportItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportItem {
    return new DiagnosticReportItem().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportItem | PlainMessage<DiagnosticReportItem> | undefined, b: DiagnosticReportItem | PlainMessage<DiagnosticReportItem> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportItem, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for precondition.
 * The condition or state of the patient for this test.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-precondition
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestPrecondition
 */
export class ProcedureRequestPrecondition extends Message<ProcedureRequestPrecondition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ProcedureRequestPrecondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestPrecondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestPrecondition {
    return new ProcedureRequestPrecondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestPrecondition {
    return new ProcedureRequestPrecondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestPrecondition {
    return new ProcedureRequestPrecondition().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestPrecondition | PlainMessage<ProcedureRequestPrecondition> | undefined, b: ProcedureRequestPrecondition | PlainMessage<ProcedureRequestPrecondition> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestPrecondition, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for questionnaireRequest.
 * Questionnaire to be ordered.
 * See
 * http://hl7.org/fhir/StructureDefinition/procedurerequest-questionnaireRequest
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest
 */
export class ProcedureRequestQuestionnaireRequest extends Message<ProcedureRequestQuestionnaireRequest> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ProcedureRequestQuestionnaireRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestQuestionnaireRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestQuestionnaireRequest {
    return new ProcedureRequestQuestionnaireRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestQuestionnaireRequest {
    return new ProcedureRequestQuestionnaireRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestQuestionnaireRequest {
    return new ProcedureRequestQuestionnaireRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestQuestionnaireRequest | PlainMessage<ProcedureRequestQuestionnaireRequest> | undefined, b: ProcedureRequestQuestionnaireRequest | PlainMessage<ProcedureRequestQuestionnaireRequest> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestQuestionnaireRequest, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRefused.
 * Reason for refusal.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-reasonRefused
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestReasonRefused
 */
export class ProcedureRequestReasonRefused extends Message<ProcedureRequestReasonRefused> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ProcedureRequestReasonRefused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestReasonRefused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestReasonRefused {
    return new ProcedureRequestReasonRefused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestReasonRefused {
    return new ProcedureRequestReasonRefused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestReasonRefused {
    return new ProcedureRequestReasonRefused().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestReasonRefused | PlainMessage<ProcedureRequestReasonRefused> | undefined, b: ProcedureRequestReasonRefused | PlainMessage<ProcedureRequestReasonRefused> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestReasonRefused, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRejected.
 * The reason the order was rejected.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-reasonRejected
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestReasonRejected
 */
export class ProcedureRequestReasonRejected extends Message<ProcedureRequestReasonRejected> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ProcedureRequestReasonRejected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestReasonRejected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestReasonRejected {
    return new ProcedureRequestReasonRejected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestReasonRejected {
    return new ProcedureRequestReasonRejected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestReasonRejected {
    return new ProcedureRequestReasonRejected().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestReasonRejected | PlainMessage<ProcedureRequestReasonRejected> | undefined, b: ProcedureRequestReasonRejected | PlainMessage<ProcedureRequestReasonRejected> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestReasonRejected, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for targetBodySite.
 * The requested target point for this procedure.
 * See http://hl7.org/fhir/StructureDefinition/procedurerequest-targetBodySite
 *
 * @generated from message google.fhir.stu3.proto.ProcedureRequestTargetBodySite
 */
export class ProcedureRequestTargetBodySite extends Message<ProcedureRequestTargetBodySite> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ProcedureRequestTargetBodySite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ProcedureRequestTargetBodySite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcedureRequestTargetBodySite {
    return new ProcedureRequestTargetBodySite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcedureRequestTargetBodySite {
    return new ProcedureRequestTargetBodySite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcedureRequestTargetBodySite {
    return new ProcedureRequestTargetBodySite().fromJsonString(jsonString, options);
  }

  static equals(a: ProcedureRequestTargetBodySite | PlainMessage<ProcedureRequestTargetBodySite> | undefined, b: ProcedureRequestTargetBodySite | PlainMessage<ProcedureRequestTargetBodySite> | undefined): boolean {
    return proto3.util.equals(ProcedureRequestTargetBodySite, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for allowedProfile.
 * Allowed profile for reference.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-allowedProfile
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireAllowedProfile
 */
export class QuestionnaireAllowedProfile extends Message<QuestionnaireAllowedProfile> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<QuestionnaireAllowedProfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireAllowedProfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireAllowedProfile {
    return new QuestionnaireAllowedProfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireAllowedProfile {
    return new QuestionnaireAllowedProfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireAllowedProfile {
    return new QuestionnaireAllowedProfile().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireAllowedProfile | PlainMessage<QuestionnaireAllowedProfile> | undefined, b: QuestionnaireAllowedProfile | PlainMessage<QuestionnaireAllowedProfile> | undefined): boolean {
    return proto3.util.equals(QuestionnaireAllowedProfile, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for allowedResource.
 * Allowed resource for reference.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-allowedResource
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireAllowedResource
 */
export class QuestionnaireAllowedResource extends Message<QuestionnaireAllowedResource> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ResourceTypeCode value_code = 3;
   */
  valueCode?: ResourceTypeCode;

  constructor(data?: PartialMessage<QuestionnaireAllowedResource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireAllowedResource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ResourceTypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireAllowedResource {
    return new QuestionnaireAllowedResource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireAllowedResource {
    return new QuestionnaireAllowedResource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireAllowedResource {
    return new QuestionnaireAllowedResource().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireAllowedResource | PlainMessage<QuestionnaireAllowedResource> | undefined, b: QuestionnaireAllowedResource | PlainMessage<QuestionnaireAllowedResource> | undefined): boolean {
    return proto3.util.equals(QuestionnaireAllowedResource, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for baseType.
 * Base Type for answer.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-baseType
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireBaseType
 */
export class QuestionnaireBaseType extends Message<QuestionnaireBaseType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.DataTypeCode value_code = 3;
   */
  valueCode?: DataTypeCode;

  constructor(data?: PartialMessage<QuestionnaireBaseType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireBaseType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: DataTypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireBaseType {
    return new QuestionnaireBaseType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireBaseType {
    return new QuestionnaireBaseType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireBaseType {
    return new QuestionnaireBaseType().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireBaseType | PlainMessage<QuestionnaireBaseType> | undefined, b: QuestionnaireBaseType | PlainMessage<QuestionnaireBaseType> | undefined): boolean {
    return proto3.util.equals(QuestionnaireBaseType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for choiceOrientation.
 * horizontal | vertical.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-choiceOrientation
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireChoiceOrientation
 */
export class QuestionnaireChoiceOrientation extends Message<QuestionnaireChoiceOrientation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.ChoiceListOrientationCode value_code = 3;
   */
  valueCode?: ChoiceListOrientationCode;

  constructor(data?: PartialMessage<QuestionnaireChoiceOrientation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireChoiceOrientation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: ChoiceListOrientationCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireChoiceOrientation {
    return new QuestionnaireChoiceOrientation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireChoiceOrientation {
    return new QuestionnaireChoiceOrientation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireChoiceOrientation {
    return new QuestionnaireChoiceOrientation().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireChoiceOrientation | PlainMessage<QuestionnaireChoiceOrientation> | undefined, b: QuestionnaireChoiceOrientation | PlainMessage<QuestionnaireChoiceOrientation> | undefined): boolean {
    return proto3.util.equals(QuestionnaireChoiceOrientation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for deMap.
 * Map linking questions to DataElements.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-deMap
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireDeMap
 */
export class QuestionnaireDeMap extends Message<QuestionnaireDeMap> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<QuestionnaireDeMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireDeMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireDeMap {
    return new QuestionnaireDeMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireDeMap {
    return new QuestionnaireDeMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireDeMap {
    return new QuestionnaireDeMap().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireDeMap | PlainMessage<QuestionnaireDeMap> | undefined, b: QuestionnaireDeMap | PlainMessage<QuestionnaireDeMap> | undefined): boolean {
    return proto3.util.equals(QuestionnaireDeMap, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for displayCategory.
 * Purpose of rendered text.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireDisplayCategory
 */
export class QuestionnaireDisplayCategory extends Message<QuestionnaireDisplayCategory> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<QuestionnaireDisplayCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireDisplayCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireDisplayCategory {
    return new QuestionnaireDisplayCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireDisplayCategory {
    return new QuestionnaireDisplayCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireDisplayCategory {
    return new QuestionnaireDisplayCategory().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireDisplayCategory | PlainMessage<QuestionnaireDisplayCategory> | undefined, b: QuestionnaireDisplayCategory | PlainMessage<QuestionnaireDisplayCategory> | undefined): boolean {
    return proto3.util.equals(QuestionnaireDisplayCategory, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for fhirType.
 * The underlying FHIR data type.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-fhirType
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireFhirType
 */
export class QuestionnaireFhirType extends Message<QuestionnaireFhirType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<QuestionnaireFhirType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireFhirType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireFhirType {
    return new QuestionnaireFhirType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireFhirType {
    return new QuestionnaireFhirType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireFhirType {
    return new QuestionnaireFhirType().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireFhirType | PlainMessage<QuestionnaireFhirType> | undefined, b: QuestionnaireFhirType | PlainMessage<QuestionnaireFhirType> | undefined): boolean {
    return proto3.util.equals(QuestionnaireFhirType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for hidden.
 * Don't display to user.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-hidden
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireHidden
 */
export class QuestionnaireHidden extends Message<QuestionnaireHidden> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<QuestionnaireHidden>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireHidden";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireHidden {
    return new QuestionnaireHidden().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireHidden {
    return new QuestionnaireHidden().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireHidden {
    return new QuestionnaireHidden().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireHidden | PlainMessage<QuestionnaireHidden> | undefined, b: QuestionnaireHidden | PlainMessage<QuestionnaireHidden> | undefined): boolean {
    return proto3.util.equals(QuestionnaireHidden, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for itemControl.
 * E.g. Fly-over, Table, Checkbox, Combo-box, Lookup, etc.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireItemControl
 */
export class QuestionnaireItemControl extends Message<QuestionnaireItemControl> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<QuestionnaireItemControl>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireItemControl";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireItemControl {
    return new QuestionnaireItemControl().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireItemControl {
    return new QuestionnaireItemControl().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireItemControl {
    return new QuestionnaireItemControl().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireItemControl | PlainMessage<QuestionnaireItemControl> | undefined, b: QuestionnaireItemControl | PlainMessage<QuestionnaireItemControl> | undefined): boolean {
    return proto3.util.equals(QuestionnaireItemControl, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for lookupQuestionnaire.
 * Questionnaire to populate a reference.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-lookupQuestionnaire
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire
 */
export class QuestionnaireLookupQuestionnaire extends Message<QuestionnaireLookupQuestionnaire> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<QuestionnaireLookupQuestionnaire>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireLookupQuestionnaire";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireLookupQuestionnaire {
    return new QuestionnaireLookupQuestionnaire().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireLookupQuestionnaire {
    return new QuestionnaireLookupQuestionnaire().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireLookupQuestionnaire {
    return new QuestionnaireLookupQuestionnaire().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireLookupQuestionnaire | PlainMessage<QuestionnaireLookupQuestionnaire> | undefined, b: QuestionnaireLookupQuestionnaire | PlainMessage<QuestionnaireLookupQuestionnaire> | undefined): boolean {
    return proto3.util.equals(QuestionnaireLookupQuestionnaire, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for maxOccurs.
 * Maximum repetitions.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-maxOccurs
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireMaxOccurs
 */
export class QuestionnaireMaxOccurs extends Message<QuestionnaireMaxOccurs> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<QuestionnaireMaxOccurs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireMaxOccurs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireMaxOccurs {
    return new QuestionnaireMaxOccurs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireMaxOccurs {
    return new QuestionnaireMaxOccurs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireMaxOccurs {
    return new QuestionnaireMaxOccurs().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireMaxOccurs | PlainMessage<QuestionnaireMaxOccurs> | undefined, b: QuestionnaireMaxOccurs | PlainMessage<QuestionnaireMaxOccurs> | undefined): boolean {
    return proto3.util.equals(QuestionnaireMaxOccurs, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for minOccurs.
 * Minimum repetitions.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-minOccurs
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireMinOccurs
 */
export class QuestionnaireMinOccurs extends Message<QuestionnaireMinOccurs> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<QuestionnaireMinOccurs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireMinOccurs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireMinOccurs {
    return new QuestionnaireMinOccurs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireMinOccurs {
    return new QuestionnaireMinOccurs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireMinOccurs {
    return new QuestionnaireMinOccurs().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireMinOccurs | PlainMessage<QuestionnaireMinOccurs> | undefined, b: QuestionnaireMinOccurs | PlainMessage<QuestionnaireMinOccurs> | undefined): boolean {
    return proto3.util.equals(QuestionnaireMinOccurs, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for optionExclusive.
 * Option is exclusive.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-optionExclusive
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireOptionExclusive
 */
export class QuestionnaireOptionExclusive extends Message<QuestionnaireOptionExclusive> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<QuestionnaireOptionExclusive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireOptionExclusive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireOptionExclusive {
    return new QuestionnaireOptionExclusive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireOptionExclusive {
    return new QuestionnaireOptionExclusive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireOptionExclusive {
    return new QuestionnaireOptionExclusive().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireOptionExclusive | PlainMessage<QuestionnaireOptionExclusive> | undefined, b: QuestionnaireOptionExclusive | PlainMessage<QuestionnaireOptionExclusive> | undefined): boolean {
    return proto3.util.equals(QuestionnaireOptionExclusive, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for optionPrefix.
 * E.g. "(a)", "1.", etc.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-optionPrefix
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireOptionPrefix
 */
export class QuestionnaireOptionPrefix extends Message<QuestionnaireOptionPrefix> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<QuestionnaireOptionPrefix>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireOptionPrefix";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireOptionPrefix {
    return new QuestionnaireOptionPrefix().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireOptionPrefix {
    return new QuestionnaireOptionPrefix().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireOptionPrefix {
    return new QuestionnaireOptionPrefix().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireOptionPrefix | PlainMessage<QuestionnaireOptionPrefix> | undefined, b: QuestionnaireOptionPrefix | PlainMessage<QuestionnaireOptionPrefix> | undefined): boolean {
    return proto3.util.equals(QuestionnaireOptionPrefix, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ordinalValue.
 * Comparison value for ordinal codes.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-ordinalValue
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireOrdinalValue
 */
export class QuestionnaireOrdinalValue extends Message<QuestionnaireOrdinalValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<QuestionnaireOrdinalValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireOrdinalValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireOrdinalValue {
    return new QuestionnaireOrdinalValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireOrdinalValue {
    return new QuestionnaireOrdinalValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireOrdinalValue {
    return new QuestionnaireOrdinalValue().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireOrdinalValue | PlainMessage<QuestionnaireOrdinalValue> | undefined, b: QuestionnaireOrdinalValue | PlainMessage<QuestionnaireOrdinalValue> | undefined): boolean {
    return proto3.util.equals(QuestionnaireOrdinalValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for referenceFilter.
 * Filter to apply when looking up references.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-referenceFilter
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireReferenceFilter
 */
export class QuestionnaireReferenceFilter extends Message<QuestionnaireReferenceFilter> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<QuestionnaireReferenceFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireReferenceFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireReferenceFilter {
    return new QuestionnaireReferenceFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireReferenceFilter {
    return new QuestionnaireReferenceFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireReferenceFilter {
    return new QuestionnaireReferenceFilter().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireReferenceFilter | PlainMessage<QuestionnaireReferenceFilter> | undefined, b: QuestionnaireReferenceFilter | PlainMessage<QuestionnaireReferenceFilter> | undefined): boolean {
    return proto3.util.equals(QuestionnaireReferenceFilter, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sourceStructureMap.
 * Map that can populate this questionnaire.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-sourceStructureMap
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireSourceStructureMap
 */
export class QuestionnaireSourceStructureMap extends Message<QuestionnaireSourceStructureMap> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<QuestionnaireSourceStructureMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireSourceStructureMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireSourceStructureMap {
    return new QuestionnaireSourceStructureMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireSourceStructureMap {
    return new QuestionnaireSourceStructureMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireSourceStructureMap {
    return new QuestionnaireSourceStructureMap().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireSourceStructureMap | PlainMessage<QuestionnaireSourceStructureMap> | undefined, b: QuestionnaireSourceStructureMap | PlainMessage<QuestionnaireSourceStructureMap> | undefined): boolean {
    return proto3.util.equals(QuestionnaireSourceStructureMap, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for studyprotocolIdentifier.
 * Study Protocol Identifier.
 * See
 * http://hl7.org/fhir/StructureDefinition/questionnaire-studyprotocolIdentifier
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier
 */
export class QuestionnaireStudyprotocolIdentifier extends Message<QuestionnaireStudyprotocolIdentifier> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Identifier value_identifier = 3;
   */
  valueIdentifier?: Identifier;

  constructor(data?: PartialMessage<QuestionnaireStudyprotocolIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireStudyprotocolIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireStudyprotocolIdentifier {
    return new QuestionnaireStudyprotocolIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireStudyprotocolIdentifier {
    return new QuestionnaireStudyprotocolIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireStudyprotocolIdentifier {
    return new QuestionnaireStudyprotocolIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireStudyprotocolIdentifier | PlainMessage<QuestionnaireStudyprotocolIdentifier> | undefined, b: QuestionnaireStudyprotocolIdentifier | PlainMessage<QuestionnaireStudyprotocolIdentifier> | undefined): boolean {
    return proto3.util.equals(QuestionnaireStudyprotocolIdentifier, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for supportLink.
 * Supporting information.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-supportLink
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireSupportLink
 */
export class QuestionnaireSupportLink extends Message<QuestionnaireSupportLink> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<QuestionnaireSupportLink>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireSupportLink";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireSupportLink {
    return new QuestionnaireSupportLink().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireSupportLink {
    return new QuestionnaireSupportLink().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireSupportLink {
    return new QuestionnaireSupportLink().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireSupportLink | PlainMessage<QuestionnaireSupportLink> | undefined, b: QuestionnaireSupportLink | PlainMessage<QuestionnaireSupportLink> | undefined): boolean {
    return proto3.util.equals(QuestionnaireSupportLink, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for targetStructureMap.
 * Map to artifacts that can be populated from this Questionnaire.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-targetStructureMap
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireTargetStructureMap
 */
export class QuestionnaireTargetStructureMap extends Message<QuestionnaireTargetStructureMap> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<QuestionnaireTargetStructureMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireTargetStructureMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireTargetStructureMap {
    return new QuestionnaireTargetStructureMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireTargetStructureMap {
    return new QuestionnaireTargetStructureMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireTargetStructureMap {
    return new QuestionnaireTargetStructureMap().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireTargetStructureMap | PlainMessage<QuestionnaireTargetStructureMap> | undefined, b: QuestionnaireTargetStructureMap | PlainMessage<QuestionnaireTargetStructureMap> | undefined): boolean {
    return proto3.util.equals(QuestionnaireTargetStructureMap, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for unit.
 * Unit for numeric answer.
 * See http://hl7.org/fhir/StructureDefinition/questionnaire-unit
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireUnit
 */
export class QuestionnaireUnit extends Message<QuestionnaireUnit> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Coding value_coding = 3;
   */
  valueCoding?: Coding;

  constructor(data?: PartialMessage<QuestionnaireUnit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireUnit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_coding", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireUnit {
    return new QuestionnaireUnit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireUnit {
    return new QuestionnaireUnit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireUnit {
    return new QuestionnaireUnit().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireUnit | PlainMessage<QuestionnaireUnit> | undefined, b: QuestionnaireUnit | PlainMessage<QuestionnaireUnit> | undefined): boolean {
    return proto3.util.equals(QuestionnaireUnit, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for usageMode.
 * capture | display | display-non-empty | capture-display |
 * capture-display-non-empty. See
 * http://hl7.org/fhir/StructureDefinition/questionnaire-usageMode
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireUsageMode
 */
export class QuestionnaireUsageMode extends Message<QuestionnaireUsageMode> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.QuestionnaireItemUsageModeCode value_code = 3;
   */
  valueCode?: QuestionnaireItemUsageModeCode;

  constructor(data?: PartialMessage<QuestionnaireUsageMode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireUsageMode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: QuestionnaireItemUsageModeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireUsageMode {
    return new QuestionnaireUsageMode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireUsageMode {
    return new QuestionnaireUsageMode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireUsageMode {
    return new QuestionnaireUsageMode().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireUsageMode | PlainMessage<QuestionnaireUsageMode> | undefined, b: QuestionnaireUsageMode | PlainMessage<QuestionnaireUsageMode> | undefined): boolean {
    return proto3.util.equals(QuestionnaireUsageMode, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for author.
 * Who answered question/group.
 * See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-author
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireResponseAuthor
 */
export class QuestionnaireResponseAuthor extends Message<QuestionnaireResponseAuthor> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value value = 3;
   */
  value?: QuestionnaireResponseAuthor_Value;

  constructor(data?: PartialMessage<QuestionnaireResponseAuthor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireResponseAuthor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: QuestionnaireResponseAuthor_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireResponseAuthor {
    return new QuestionnaireResponseAuthor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireResponseAuthor {
    return new QuestionnaireResponseAuthor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireResponseAuthor {
    return new QuestionnaireResponseAuthor().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireResponseAuthor | PlainMessage<QuestionnaireResponseAuthor> | undefined, b: QuestionnaireResponseAuthor | PlainMessage<QuestionnaireResponseAuthor> | undefined): boolean {
    return proto3.util.equals(QuestionnaireResponseAuthor, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value
 */
export class QuestionnaireResponseAuthor_Value extends Message<QuestionnaireResponseAuthor_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<QuestionnaireResponseAuthor_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireResponseAuthor.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireResponseAuthor_Value {
    return new QuestionnaireResponseAuthor_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireResponseAuthor_Value {
    return new QuestionnaireResponseAuthor_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireResponseAuthor_Value {
    return new QuestionnaireResponseAuthor_Value().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireResponseAuthor_Value | PlainMessage<QuestionnaireResponseAuthor_Value> | undefined, b: QuestionnaireResponseAuthor_Value | PlainMessage<QuestionnaireResponseAuthor_Value> | undefined): boolean {
    return proto3.util.equals(QuestionnaireResponseAuthor_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for note.
 * Comments about response.
 * See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-note
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireResponseNote
 */
export class QuestionnaireResponseNote extends Message<QuestionnaireResponseNote> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Annotation value_annotation = 3;
   */
  valueAnnotation?: Annotation;

  constructor(data?: PartialMessage<QuestionnaireResponseNote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireResponseNote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_annotation", kind: "message", T: Annotation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireResponseNote {
    return new QuestionnaireResponseNote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireResponseNote {
    return new QuestionnaireResponseNote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireResponseNote {
    return new QuestionnaireResponseNote().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireResponseNote | PlainMessage<QuestionnaireResponseNote> | undefined, b: QuestionnaireResponseNote | PlainMessage<QuestionnaireResponseNote> | undefined): boolean {
    return proto3.util.equals(QuestionnaireResponseNote, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reason.
 * Why response was created.
 * See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reason
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireResponseReason
 */
export class QuestionnaireResponseReason extends Message<QuestionnaireResponseReason> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<QuestionnaireResponseReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireResponseReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireResponseReason {
    return new QuestionnaireResponseReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireResponseReason {
    return new QuestionnaireResponseReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireResponseReason {
    return new QuestionnaireResponseReason().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireResponseReason | PlainMessage<QuestionnaireResponseReason> | undefined, b: QuestionnaireResponseReason | PlainMessage<QuestionnaireResponseReason> | undefined): boolean {
    return proto3.util.equals(QuestionnaireResponseReason, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reviewer.
 * Who verified completion of form?.
 * See http://hl7.org/fhir/StructureDefinition/questionnaireresponse-reviewer
 *
 * @generated from message google.fhir.stu3.proto.QuestionnaireResponseReviewer
 */
export class QuestionnaireResponseReviewer extends Message<QuestionnaireResponseReviewer> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<QuestionnaireResponseReviewer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.QuestionnaireResponseReviewer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionnaireResponseReviewer {
    return new QuestionnaireResponseReviewer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionnaireResponseReviewer {
    return new QuestionnaireResponseReviewer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionnaireResponseReviewer {
    return new QuestionnaireResponseReviewer().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionnaireResponseReviewer | PlainMessage<QuestionnaireResponseReviewer> | undefined, b: QuestionnaireResponseReviewer | PlainMessage<QuestionnaireResponseReviewer> | undefined): boolean {
    return proto3.util.equals(QuestionnaireResponseReviewer, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reasonRefused.
 * Reason referral was refused.
 * See http://hl7.org/fhir/StructureDefinition/referralrequest-reasonRefused
 *
 * @generated from message google.fhir.stu3.proto.ReferralRequestReasonRefused
 */
export class ReferralRequestReasonRefused extends Message<ReferralRequestReasonRefused> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<ReferralRequestReasonRefused>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ReferralRequestReasonRefused";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReferralRequestReasonRefused {
    return new ReferralRequestReasonRefused().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReferralRequestReasonRefused {
    return new ReferralRequestReasonRefused().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReferralRequestReasonRefused {
    return new ReferralRequestReasonRefused().fromJsonString(jsonString, options);
  }

  static equals(a: ReferralRequestReasonRefused | PlainMessage<ReferralRequestReasonRefused> | undefined, b: ReferralRequestReasonRefused | PlainMessage<ReferralRequestReasonRefused> | undefined): boolean {
    return proto3.util.equals(ReferralRequestReasonRefused, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for regex.
 * Regular expression pattern.
 * See http://hl7.org/fhir/StructureDefinition/regex
 *
 * @generated from message google.fhir.stu3.proto.Regex
 */
export class Regex extends Message<Regex> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<Regex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Regex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Regex {
    return new Regex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Regex {
    return new Regex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Regex {
    return new Regex().fromJsonString(jsonString, options);
  }

  static equals(a: Regex | PlainMessage<Regex> | undefined, b: Regex | PlainMessage<Regex> | undefined): boolean {
    return proto3.util.equals(Regex, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Rendered Value.
 * What should be displayed to human (if default is not appropriate).
 * See http://hl7.org/fhir/StructureDefinition/rendered-value
 *
 * @generated from message google.fhir.stu3.proto.RenderedValue
 */
export class RenderedValue extends Message<RenderedValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<RenderedValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.RenderedValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenderedValue {
    return new RenderedValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenderedValue {
    return new RenderedValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenderedValue {
    return new RenderedValue().fromJsonString(jsonString, options);
  }

  static equals(a: RenderedValue | PlainMessage<RenderedValue> | undefined, b: RenderedValue | PlainMessage<RenderedValue> | undefined): boolean {
    return proto3.util.equals(RenderedValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for markdown.
 * String equivalent with markdown.
 * See http://hl7.org/fhir/StructureDefinition/rendering-markdown
 *
 * @generated from message google.fhir.stu3.proto.StringMarkdown
 */
export class StringMarkdown extends Message<StringMarkdown> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Markdown value_markdown = 3;
   */
  valueMarkdown?: Markdown;

  constructor(data?: PartialMessage<StringMarkdown>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StringMarkdown";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_markdown", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringMarkdown {
    return new StringMarkdown().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringMarkdown {
    return new StringMarkdown().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringMarkdown {
    return new StringMarkdown().fromJsonString(jsonString, options);
  }

  static equals(a: StringMarkdown | PlainMessage<StringMarkdown> | undefined, b: StringMarkdown | PlainMessage<StringMarkdown> | undefined): boolean {
    return proto3.util.equals(StringMarkdown, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for style.
 * Html style value.
 * See http://hl7.org/fhir/StructureDefinition/rendering-style
 *
 * @generated from message google.fhir.stu3.proto.Style
 */
export class Style extends Message<Style> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<Style>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Style";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Style {
    return new Style().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Style {
    return new Style().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Style {
    return new Style().fromJsonString(jsonString, options);
  }

  static equals(a: Style | PlainMessage<Style> | undefined, b: Style | PlainMessage<Style> | undefined): boolean {
    return proto3.util.equals(Style, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for styleSensitive.
 * Are styles important for processing?.
 * See http://hl7.org/fhir/StructureDefinition/rendering-styleSensitive
 *
 * @generated from message google.fhir.stu3.proto.StyleSensitive
 */
export class StyleSensitive extends Message<StyleSensitive> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<StyleSensitive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StyleSensitive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StyleSensitive {
    return new StyleSensitive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StyleSensitive {
    return new StyleSensitive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StyleSensitive {
    return new StyleSensitive().fromJsonString(jsonString, options);
  }

  static equals(a: StyleSensitive | PlainMessage<StyleSensitive> | undefined, b: StyleSensitive | PlainMessage<StyleSensitive> | undefined): boolean {
    return proto3.util.equals(StyleSensitive, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for xhtml.
 * String equivalent with html markup.
 * See http://hl7.org/fhir/StructureDefinition/rendering-xhtml
 *
 * @generated from message google.fhir.stu3.proto.StringXhtml
 */
export class StringXhtml extends Message<StringXhtml> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<StringXhtml>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StringXhtml";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StringXhtml {
    return new StringXhtml().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StringXhtml {
    return new StringXhtml().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StringXhtml {
    return new StringXhtml().fromJsonString(jsonString, options);
  }

  static equals(a: StringXhtml | PlainMessage<StringXhtml> | undefined, b: StringXhtml | PlainMessage<StringXhtml> | undefined): boolean {
    return proto3.util.equals(StringXhtml, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for approvalDate.
 * When resource approved by publisher.
 * See http://hl7.org/fhir/StructureDefinition/resource-approvalDate
 *
 * @generated from message google.fhir.stu3.proto.ApprovalDate
 */
export class ApprovalDate extends Message<ApprovalDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Date value_date = 3;
   */
  valueDate?: Date;

  constructor(data?: PartialMessage<ApprovalDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ApprovalDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApprovalDate {
    return new ApprovalDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApprovalDate {
    return new ApprovalDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApprovalDate {
    return new ApprovalDate().fromJsonString(jsonString, options);
  }

  static equals(a: ApprovalDate | PlainMessage<ApprovalDate> | undefined, b: ApprovalDate | PlainMessage<ApprovalDate> | undefined): boolean {
    return proto3.util.equals(ApprovalDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for effectivePeriod.
 * The effective date range for the resource.
 * See http://hl7.org/fhir/StructureDefinition/resource-effectivePeriod
 *
 * @generated from message google.fhir.stu3.proto.EffectivePeriod
 */
export class EffectivePeriod extends Message<EffectivePeriod> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Period value_period = 3;
   */
  valuePeriod?: Period;

  constructor(data?: PartialMessage<EffectivePeriod>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.EffectivePeriod";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectivePeriod {
    return new EffectivePeriod().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectivePeriod {
    return new EffectivePeriod().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectivePeriod {
    return new EffectivePeriod().fromJsonString(jsonString, options);
  }

  static equals(a: EffectivePeriod | PlainMessage<EffectivePeriod> | undefined, b: EffectivePeriod | PlainMessage<EffectivePeriod> | undefined): boolean {
    return proto3.util.equals(EffectivePeriod, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for lastReviewDate.
 * Last review date for the resource.
 * See http://hl7.org/fhir/StructureDefinition/resource-lastReviewDate
 *
 * @generated from message google.fhir.stu3.proto.LastReviewDate
 */
export class LastReviewDate extends Message<LastReviewDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Date value_date = 3;
   */
  valueDate?: Date;

  constructor(data?: PartialMessage<LastReviewDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.LastReviewDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LastReviewDate {
    return new LastReviewDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LastReviewDate {
    return new LastReviewDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LastReviewDate {
    return new LastReviewDate().fromJsonString(jsonString, options);
  }

  static equals(a: LastReviewDate | PlainMessage<LastReviewDate> | undefined, b: LastReviewDate | PlainMessage<LastReviewDate> | undefined): boolean {
    return proto3.util.equals(LastReviewDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for collectionPriority.
 * Urgency for collection.
 * See http://hl7.org/fhir/StructureDefinition/specimen-collectionPriority
 *
 * @generated from message google.fhir.stu3.proto.SpecimenCollectionPriority
 */
export class SpecimenCollectionPriority extends Message<SpecimenCollectionPriority> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<SpecimenCollectionPriority>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SpecimenCollectionPriority";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenCollectionPriority {
    return new SpecimenCollectionPriority().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenCollectionPriority {
    return new SpecimenCollectionPriority().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenCollectionPriority {
    return new SpecimenCollectionPriority().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenCollectionPriority | PlainMessage<SpecimenCollectionPriority> | undefined, b: SpecimenCollectionPriority | PlainMessage<SpecimenCollectionPriority> | undefined): boolean {
    return proto3.util.equals(SpecimenCollectionPriority, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for isDryWeight.
 * Whether quantity is a dry weight.
 * See http://hl7.org/fhir/StructureDefinition/specimen-isDryWeight
 *
 * @generated from message google.fhir.stu3.proto.SpecimenIsDryWeight
 */
export class SpecimenIsDryWeight extends Message<SpecimenIsDryWeight> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<SpecimenIsDryWeight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SpecimenIsDryWeight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenIsDryWeight {
    return new SpecimenIsDryWeight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenIsDryWeight {
    return new SpecimenIsDryWeight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenIsDryWeight {
    return new SpecimenIsDryWeight().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenIsDryWeight | PlainMessage<SpecimenIsDryWeight> | undefined, b: SpecimenIsDryWeight | PlainMessage<SpecimenIsDryWeight> | undefined): boolean {
    return proto3.util.equals(SpecimenIsDryWeight, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for processingTime.
 * Time of processing.
 * See http://hl7.org/fhir/StructureDefinition/specimen-processingTime
 *
 * @generated from message google.fhir.stu3.proto.SpecimenProcessingTime
 */
export class SpecimenProcessingTime extends Message<SpecimenProcessingTime> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.SpecimenProcessingTime.Value value = 3;
   */
  value?: SpecimenProcessingTime_Value;

  constructor(data?: PartialMessage<SpecimenProcessingTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SpecimenProcessingTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: SpecimenProcessingTime_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenProcessingTime {
    return new SpecimenProcessingTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenProcessingTime {
    return new SpecimenProcessingTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenProcessingTime {
    return new SpecimenProcessingTime().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenProcessingTime | PlainMessage<SpecimenProcessingTime> | undefined, b: SpecimenProcessingTime | PlainMessage<SpecimenProcessingTime> | undefined): boolean {
    return proto3.util.equals(SpecimenProcessingTime, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.SpecimenProcessingTime.Value
 */
export class SpecimenProcessingTime_Value extends Message<SpecimenProcessingTime_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.SpecimenProcessingTime.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Period period = 1;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Duration duration = 2;
     */
    value: Duration;
    case: "duration";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SpecimenProcessingTime_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SpecimenProcessingTime.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "period", kind: "message", T: Period, oneof: "value" },
    { no: 2, name: "duration", kind: "message", T: Duration, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenProcessingTime_Value {
    return new SpecimenProcessingTime_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenProcessingTime_Value {
    return new SpecimenProcessingTime_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenProcessingTime_Value {
    return new SpecimenProcessingTime_Value().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenProcessingTime_Value | PlainMessage<SpecimenProcessingTime_Value> | undefined, b: SpecimenProcessingTime_Value | PlainMessage<SpecimenProcessingTime_Value> | undefined): boolean {
    return proto3.util.equals(SpecimenProcessingTime_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sequenceNumber.
 * The sequence number of the sample.
 * See http://hl7.org/fhir/StructureDefinition/specimen-sequenceNumber
 *
 * @generated from message google.fhir.stu3.proto.SpecimenSequenceNumber
 */
export class SpecimenSequenceNumber extends Message<SpecimenSequenceNumber> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<SpecimenSequenceNumber>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SpecimenSequenceNumber";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenSequenceNumber {
    return new SpecimenSequenceNumber().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenSequenceNumber {
    return new SpecimenSequenceNumber().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenSequenceNumber {
    return new SpecimenSequenceNumber().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenSequenceNumber | PlainMessage<SpecimenSequenceNumber> | undefined, b: SpecimenSequenceNumber | PlainMessage<SpecimenSequenceNumber> | undefined): boolean {
    return proto3.util.equals(SpecimenSequenceNumber, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for specialHandling.
 * Special handling of the specimen.
 * See http://hl7.org/fhir/StructureDefinition/specimen-specialHandling
 *
 * @generated from message google.fhir.stu3.proto.SpecimenSpecialHandling
 */
export class SpecimenSpecialHandling extends Message<SpecimenSpecialHandling> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.CodeableConcept value_codeable_concept = 3;
   */
  valueCodeableConcept?: CodeableConcept;

  constructor(data?: PartialMessage<SpecimenSpecialHandling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.SpecimenSpecialHandling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_codeable_concept", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenSpecialHandling {
    return new SpecimenSpecialHandling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenSpecialHandling {
    return new SpecimenSpecialHandling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenSpecialHandling {
    return new SpecimenSpecialHandling().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenSpecialHandling | PlainMessage<SpecimenSpecialHandling> | undefined, b: SpecimenSpecialHandling | PlainMessage<SpecimenSpecialHandling> | undefined): boolean {
    return proto3.util.equals(SpecimenSpecialHandling, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ancestor.
 * StructureDefinition this is derived from.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-ancestor
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionAncestor
 */
export class StructureDefinitionAncestor extends Message<StructureDefinitionAncestor> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<StructureDefinitionAncestor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionAncestor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionAncestor {
    return new StructureDefinitionAncestor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionAncestor {
    return new StructureDefinitionAncestor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionAncestor {
    return new StructureDefinitionAncestor().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionAncestor | PlainMessage<StructureDefinitionAncestor> | undefined, b: StructureDefinitionAncestor | PlainMessage<StructureDefinitionAncestor> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionAncestor, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for annotation.
 * Additional notes about any item in a structure definition.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-annotation
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionAnnotation
 */
export class StructureDefinitionAnnotation extends Message<StructureDefinitionAnnotation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Annotation value_annotation = 3;
   */
  valueAnnotation?: Annotation;

  constructor(data?: PartialMessage<StructureDefinitionAnnotation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionAnnotation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_annotation", kind: "message", T: Annotation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionAnnotation {
    return new StructureDefinitionAnnotation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionAnnotation {
    return new StructureDefinitionAnnotation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionAnnotation {
    return new StructureDefinitionAnnotation().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionAnnotation | PlainMessage<StructureDefinitionAnnotation> | undefined, b: StructureDefinitionAnnotation | PlainMessage<StructureDefinitionAnnotation> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionAnnotation, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ballot-status.
 * HL7 Ballot status of artifact.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-ballot-status
 *
 * @generated from message google.fhir.stu3.proto.BallotStatus
 */
export class BallotStatus extends Message<BallotStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<BallotStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.BallotStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BallotStatus {
    return new BallotStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BallotStatus {
    return new BallotStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BallotStatus {
    return new BallotStatus().fromJsonString(jsonString, options);
  }

  static equals(a: BallotStatus | PlainMessage<BallotStatus> | undefined, b: BallotStatus | PlainMessage<BallotStatus> | undefined): boolean {
    return proto3.util.equals(BallotStatus, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for category.
 * Category from official resource list.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-category
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionCategory
 */
export class StructureDefinitionCategory extends Message<StructureDefinitionCategory> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<StructureDefinitionCategory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionCategory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionCategory {
    return new StructureDefinitionCategory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionCategory {
    return new StructureDefinitionCategory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionCategory {
    return new StructureDefinitionCategory().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionCategory | PlainMessage<StructureDefinitionCategory> | undefined, b: StructureDefinitionCategory | PlainMessage<StructureDefinitionCategory> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionCategory, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for display-hint.
 * Hinting information for the narrative generator.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-display-hint
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionDisplayHint
 */
export class ElementDefinitionDisplayHint extends Message<ElementDefinitionDisplayHint> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionDisplayHint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionDisplayHint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionDisplayHint {
    return new ElementDefinitionDisplayHint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionDisplayHint {
    return new ElementDefinitionDisplayHint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionDisplayHint {
    return new ElementDefinitionDisplayHint().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionDisplayHint | PlainMessage<ElementDefinitionDisplayHint> | undefined, b: ElementDefinitionDisplayHint | PlainMessage<ElementDefinitionDisplayHint> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionDisplayHint, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for explicit-type-name.
 * Advisory - name of Type for implementations.
 * See
 * http://hl7.org/fhir/StructureDefinition/structuredefinition-explicit-type-name
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionExplicitTypeName
 */
export class ElementDefinitionExplicitTypeName extends Message<ElementDefinitionExplicitTypeName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionExplicitTypeName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionExplicitTypeName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionExplicitTypeName {
    return new ElementDefinitionExplicitTypeName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionExplicitTypeName {
    return new ElementDefinitionExplicitTypeName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionExplicitTypeName {
    return new ElementDefinitionExplicitTypeName().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionExplicitTypeName | PlainMessage<ElementDefinitionExplicitTypeName> | undefined, b: ElementDefinitionExplicitTypeName | PlainMessage<ElementDefinitionExplicitTypeName> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionExplicitTypeName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for fmm-no-warnings.
 * FMM Level (if no warnings).
 * See
 * http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm-no-warnings
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings
 */
export class StructureDefinitionFmmNoWarnings extends Message<StructureDefinitionFmmNoWarnings> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<StructureDefinitionFmmNoWarnings>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionFmmNoWarnings";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionFmmNoWarnings {
    return new StructureDefinitionFmmNoWarnings().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionFmmNoWarnings {
    return new StructureDefinitionFmmNoWarnings().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionFmmNoWarnings {
    return new StructureDefinitionFmmNoWarnings().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionFmmNoWarnings | PlainMessage<StructureDefinitionFmmNoWarnings> | undefined, b: StructureDefinitionFmmNoWarnings | PlainMessage<StructureDefinitionFmmNoWarnings> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionFmmNoWarnings, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for fmm.
 * FMM Level.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm
 *
 * @generated from message google.fhir.stu3.proto.Fmm
 */
export class Fmm extends Message<Fmm> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<Fmm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Fmm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fmm {
    return new Fmm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fmm {
    return new Fmm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fmm {
    return new Fmm().fromJsonString(jsonString, options);
  }

  static equals(a: Fmm | PlainMessage<Fmm> | undefined, b: Fmm | PlainMessage<Fmm> | undefined): boolean {
    return proto3.util.equals(Fmm, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for json-type.
 * Json type of value property.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-json-type
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionJsonType
 */
export class ElementDefinitionJsonType extends Message<ElementDefinitionJsonType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionJsonType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionJsonType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionJsonType {
    return new ElementDefinitionJsonType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionJsonType {
    return new ElementDefinitionJsonType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionJsonType {
    return new ElementDefinitionJsonType().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionJsonType | PlainMessage<ElementDefinitionJsonType> | undefined, b: ElementDefinitionJsonType | PlainMessage<ElementDefinitionJsonType> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionJsonType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for rdf-type.
 * XML (Schema) type of attribute for RDF.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-rdf-type
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionRdfType
 */
export class ElementDefinitionRdfType extends Message<ElementDefinitionRdfType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionRdfType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionRdfType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionRdfType {
    return new ElementDefinitionRdfType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionRdfType {
    return new ElementDefinitionRdfType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionRdfType {
    return new ElementDefinitionRdfType().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionRdfType | PlainMessage<ElementDefinitionRdfType> | undefined, b: ElementDefinitionRdfType | PlainMessage<ElementDefinitionRdfType> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionRdfType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for regex.
 * Regex applies to the value.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-regex
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionRegex
 */
export class ElementDefinitionRegex extends Message<ElementDefinitionRegex> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionRegex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionRegex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionRegex {
    return new ElementDefinitionRegex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionRegex {
    return new ElementDefinitionRegex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionRegex {
    return new ElementDefinitionRegex().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionRegex | PlainMessage<ElementDefinitionRegex> | undefined, b: ElementDefinitionRegex | PlainMessage<ElementDefinitionRegex> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionRegex, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for summary.
 * Additional text for the summary presentation.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-summary
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionSummary
 */
export class StructureDefinitionSummary extends Message<StructureDefinitionSummary> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Markdown value_markdown = 3;
   */
  valueMarkdown?: Markdown;

  constructor(data?: PartialMessage<StructureDefinitionSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_markdown", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionSummary {
    return new StructureDefinitionSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionSummary {
    return new StructureDefinitionSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionSummary {
    return new StructureDefinitionSummary().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionSummary | PlainMessage<StructureDefinitionSummary> | undefined, b: StructureDefinitionSummary | PlainMessage<StructureDefinitionSummary> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionSummary, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for table-name.
 * Show mappings in the summary table with this name.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-table-name
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionTableName
 */
export class StructureDefinitionTableName extends Message<StructureDefinitionTableName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<StructureDefinitionTableName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionTableName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionTableName {
    return new StructureDefinitionTableName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionTableName {
    return new StructureDefinitionTableName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionTableName {
    return new StructureDefinitionTableName().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionTableName | PlainMessage<StructureDefinitionTableName> | undefined, b: StructureDefinitionTableName | PlainMessage<StructureDefinitionTableName> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionTableName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for template-status.
 * Template Status Code (more authoring statuses).
 * See
 * http://hl7.org/fhir/StructureDefinition/structuredefinition-template-status
 *
 * @generated from message google.fhir.stu3.proto.StructureDefinitionTemplateStatus
 */
export class StructureDefinitionTemplateStatus extends Message<StructureDefinitionTemplateStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.TemplateStatusCodeCode value_code = 3;
   */
  valueCode?: TemplateStatusCodeCode;

  constructor(data?: PartialMessage<StructureDefinitionTemplateStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.StructureDefinitionTemplateStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: TemplateStatusCodeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StructureDefinitionTemplateStatus {
    return new StructureDefinitionTemplateStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StructureDefinitionTemplateStatus {
    return new StructureDefinitionTemplateStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StructureDefinitionTemplateStatus {
    return new StructureDefinitionTemplateStatus().fromJsonString(jsonString, options);
  }

  static equals(a: StructureDefinitionTemplateStatus | PlainMessage<StructureDefinitionTemplateStatus> | undefined, b: StructureDefinitionTemplateStatus | PlainMessage<StructureDefinitionTemplateStatus> | undefined): boolean {
    return proto3.util.equals(StructureDefinitionTemplateStatus, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for wg.
 * Owning Work Group.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-wg
 *
 * @generated from message google.fhir.stu3.proto.Wg
 */
export class Wg extends Message<Wg> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.HL7WorkgroupCode value_code = 3;
   */
  valueCode?: HL7WorkgroupCode;

  constructor(data?: PartialMessage<Wg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Wg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_code", kind: "message", T: HL7WorkgroupCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Wg {
    return new Wg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Wg {
    return new Wg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Wg {
    return new Wg().fromJsonString(jsonString, options);
  }

  static equals(a: Wg | PlainMessage<Wg> | undefined, b: Wg | PlainMessage<Wg> | undefined): boolean {
    return proto3.util.equals(Wg, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for xml-type.
 * XML (Schema) type of attribute.
 * See http://hl7.org/fhir/StructureDefinition/structuredefinition-xml-type
 *
 * @generated from message google.fhir.stu3.proto.ElementDefinitionXmlType
 */
export class ElementDefinitionXmlType extends Message<ElementDefinitionXmlType> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ElementDefinitionXmlType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ElementDefinitionXmlType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElementDefinitionXmlType {
    return new ElementDefinitionXmlType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElementDefinitionXmlType {
    return new ElementDefinitionXmlType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElementDefinitionXmlType {
    return new ElementDefinitionXmlType().fromJsonString(jsonString, options);
  }

  static equals(a: ElementDefinitionXmlType | PlainMessage<ElementDefinitionXmlType> | undefined, b: ElementDefinitionXmlType | PlainMessage<ElementDefinitionXmlType> | undefined): boolean {
    return proto3.util.equals(ElementDefinitionXmlType, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for candidateList.
 * List of possible owners of Task.
 * See http://hl7.org/fhir/StructureDefinition/task-candidateList
 *
 * @generated from message google.fhir.stu3.proto.TaskCandidateList
 */
export class TaskCandidateList extends Message<TaskCandidateList> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * @generated from field: google.fhir.stu3.proto.TaskCandidateList.Value value = 3;
   */
  value?: TaskCandidateList_Value;

  constructor(data?: PartialMessage<TaskCandidateList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.TaskCandidateList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value", kind: "message", T: TaskCandidateList_Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskCandidateList {
    return new TaskCandidateList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskCandidateList {
    return new TaskCandidateList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskCandidateList {
    return new TaskCandidateList().fromJsonString(jsonString, options);
  }

  static equals(a: TaskCandidateList | PlainMessage<TaskCandidateList> | undefined, b: TaskCandidateList | PlainMessage<TaskCandidateList> | undefined): boolean {
    return proto3.util.equals(TaskCandidateList, a, b);
  }
}

/**
 * Value of extension
 *
 * @generated from message google.fhir.stu3.proto.TaskCandidateList.Value
 */
export class TaskCandidateList_Value extends Message<TaskCandidateList_Value> {
  /**
   * @generated from oneof google.fhir.stu3.proto.TaskCandidateList.Value.value
   */
  value: {
    /**
     * @generated from field: google.fhir.stu3.proto.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<TaskCandidateList_Value>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.TaskCandidateList.Value";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskCandidateList_Value {
    return new TaskCandidateList_Value().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskCandidateList_Value {
    return new TaskCandidateList_Value().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskCandidateList_Value {
    return new TaskCandidateList_Value().fromJsonString(jsonString, options);
  }

  static equals(a: TaskCandidateList_Value | PlainMessage<TaskCandidateList_Value> | undefined, b: TaskCandidateList_Value | PlainMessage<TaskCandidateList_Value> | undefined): boolean {
    return proto3.util.equals(TaskCandidateList_Value, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for replaces.
 * Task(s) replaced by this Task.
 * See http://hl7.org/fhir/StructureDefinition/task-replaces
 *
 * @generated from message google.fhir.stu3.proto.TaskReplaces
 */
export class TaskReplaces extends Message<TaskReplaces> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<TaskReplaces>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.TaskReplaces";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TaskReplaces {
    return new TaskReplaces().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TaskReplaces {
    return new TaskReplaces().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TaskReplaces {
    return new TaskReplaces().fromJsonString(jsonString, options);
  }

  static equals(a: TaskReplaces | PlainMessage<TaskReplaces> | undefined, b: TaskReplaces | PlainMessage<TaskReplaces> | undefined): boolean {
    return proto3.util.equals(TaskReplaces, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for daysOfCycle.
 * Days on which the action should be performed.
 * See http://hl7.org/fhir/StructureDefinition/timing-daysOfCycle
 *
 * @generated from message google.fhir.stu3.proto.DaysOfCycle
 */
export class DaysOfCycle extends Message<DaysOfCycle> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * What day to perform
   *
   * @generated from field: repeated google.fhir.stu3.proto.Integer day = 4;
   */
  day: Integer[] = [];

  constructor(data?: PartialMessage<DaysOfCycle>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.DaysOfCycle";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "day", kind: "message", T: Integer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DaysOfCycle {
    return new DaysOfCycle().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DaysOfCycle {
    return new DaysOfCycle().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DaysOfCycle {
    return new DaysOfCycle().fromJsonString(jsonString, options);
  }

  static equals(a: DaysOfCycle | PlainMessage<DaysOfCycle> | undefined, b: DaysOfCycle | PlainMessage<DaysOfCycle> | undefined): boolean {
    return proto3.util.equals(DaysOfCycle, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for exact.
 * Whether specified times must be followed as closely as possible.
 * See http://hl7.org/fhir/StructureDefinition/timing-exact
 *
 * @generated from message google.fhir.stu3.proto.TimingExact
 */
export class TimingExact extends Message<TimingExact> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<TimingExact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.TimingExact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimingExact {
    return new TimingExact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimingExact {
    return new TimingExact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimingExact {
    return new TimingExact().fromJsonString(jsonString, options);
  }

  static equals(a: TimingExact | PlainMessage<TimingExact> | undefined, b: TimingExact | PlainMessage<TimingExact> | undefined): boolean {
    return proto3.util.equals(TimingExact, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Translation.
 * Langauge Translation (Localization).
 * See http://hl7.org/fhir/StructureDefinition/translation
 *
 * @generated from message google.fhir.stu3.proto.Translation
 */
export class Translation extends Message<Translation> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Code for Language
   *
   * @generated from field: google.fhir.stu3.proto.LanguageCode lang = 4;
   */
  lang?: LanguageCode;

  /**
   * @generated from field: google.fhir.stu3.proto.Translation.Content content = 5;
   */
  content?: Translation_Content;

  constructor(data?: PartialMessage<Translation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Translation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "lang", kind: "message", T: LanguageCode },
    { no: 5, name: "content", kind: "message", T: Translation_Content },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Translation {
    return new Translation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Translation {
    return new Translation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Translation {
    return new Translation().fromJsonString(jsonString, options);
  }

  static equals(a: Translation | PlainMessage<Translation> | undefined, b: Translation | PlainMessage<Translation> | undefined): boolean {
    return proto3.util.equals(Translation, a, b);
  }
}

/**
 * Content in other Language
 *
 * @generated from message google.fhir.stu3.proto.Translation.Content
 */
export class Translation_Content extends Message<Translation_Content> {
  /**
   * @generated from oneof google.fhir.stu3.proto.Translation.Content.content
   */
  content: {
    /**
     * @generated from field: google.fhir.stu3.proto.String string_value = 1 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.stu3.proto.Markdown markdown = 2;
     */
    value: Markdown;
    case: "markdown";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Translation_Content>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.Translation.Content";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "content" },
    { no: 2, name: "markdown", kind: "message", T: Markdown, oneof: "content" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Translation_Content {
    return new Translation_Content().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Translation_Content {
    return new Translation_Content().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Translation_Content {
    return new Translation_Content().fromJsonString(jsonString, options);
  }

  static equals(a: Translation_Content | PlainMessage<Translation_Content> | undefined, b: Translation_Content | PlainMessage<Translation_Content> | undefined): boolean {
    return proto3.util.equals(Translation_Content, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for group.
 * The group which this usage context is part of.
 * See http://hl7.org/fhir/StructureDefinition/usagecontext-group
 *
 * @generated from message google.fhir.stu3.proto.UsageContextGroup
 */
export class UsageContextGroup extends Message<UsageContextGroup> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<UsageContextGroup>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.UsageContextGroup";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsageContextGroup {
    return new UsageContextGroup().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsageContextGroup {
    return new UsageContextGroup().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsageContextGroup {
    return new UsageContextGroup().fromJsonString(jsonString, options);
  }

  static equals(a: UsageContextGroup | PlainMessage<UsageContextGroup> | undefined, b: UsageContextGroup | PlainMessage<UsageContextGroup> | undefined): boolean {
    return proto3.util.equals(UsageContextGroup, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for author.
 * User or Org actually involved in creating the value set content.
 * See http://hl7.org/fhir/StructureDefinition/valueset-author
 *
 * @generated from message google.fhir.stu3.proto.ValueSetAuthor
 */
export class ValueSetAuthor extends Message<ValueSetAuthor> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetAuthor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetAuthor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetAuthor {
    return new ValueSetAuthor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetAuthor {
    return new ValueSetAuthor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetAuthor {
    return new ValueSetAuthor().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetAuthor | PlainMessage<ValueSetAuthor> | undefined, b: ValueSetAuthor | PlainMessage<ValueSetAuthor> | undefined): boolean {
    return proto3.util.equals(ValueSetAuthor, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for caseSensitive.
 * If code is case sensitive.
 * See http://hl7.org/fhir/StructureDefinition/valueset-caseSensitive
 *
 * @generated from message google.fhir.stu3.proto.ValueSetCaseSensitive
 */
export class ValueSetCaseSensitive extends Message<ValueSetCaseSensitive> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<ValueSetCaseSensitive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetCaseSensitive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetCaseSensitive {
    return new ValueSetCaseSensitive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetCaseSensitive {
    return new ValueSetCaseSensitive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetCaseSensitive {
    return new ValueSetCaseSensitive().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetCaseSensitive | PlainMessage<ValueSetCaseSensitive> | undefined, b: ValueSetCaseSensitive | PlainMessage<ValueSetCaseSensitive> | undefined): boolean {
    return proto3.util.equals(ValueSetCaseSensitive, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for comment.
 * Human-specified notes and other documentation.
 * See http://hl7.org/fhir/StructureDefinition/valueset-comment
 *
 * @generated from message google.fhir.stu3.proto.ValueSetComment
 */
export class ValueSetComment extends Message<ValueSetComment> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Remarks or other text
   *
   * @generated from field: google.fhir.stu3.proto.String content = 4;
   */
  content?: String;

  /**
   * When the comment was created
   *
   * @generated from field: google.fhir.stu3.proto.Instant timestamp = 5;
   */
  timestamp?: Instant;

  constructor(data?: PartialMessage<ValueSetComment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetComment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "content", kind: "message", T: String },
    { no: 5, name: "timestamp", kind: "message", T: Instant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetComment {
    return new ValueSetComment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetComment {
    return new ValueSetComment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetComment {
    return new ValueSetComment().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetComment | PlainMessage<ValueSetComment> | undefined, b: ValueSetComment | PlainMessage<ValueSetComment> | undefined): boolean {
    return proto3.util.equals(ValueSetComment, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for comments.
 * Comment about the use of this code in this context.
 * See http://hl7.org/fhir/StructureDefinition/valueset-comments
 *
 * @generated from message google.fhir.stu3.proto.ValueSetComments
 */
export class ValueSetComments extends Message<ValueSetComments> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetComments>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetComments";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetComments {
    return new ValueSetComments().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetComments {
    return new ValueSetComments().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetComments {
    return new ValueSetComments().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetComments | PlainMessage<ValueSetComments> | undefined, b: ValueSetComments | PlainMessage<ValueSetComments> | undefined): boolean {
    return proto3.util.equals(ValueSetComments, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for conceptOrder.
 * Appearance order for user selection.
 * See http://hl7.org/fhir/StructureDefinition/valueset-conceptOrder
 *
 * @generated from message google.fhir.stu3.proto.ValueSetConceptOrder
 */
export class ValueSetConceptOrder extends Message<ValueSetConceptOrder> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Integer value_integer = 3;
   */
  valueInteger?: Integer;

  constructor(data?: PartialMessage<ValueSetConceptOrder>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetConceptOrder";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_integer", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetConceptOrder {
    return new ValueSetConceptOrder().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetConceptOrder {
    return new ValueSetConceptOrder().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetConceptOrder {
    return new ValueSetConceptOrder().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetConceptOrder | PlainMessage<ValueSetConceptOrder> | undefined, b: ValueSetConceptOrder | PlainMessage<ValueSetConceptOrder> | undefined): boolean {
    return proto3.util.equals(ValueSetConceptOrder, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for definition.
 * A definition for this code.
 * See http://hl7.org/fhir/StructureDefinition/valueset-definition
 *
 * @generated from message google.fhir.stu3.proto.ValueSetDefinition
 */
export class ValueSetDefinition extends Message<ValueSetDefinition> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetDefinition {
    return new ValueSetDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetDefinition {
    return new ValueSetDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetDefinition {
    return new ValueSetDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetDefinition | PlainMessage<ValueSetDefinition> | undefined, b: ValueSetDefinition | PlainMessage<ValueSetDefinition> | undefined): boolean {
    return proto3.util.equals(ValueSetDefinition, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for effectiveDate.
 * When the value set version becomes Active and is available for use.
 * See http://hl7.org/fhir/StructureDefinition/valueset-effectiveDate
 *
 * @generated from message google.fhir.stu3.proto.ValueSetEffectiveDate
 */
export class ValueSetEffectiveDate extends Message<ValueSetEffectiveDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Date value_date = 3;
   */
  valueDate?: Date;

  constructor(data?: PartialMessage<ValueSetEffectiveDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetEffectiveDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetEffectiveDate {
    return new ValueSetEffectiveDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetEffectiveDate {
    return new ValueSetEffectiveDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetEffectiveDate {
    return new ValueSetEffectiveDate().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetEffectiveDate | PlainMessage<ValueSetEffectiveDate> | undefined, b: ValueSetEffectiveDate | PlainMessage<ValueSetEffectiveDate> | undefined): boolean {
    return proto3.util.equals(ValueSetEffectiveDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for expansionSource.
 * ValueSet definition used to generate this expansion (logical URL).
 * See http://hl7.org/fhir/StructureDefinition/valueset-expansionSource
 *
 * @generated from message google.fhir.stu3.proto.ValueSetExpansionSource
 */
export class ValueSetExpansionSource extends Message<ValueSetExpansionSource> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ValueSetExpansionSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetExpansionSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetExpansionSource {
    return new ValueSetExpansionSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetExpansionSource {
    return new ValueSetExpansionSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetExpansionSource {
    return new ValueSetExpansionSource().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetExpansionSource | PlainMessage<ValueSetExpansionSource> | undefined, b: ValueSetExpansionSource | PlainMessage<ValueSetExpansionSource> | undefined): boolean {
    return proto3.util.equals(ValueSetExpansionSource, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for expirationDate.
 * When the value set version should no longer be used.
 * See http://hl7.org/fhir/StructureDefinition/valueset-expirationDate
 *
 * @generated from message google.fhir.stu3.proto.ValueSetExpirationDate
 */
export class ValueSetExpirationDate extends Message<ValueSetExpirationDate> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Date value_date = 3;
   */
  valueDate?: Date;

  constructor(data?: PartialMessage<ValueSetExpirationDate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetExpirationDate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_date", kind: "message", T: Date },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetExpirationDate {
    return new ValueSetExpirationDate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetExpirationDate {
    return new ValueSetExpirationDate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetExpirationDate {
    return new ValueSetExpirationDate().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetExpirationDate | PlainMessage<ValueSetExpirationDate> | undefined, b: ValueSetExpirationDate | PlainMessage<ValueSetExpirationDate> | undefined): boolean {
    return proto3.util.equals(ValueSetExpirationDate, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for history.
 * What has happened over time.
 * See http://hl7.org/fhir/StructureDefinition/valueset-history
 *
 * @generated from message google.fhir.stu3.proto.ValueSetHistory
 */
export class ValueSetHistory extends Message<ValueSetHistory> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * The name of this set of history entries
   *
   * @generated from field: google.fhir.stu3.proto.String name = 4;
   */
  name?: String;

  /**
   * @generated from field: repeated google.fhir.stu3.proto.ValueSetHistory.Revision revision = 5;
   */
  revision: ValueSetHistory_Revision[] = [];

  constructor(data?: PartialMessage<ValueSetHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "revision", kind: "message", T: ValueSetHistory_Revision, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetHistory {
    return new ValueSetHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetHistory {
    return new ValueSetHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetHistory {
    return new ValueSetHistory().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetHistory | PlainMessage<ValueSetHistory> | undefined, b: ValueSetHistory | PlainMessage<ValueSetHistory> | undefined): boolean {
    return proto3.util.equals(ValueSetHistory, a, b);
  }
}

/**
 * Audit of all changes for a history entry
 *
 * @generated from message google.fhir.stu3.proto.ValueSetHistory.Revision
 */
export class ValueSetHistory_Revision extends Message<ValueSetHistory_Revision> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Date the change was made
   *
   * @generated from field: google.fhir.stu3.proto.DateTime date = 4;
   */
  date?: DateTime;

  /**
   * Version marker after the change was made
   *
   * @generated from field: google.fhir.stu3.proto.String id_slice = 5;
   */
  idSlice?: String;

  /**
   * Who made the change
   *
   * @generated from field: google.fhir.stu3.proto.String author = 6;
   */
  author?: String;

  /**
   * Information about the change
   *
   * @generated from field: google.fhir.stu3.proto.String notes = 7;
   */
  notes?: String;

  constructor(data?: PartialMessage<ValueSetHistory_Revision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetHistory.Revision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 4, name: "date", kind: "message", T: DateTime },
    { no: 5, name: "id_slice", kind: "message", T: String },
    { no: 6, name: "author", kind: "message", T: String },
    { no: 7, name: "notes", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetHistory_Revision {
    return new ValueSetHistory_Revision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetHistory_Revision {
    return new ValueSetHistory_Revision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetHistory_Revision {
    return new ValueSetHistory_Revision().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetHistory_Revision | PlainMessage<ValueSetHistory_Revision> | undefined, b: ValueSetHistory_Revision | PlainMessage<ValueSetHistory_Revision> | undefined): boolean {
    return proto3.util.equals(ValueSetHistory_Revision, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for keyWord.
 * Descriptors and key terms for search.
 * See http://hl7.org/fhir/StructureDefinition/valueset-keyWord
 *
 * @generated from message google.fhir.stu3.proto.ValueSetKeyWord
 */
export class ValueSetKeyWord extends Message<ValueSetKeyWord> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetKeyWord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetKeyWord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetKeyWord {
    return new ValueSetKeyWord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetKeyWord {
    return new ValueSetKeyWord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetKeyWord {
    return new ValueSetKeyWord().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetKeyWord | PlainMessage<ValueSetKeyWord> | undefined, b: ValueSetKeyWord | PlainMessage<ValueSetKeyWord> | undefined): boolean {
    return proto3.util.equals(ValueSetKeyWord, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for label.
 * E.g. "(a)", "1.", etc.
 * See http://hl7.org/fhir/StructureDefinition/valueset-label
 *
 * @generated from message google.fhir.stu3.proto.ValueSetLabel
 */
export class ValueSetLabel extends Message<ValueSetLabel> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetLabel {
    return new ValueSetLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetLabel {
    return new ValueSetLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetLabel {
    return new ValueSetLabel().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetLabel | PlainMessage<ValueSetLabel> | undefined, b: ValueSetLabel | PlainMessage<ValueSetLabel> | undefined): boolean {
    return proto3.util.equals(ValueSetLabel, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for map.
 * A concept map relevant to interpret this value set.
 * See http://hl7.org/fhir/StructureDefinition/valueset-map
 *
 * @generated from message google.fhir.stu3.proto.ValueSetMap
 */
export class ValueSetMap extends Message<ValueSetMap> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ValueSetMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetMap {
    return new ValueSetMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetMap {
    return new ValueSetMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetMap {
    return new ValueSetMap().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetMap | PlainMessage<ValueSetMap> | undefined, b: ValueSetMap | PlainMessage<ValueSetMap> | undefined): boolean {
    return proto3.util.equals(ValueSetMap, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for ordinalValue.
 * Comparison value for ordinal codes.
 * See http://hl7.org/fhir/StructureDefinition/valueset-ordinalValue
 *
 * @generated from message google.fhir.stu3.proto.ValueSetOrdinalValue
 */
export class ValueSetOrdinalValue extends Message<ValueSetOrdinalValue> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Decimal value_decimal = 3;
   */
  valueDecimal?: Decimal;

  constructor(data?: PartialMessage<ValueSetOrdinalValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetOrdinalValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_decimal", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetOrdinalValue {
    return new ValueSetOrdinalValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetOrdinalValue {
    return new ValueSetOrdinalValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetOrdinalValue {
    return new ValueSetOrdinalValue().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetOrdinalValue | PlainMessage<ValueSetOrdinalValue> | undefined, b: ValueSetOrdinalValue | PlainMessage<ValueSetOrdinalValue> | undefined): boolean {
    return proto3.util.equals(ValueSetOrdinalValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for otherName.
 * Alternative names.
 * See http://hl7.org/fhir/StructureDefinition/valueset-otherName
 *
 * @generated from message google.fhir.stu3.proto.ValueSetOtherName
 */
export class ValueSetOtherName extends Message<ValueSetOtherName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Human readable, short and specific
   *
   * @generated from field: google.fhir.stu3.proto.String name = 4;
   */
  name?: String;

  /**
   * Which name is preferred for this language
   *
   * @generated from field: google.fhir.stu3.proto.Boolean preferred = 5;
   */
  preferred?: Boolean;

  constructor(data?: PartialMessage<ValueSetOtherName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetOtherName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "preferred", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetOtherName {
    return new ValueSetOtherName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetOtherName {
    return new ValueSetOtherName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetOtherName {
    return new ValueSetOtherName().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetOtherName | PlainMessage<ValueSetOtherName> | undefined, b: ValueSetOtherName | PlainMessage<ValueSetOtherName> | undefined): boolean {
    return proto3.util.equals(ValueSetOtherName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for reference.
 * Url of Value set the code was chosen from.
 * See http://hl7.org/fhir/StructureDefinition/valueset-reference
 *
 * @generated from message google.fhir.stu3.proto.ValueSetReference
 */
export class ValueSetReference extends Message<ValueSetReference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ValueSetReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetReference {
    return new ValueSetReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetReference {
    return new ValueSetReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetReference {
    return new ValueSetReference().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetReference | PlainMessage<ValueSetReference> | undefined, b: ValueSetReference | PlainMessage<ValueSetReference> | undefined): boolean {
    return proto3.util.equals(ValueSetReference, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for sourceReference.
 * Where did this content come from.
 * See http://hl7.org/fhir/StructureDefinition/valueset-sourceReference
 *
 * @generated from message google.fhir.stu3.proto.ValueSetSourceReference
 */
export class ValueSetSourceReference extends Message<ValueSetSourceReference> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ValueSetSourceReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetSourceReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetSourceReference {
    return new ValueSetSourceReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetSourceReference {
    return new ValueSetSourceReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetSourceReference {
    return new ValueSetSourceReference().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetSourceReference | PlainMessage<ValueSetSourceReference> | undefined, b: ValueSetSourceReference | PlainMessage<ValueSetSourceReference> | undefined): boolean {
    return proto3.util.equals(ValueSetSourceReference, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for system.
 * Code system resource.
 * See http://hl7.org/fhir/StructureDefinition/valueset-system
 *
 * @generated from message google.fhir.stu3.proto.ValueSetSystem
 */
export class ValueSetSystem extends Message<ValueSetSystem> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<ValueSetSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetSystem {
    return new ValueSetSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetSystem {
    return new ValueSetSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetSystem {
    return new ValueSetSystem().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetSystem | PlainMessage<ValueSetSystem> | undefined, b: ValueSetSystem | PlainMessage<ValueSetSystem> | undefined): boolean {
    return proto3.util.equals(ValueSetSystem, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for systemName.
 * Code system name.
 * See http://hl7.org/fhir/StructureDefinition/valueset-systemName
 *
 * @generated from message google.fhir.stu3.proto.ValueSetSystemName
 */
export class ValueSetSystemName extends Message<ValueSetSystemName> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetSystemName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetSystemName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetSystemName {
    return new ValueSetSystemName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetSystemName {
    return new ValueSetSystemName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetSystemName {
    return new ValueSetSystemName().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetSystemName | PlainMessage<ValueSetSystemName> | undefined, b: ValueSetSystemName | PlainMessage<ValueSetSystemName> | undefined): boolean {
    return proto3.util.equals(ValueSetSystemName, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for systemRef.
 * Where to find code system.
 * See http://hl7.org/fhir/StructureDefinition/valueset-systemRef
 *
 * @generated from message google.fhir.stu3.proto.ValueSetSystemRef
 */
export class ValueSetSystemRef extends Message<ValueSetSystemRef> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ValueSetSystemRef>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetSystemRef";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetSystemRef {
    return new ValueSetSystemRef().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetSystemRef {
    return new ValueSetSystemRef().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetSystemRef {
    return new ValueSetSystemRef().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetSystemRef | PlainMessage<ValueSetSystemRef> | undefined, b: ValueSetSystemRef | PlainMessage<ValueSetSystemRef> | undefined): boolean {
    return proto3.util.equals(ValueSetSystemRef, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for toocostly.
 * The expansion is incomplete because the full expansion is too large.
 * See http://hl7.org/fhir/StructureDefinition/valueset-toocostly
 *
 * @generated from message google.fhir.stu3.proto.ValueSetToocostly
 */
export class ValueSetToocostly extends Message<ValueSetToocostly> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<ValueSetToocostly>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetToocostly";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetToocostly {
    return new ValueSetToocostly().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetToocostly {
    return new ValueSetToocostly().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetToocostly {
    return new ValueSetToocostly().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetToocostly | PlainMessage<ValueSetToocostly> | undefined, b: ValueSetToocostly | PlainMessage<ValueSetToocostly> | undefined): boolean {
    return proto3.util.equals(ValueSetToocostly, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for trusted-expansion.
 * Reference to a trusted expansion.
 * See http://hl7.org/fhir/StructureDefinition/valueset-trusted-expansion
 *
 * @generated from message google.fhir.stu3.proto.ValueSetTrustedExpansion
 */
export class ValueSetTrustedExpansion extends Message<ValueSetTrustedExpansion> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Uri value_uri = 3;
   */
  valueUri?: Uri;

  constructor(data?: PartialMessage<ValueSetTrustedExpansion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetTrustedExpansion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_uri", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetTrustedExpansion {
    return new ValueSetTrustedExpansion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetTrustedExpansion {
    return new ValueSetTrustedExpansion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetTrustedExpansion {
    return new ValueSetTrustedExpansion().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetTrustedExpansion | PlainMessage<ValueSetTrustedExpansion> | undefined, b: ValueSetTrustedExpansion | PlainMessage<ValueSetTrustedExpansion> | undefined): boolean {
    return proto3.util.equals(ValueSetTrustedExpansion, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for unclosed.
 * The expansion is incomplete (perhaps because of post-coordination).
 * See http://hl7.org/fhir/StructureDefinition/valueset-unclosed
 *
 * @generated from message google.fhir.stu3.proto.ValueSetUnclosed
 */
export class ValueSetUnclosed extends Message<ValueSetUnclosed> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<ValueSetUnclosed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetUnclosed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetUnclosed {
    return new ValueSetUnclosed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetUnclosed {
    return new ValueSetUnclosed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetUnclosed {
    return new ValueSetUnclosed().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetUnclosed | PlainMessage<ValueSetUnclosed> | undefined, b: ValueSetUnclosed | PlainMessage<ValueSetUnclosed> | undefined): boolean {
    return proto3.util.equals(ValueSetUnclosed, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for usage.
 * Who has used and how?.
 * See http://hl7.org/fhir/StructureDefinition/valueset-usage
 *
 * @generated from message google.fhir.stu3.proto.ValueSetUsage
 */
export class ValueSetUsage extends Message<ValueSetUsage> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Additional Content defined by implementations
   *
   * @generated from field: repeated google.fhir.stu3.proto.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * A consumer of or client for the value set
   *
   * @generated from field: google.fhir.stu3.proto.String user = 4;
   */
  user?: String;

  /**
   * Implementation/project/standard that uses value set
   *
   * @generated from field: google.fhir.stu3.proto.String use = 5;
   */
  use?: String;

  constructor(data?: PartialMessage<ValueSetUsage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetUsage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "user", kind: "message", T: String },
    { no: 5, name: "use", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetUsage {
    return new ValueSetUsage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetUsage {
    return new ValueSetUsage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetUsage {
    return new ValueSetUsage().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetUsage | PlainMessage<ValueSetUsage> | undefined, b: ValueSetUsage | PlainMessage<ValueSetUsage> | undefined): boolean {
    return proto3.util.equals(ValueSetUsage, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for warning.
 * Extra warning about the correct use of the value set.
 * See http://hl7.org/fhir/StructureDefinition/valueset-warning
 *
 * @generated from message google.fhir.stu3.proto.ValueSetWarning
 */
export class ValueSetWarning extends Message<ValueSetWarning> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.Markdown value_markdown = 3;
   */
  valueMarkdown?: Markdown;

  constructor(data?: PartialMessage<ValueSetWarning>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetWarning";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_markdown", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetWarning {
    return new ValueSetWarning().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetWarning {
    return new ValueSetWarning().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetWarning {
    return new ValueSetWarning().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetWarning | PlainMessage<ValueSetWarning> | undefined, b: ValueSetWarning | PlainMessage<ValueSetWarning> | undefined): boolean {
    return proto3.util.equals(ValueSetWarning, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for workflowStatus.
 * Indicates the state of development of the value set.
 * See http://hl7.org/fhir/StructureDefinition/valueset-workflowStatus
 *
 * @generated from message google.fhir.stu3.proto.ValueSetWorkflowStatus
 */
export class ValueSetWorkflowStatus extends Message<ValueSetWorkflowStatus> {
  /**
   * xml:id (or equivalent in JSON)
   *
   * @generated from field: google.fhir.stu3.proto.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.stu3.proto.String value_string = 3;
   */
  valueString?: String;

  constructor(data?: PartialMessage<ValueSetWorkflowStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.stu3.proto.ValueSetWorkflowStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_string", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueSetWorkflowStatus {
    return new ValueSetWorkflowStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueSetWorkflowStatus {
    return new ValueSetWorkflowStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueSetWorkflowStatus {
    return new ValueSetWorkflowStatus().fromJsonString(jsonString, options);
  }

  static equals(a: ValueSetWorkflowStatus | PlainMessage<ValueSetWorkflowStatus> | undefined, b: ValueSetWorkflowStatus | PlainMessage<ValueSetWorkflowStatus> | undefined): boolean {
    return proto3.util.equals(ValueSetWorkflowStatus, a, b);
  }
}

