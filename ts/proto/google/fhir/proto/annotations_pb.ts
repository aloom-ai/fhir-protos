//    Copyright 2018 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// This file defines extensions to FieldOptions and MessageOptions to enable
// adding FHIR-specific metadata to the proto implementation of the FHIR spec.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/annotations.proto (package google.fhir.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum google.fhir.proto.FhirVersion
 */
export enum FhirVersion {
  /**
   * @generated from enum value: FHIR_VERSION_UNKNOWN = 0;
   */
  FHIR_VERSION_UNKNOWN = 0,

  /**
   * @generated from enum value: DSTU2 = 1;
   */
  DSTU2 = 1,

  /**
   * @generated from enum value: STU3 = 2;
   */
  STU3 = 2,

  /**
   * @generated from enum value: R4 = 4;
   */
  R4 = 4,

  /**
   * @generated from enum value: R4B = 45;
   */
  R4B = 45,

  /**
   * @generated from enum value: R5 = 5;
   */
  R5 = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(FhirVersion)
proto3.util.setEnumType(FhirVersion, "google.fhir.proto.FhirVersion", [
  { no: 0, name: "FHIR_VERSION_UNKNOWN" },
  { no: 1, name: "DSTU2" },
  { no: 2, name: "STU3" },
  { no: 4, name: "R4" },
  { no: 45, name: "R4B" },
  { no: 5, name: "R5" },
]);

/**
 * TODO(b/244184211): Unify with StructureDefinitionKindCode
 *
 * @generated from enum google.fhir.proto.StructureDefinitionKindValue
 */
export enum StructureDefinitionKindValue {
  /**
   * @generated from enum value: KIND_UNKNOWN = 0;
   */
  KIND_UNKNOWN = 0,

  /**
   * @generated from enum value: KIND_PRIMITIVE_TYPE = 1;
   */
  KIND_PRIMITIVE_TYPE = 1,

  /**
   * @generated from enum value: KIND_COMPLEX_TYPE = 2;
   */
  KIND_COMPLEX_TYPE = 2,

  /**
   * @generated from enum value: KIND_RESOURCE = 3;
   */
  KIND_RESOURCE = 3,

  /**
   * @generated from enum value: KIND_LOGICAL = 4;
   */
  KIND_LOGICAL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(StructureDefinitionKindValue)
proto3.util.setEnumType(StructureDefinitionKindValue, "google.fhir.proto.StructureDefinitionKindValue", [
  { no: 0, name: "KIND_UNKNOWN" },
  { no: 1, name: "KIND_PRIMITIVE_TYPE" },
  { no: 2, name: "KIND_COMPLEX_TYPE" },
  { no: 3, name: "KIND_RESOURCE" },
  { no: 4, name: "KIND_LOGICAL" },
]);

/**
 * To annotate cardinality constraints.
 *
 * @generated from enum google.fhir.proto.Requirement
 */
export enum Requirement {
  /**
   * @generated from enum value: NOT_REQUIRED = 0;
   */
  NOT_REQUIRED = 0,

  /**
   * @generated from enum value: REQUIRED_BY_FHIR = 1;
   */
  REQUIRED_BY_FHIR = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Requirement)
proto3.util.setEnumType(Requirement, "google.fhir.proto.Requirement", [
  { no: 0, name: "NOT_REQUIRED" },
  { no: 1, name: "REQUIRED_BY_FHIR" },
]);

/**
 * @generated from enum google.fhir.proto.SearchParameterType
 */
export enum SearchParameterType {
  /**
   * @generated from enum value: INVALID_SEARCH_PARAMETER_TYPE = 0;
   */
  INVALID_SEARCH_PARAMETER_TYPE = 0,

  /**
   * @generated from enum value: NUMBER = 1;
   */
  NUMBER = 1,

  /**
   * @generated from enum value: DATE = 2;
   */
  DATE = 2,

  /**
   * @generated from enum value: STRING = 3;
   */
  STRING = 3,

  /**
   * @generated from enum value: TOKEN = 4;
   */
  TOKEN = 4,

  /**
   * @generated from enum value: REFERENCE = 5;
   */
  REFERENCE = 5,

  /**
   * @generated from enum value: COMPOSITE = 6;
   */
  COMPOSITE = 6,

  /**
   * @generated from enum value: QUANTITY = 7;
   */
  QUANTITY = 7,

  /**
   * @generated from enum value: URI = 8;
   */
  URI = 8,

  /**
   * @generated from enum value: SPECIAL = 9;
   */
  SPECIAL = 9,
}
// Retrieve enum metadata with: proto3.getEnumType(SearchParameterType)
proto3.util.setEnumType(SearchParameterType, "google.fhir.proto.SearchParameterType", [
  { no: 0, name: "INVALID_SEARCH_PARAMETER_TYPE" },
  { no: 1, name: "NUMBER" },
  { no: 2, name: "DATE" },
  { no: 3, name: "STRING" },
  { no: 4, name: "TOKEN" },
  { no: 5, name: "REFERENCE" },
  { no: 6, name: "COMPOSITE" },
  { no: 7, name: "QUANTITY" },
  { no: 8, name: "URI" },
  { no: 9, name: "SPECIAL" },
]);

/**
 * @generated from message google.fhir.proto.SearchParameter
 */
export class SearchParameter extends Message<SearchParameter> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: google.fhir.proto.SearchParameterType type = 2;
   */
  type = SearchParameterType.INVALID_SEARCH_PARAMETER_TYPE;

  /**
   * @generated from field: string expression = 3;
   */
  expression = "";

  constructor(data?: PartialMessage<SearchParameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.proto.SearchParameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SearchParameterType) },
    { no: 3, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchParameter {
    return new SearchParameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchParameter {
    return new SearchParameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchParameter {
    return new SearchParameter().fromJsonString(jsonString, options);
  }

  static equals(a: SearchParameter | PlainMessage<SearchParameter> | undefined, b: SearchParameter | PlainMessage<SearchParameter> | undefined): boolean {
    return proto3.util.equals(SearchParameter, a, b);
  }
}

