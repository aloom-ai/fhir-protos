//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/fhirproto_extensions.proto (package google.fhir.r4.fhirproto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, PositiveInt, Reference, String } from "./core/datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for PrimitiveHasNoValue.
 * Whether or not the primitive is missing a value.
 * See https://g.co/fhir/StructureDefinition/primitiveHasNoValue
 *
 * @generated from message google.fhir.r4.fhirproto.PrimitiveHasNoValue
 */
export class PrimitiveHasNoValue extends Message<PrimitiveHasNoValue> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.r4.core.Boolean value_boolean = 3;
   */
  valueBoolean?: Boolean;

  constructor(data?: PartialMessage<PrimitiveHasNoValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.fhirproto.PrimitiveHasNoValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_boolean", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrimitiveHasNoValue {
    return new PrimitiveHasNoValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrimitiveHasNoValue {
    return new PrimitiveHasNoValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrimitiveHasNoValue {
    return new PrimitiveHasNoValue().fromJsonString(jsonString, options);
  }

  static equals(a: PrimitiveHasNoValue | PlainMessage<PrimitiveHasNoValue> | undefined, b: PrimitiveHasNoValue | PlainMessage<PrimitiveHasNoValue> | undefined): boolean {
    return proto3.util.equals(PrimitiveHasNoValue, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for OperationOutcomeSubject.
 * Indicates the FHIR resource subject of this OperationOutcome.
 * See https://g.co/fhir/medicalrecords/OperationOutcomeSubject
 *
 * @generated from message google.fhir.r4.fhirproto.OperationOutcomeSubject
 */
export class OperationOutcomeSubject extends Message<OperationOutcomeSubject> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Value of extension
   *
   * @generated from field: google.fhir.r4.core.Reference value_reference = 3;
   */
  valueReference?: Reference;

  constructor(data?: PartialMessage<OperationOutcomeSubject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.fhirproto.OperationOutcomeSubject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 3, name: "value_reference", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OperationOutcomeSubject {
    return new OperationOutcomeSubject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OperationOutcomeSubject {
    return new OperationOutcomeSubject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OperationOutcomeSubject {
    return new OperationOutcomeSubject().fromJsonString(jsonString, options);
  }

  static equals(a: OperationOutcomeSubject | PlainMessage<OperationOutcomeSubject> | undefined, b: OperationOutcomeSubject | PlainMessage<OperationOutcomeSubject> | undefined): boolean {
    return proto3.util.equals(OperationOutcomeSubject, a, b);
  }
}

/**
 * Auto-generated from StructureDefinition for Base64BinarySeparatorStride.
 * Base64Binary rendering parameters.
 * See https://g.co/fhir/StructureDefinition/base64Binary-separatorStride
 *
 * @generated from message google.fhir.r4.fhirproto.Base64BinarySeparatorStride
 */
export class Base64BinarySeparatorStride extends Message<Base64BinarySeparatorStride> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * The separator, usually a sequence of spaces.
   *
   * @generated from field: google.fhir.r4.core.String separator = 4;
   */
  separator?: String;

  /**
   * The stride.
   *
   * @generated from field: google.fhir.r4.core.PositiveInt stride = 5;
   */
  stride?: PositiveInt;

  constructor(data?: PartialMessage<Base64BinarySeparatorStride>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.fhirproto.Base64BinarySeparatorStride";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 4, name: "separator", kind: "message", T: String },
    { no: 5, name: "stride", kind: "message", T: PositiveInt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Base64BinarySeparatorStride {
    return new Base64BinarySeparatorStride().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Base64BinarySeparatorStride {
    return new Base64BinarySeparatorStride().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Base64BinarySeparatorStride {
    return new Base64BinarySeparatorStride().fromJsonString(jsonString, options);
  }

  static equals(a: Base64BinarySeparatorStride | PlainMessage<Base64BinarySeparatorStride> | undefined, b: Base64BinarySeparatorStride | PlainMessage<Base64BinarySeparatorStride> | undefined): boolean {
    return proto3.util.equals(Base64BinarySeparatorStride, a, b);
  }
}

