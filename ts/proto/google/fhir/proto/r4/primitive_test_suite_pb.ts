//    Copyright 2022 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/primitive_test_suite.proto (package google.fhir.r4.testing, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Base64Binary, Boolean, Canonical, Code, Date, DateTime, Decimal, Id, Instant, Integer, Markdown, Oid, PositiveInt, Reference, String, Time, UnsignedInt, Uri, Url, Uuid, Xhtml } from "./core/datatypes_pb.js";

/**
 * Union type of all primitives that can be tested for R4 FHIR.
 *
 * @generated from message google.fhir.r4.testing.PrimitiveProtoUnion
 */
export class PrimitiveProtoUnion extends Message<PrimitiveProtoUnion> {
  /**
   * @generated from oneof google.fhir.r4.testing.PrimitiveProtoUnion.primitive_proto_oneof
   */
  primitiveProtoOneof: {
    /**
     * @generated from field: google.fhir.r4.core.Base64Binary base64_binary = 1;
     */
    value: Base64Binary;
    case: "base64Binary";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 2;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Canonical canonical = 3;
     */
    value: Canonical;
    case: "canonical";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Code code = 4;
     */
    value: Code;
    case: "code";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 5;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 6;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Decimal decimal = 7;
     */
    value: Decimal;
    case: "decimal";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Id id = 8;
     */
    value: Id;
    case: "id";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Instant instant = 9;
     */
    value: Instant;
    case: "instant";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Integer integer = 10;
     */
    value: Integer;
    case: "integer";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Markdown markdown = 11;
     */
    value: Markdown;
    case: "markdown";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Oid oid = 12;
     */
    value: Oid;
    case: "oid";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.PositiveInt positive_int = 13;
     */
    value: PositiveInt;
    case: "positiveInt";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_proto = 14;
     */
    value: String;
    case: "stringProto";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Time time = 15;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.UnsignedInt unsigned_int = 16;
     */
    value: UnsignedInt;
    case: "unsignedInt";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Uri uri = 17;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Url url = 18;
     */
    value: Url;
    case: "url";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Uuid uuid = 19;
     */
    value: Uuid;
    case: "uuid";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Xhtml xhtml = 20;
     */
    value: Xhtml;
    case: "xhtml";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 21;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PrimitiveProtoUnion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.testing.PrimitiveProtoUnion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base64_binary", kind: "message", T: Base64Binary, oneof: "primitive_proto_oneof" },
    { no: 2, name: "boolean", kind: "message", T: Boolean, oneof: "primitive_proto_oneof" },
    { no: 3, name: "canonical", kind: "message", T: Canonical, oneof: "primitive_proto_oneof" },
    { no: 4, name: "code", kind: "message", T: Code, oneof: "primitive_proto_oneof" },
    { no: 5, name: "date", kind: "message", T: Date, oneof: "primitive_proto_oneof" },
    { no: 6, name: "date_time", kind: "message", T: DateTime, oneof: "primitive_proto_oneof" },
    { no: 7, name: "decimal", kind: "message", T: Decimal, oneof: "primitive_proto_oneof" },
    { no: 8, name: "id", kind: "message", T: Id, oneof: "primitive_proto_oneof" },
    { no: 9, name: "instant", kind: "message", T: Instant, oneof: "primitive_proto_oneof" },
    { no: 10, name: "integer", kind: "message", T: Integer, oneof: "primitive_proto_oneof" },
    { no: 11, name: "markdown", kind: "message", T: Markdown, oneof: "primitive_proto_oneof" },
    { no: 12, name: "oid", kind: "message", T: Oid, oneof: "primitive_proto_oneof" },
    { no: 13, name: "positive_int", kind: "message", T: PositiveInt, oneof: "primitive_proto_oneof" },
    { no: 14, name: "string_proto", kind: "message", T: String, oneof: "primitive_proto_oneof" },
    { no: 15, name: "time", kind: "message", T: Time, oneof: "primitive_proto_oneof" },
    { no: 16, name: "unsigned_int", kind: "message", T: UnsignedInt, oneof: "primitive_proto_oneof" },
    { no: 17, name: "uri", kind: "message", T: Uri, oneof: "primitive_proto_oneof" },
    { no: 18, name: "url", kind: "message", T: Url, oneof: "primitive_proto_oneof" },
    { no: 19, name: "uuid", kind: "message", T: Uuid, oneof: "primitive_proto_oneof" },
    { no: 20, name: "xhtml", kind: "message", T: Xhtml, oneof: "primitive_proto_oneof" },
    { no: 21, name: "reference", kind: "message", T: Reference, oneof: "primitive_proto_oneof" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrimitiveProtoUnion {
    return new PrimitiveProtoUnion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrimitiveProtoUnion {
    return new PrimitiveProtoUnion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrimitiveProtoUnion {
    return new PrimitiveProtoUnion().fromJsonString(jsonString, options);
  }

  static equals(a: PrimitiveProtoUnion | PlainMessage<PrimitiveProtoUnion> | undefined, b: PrimitiveProtoUnion | PlainMessage<PrimitiveProtoUnion> | undefined): boolean {
    return proto3.util.equals(PrimitiveProtoUnion, a, b);
  }
}

/**
 * Pair representing a FHIR primitive represented as both a json string and as a
 * proto.
 *
 * @generated from message google.fhir.r4.testing.ValidPair
 */
export class ValidPair extends Message<ValidPair> {
  /**
   * @generated from field: string json_string = 1;
   */
  jsonString = "";

  /**
   * @generated from field: google.fhir.r4.testing.PrimitiveProtoUnion proto = 2;
   */
  proto?: PrimitiveProtoUnion;

  constructor(data?: PartialMessage<ValidPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.testing.ValidPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "json_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "proto", kind: "message", T: PrimitiveProtoUnion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidPair {
    return new ValidPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidPair {
    return new ValidPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidPair {
    return new ValidPair().fromJsonString(jsonString, options);
  }

  static equals(a: ValidPair | PlainMessage<ValidPair> | undefined, b: ValidPair | PlainMessage<ValidPair> | undefined): boolean {
    return proto3.util.equals(ValidPair, a, b);
  }
}

/**
 * @generated from message google.fhir.r4.testing.PrimitiveTestSuite
 */
export class PrimitiveTestSuite extends Message<PrimitiveTestSuite> {
  /**
   * Note: The test suite will fail if any of these are empty.
   *
   * @generated from field: repeated google.fhir.r4.testing.ValidPair valid_pairs = 1;
   */
  validPairs: ValidPair[] = [];

  /**
   * @generated from field: repeated string invalid_json = 2;
   */
  invalidJson: string[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.testing.PrimitiveProtoUnion invalid_protos = 3;
   */
  invalidProtos: PrimitiveProtoUnion[] = [];

  /**
   * If it's impossible to formulate an invalid proto, set this string
   * so that the tests don't fail.
   * E.g., Boolean uses a boolean value datatype, so all values are valid
   *
   * @generated from field: string no_invalid_protos_reason = 4;
   */
  noInvalidProtosReason = "";

  constructor(data?: PartialMessage<PrimitiveTestSuite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.testing.PrimitiveTestSuite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid_pairs", kind: "message", T: ValidPair, repeated: true },
    { no: 2, name: "invalid_json", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "invalid_protos", kind: "message", T: PrimitiveProtoUnion, repeated: true },
    { no: 4, name: "no_invalid_protos_reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrimitiveTestSuite {
    return new PrimitiveTestSuite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrimitiveTestSuite {
    return new PrimitiveTestSuite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrimitiveTestSuite {
    return new PrimitiveTestSuite().fromJsonString(jsonString, options);
  }

  static equals(a: PrimitiveTestSuite | PlainMessage<PrimitiveTestSuite> | undefined, b: PrimitiveTestSuite | PlainMessage<PrimitiveTestSuite> | undefined): boolean {
    return proto3.util.equals(PrimitiveTestSuite, a, b);
  }
}

