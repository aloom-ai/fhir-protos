//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/profiles/clinical_document.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";
import { CompositionAttestationModeCode_Value, CompositionStatusCode_Value, DocumentRelationshipTypeCode_Value, ListModeCode_Value } from "../codes_pb.js";
import { V3ConfidentialityClassificationValueSet_Value } from "../valuesets_pb.js";

/**
 * Auto-generated from StructureDefinition for Clinical Document.
 * A set of resources composed into a single coherent clinical statement with
 * clinical attestation. See
 * http://hl7.org/fhir/StructureDefinition/clinicaldocument
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument
 */
export class ClinicalDocument extends Message<ClinicalDocument> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Extension
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Version-independent identifier for the Composition
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier?: Identifier;

  /**
   * @generated from field: google.fhir.r4.core.ClinicalDocument.StatusCode status = 11;
   */
  status?: ClinicalDocument_StatusCode;

  /**
   * Kind of composition (LOINC if possible)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 12;
   */
  type?: CodeableConcept;

  /**
   * Categorization of Composition
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 13;
   */
  category: CodeableConcept[] = [];

  /**
   * Who and/or what the composition is about
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 14;
   */
  subject?: Reference;

  /**
   * Context of the Composition
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 15;
   */
  encounter?: Reference;

  /**
   * Composition editing time
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 16;
   */
  date?: DateTime;

  /**
   * Who and/or what authored the composition
   *
   * @generated from field: repeated google.fhir.r4.core.Reference author = 17;
   */
  author: Reference[] = [];

  /**
   * Human Readable name/title
   *
   * @generated from field: google.fhir.r4.core.String title = 18;
   */
  title?: String;

  /**
   * @generated from field: google.fhir.r4.core.ClinicalDocument.ConfidentialityCode confidentiality = 19;
   */
  confidentiality?: ClinicalDocument_ConfidentialityCode;

  /**
   * @generated from field: repeated google.fhir.r4.core.ClinicalDocument.Attester attester = 20;
   */
  attester: ClinicalDocument_Attester[] = [];

  /**
   * Organization which maintains the composition
   *
   * @generated from field: google.fhir.r4.core.Reference custodian = 21;
   */
  custodian?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.ClinicalDocument.RelatesTo relates_to = 22;
   */
  relatesTo: ClinicalDocument_RelatesTo[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClinicalDocument.Event event = 23;
   */
  event: ClinicalDocument_Event[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClinicalDocument.Section section = 24;
   */
  section: ClinicalDocument_Section[] = [];

  /**
   * Version-specific identifier for composition
   *
   * @generated from field: repeated google.fhir.r4.core.String version_number = 25;
   */
  versionNumber: String[] = [];

  constructor(data?: PartialMessage<ClinicalDocument>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier },
    { no: 11, name: "status", kind: "message", T: ClinicalDocument_StatusCode },
    { no: 12, name: "type", kind: "message", T: CodeableConcept },
    { no: 13, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "subject", kind: "message", T: Reference },
    { no: 15, name: "encounter", kind: "message", T: Reference },
    { no: 16, name: "date", kind: "message", T: DateTime },
    { no: 17, name: "author", kind: "message", T: Reference, repeated: true },
    { no: 18, name: "title", kind: "message", T: String },
    { no: 19, name: "confidentiality", kind: "message", T: ClinicalDocument_ConfidentialityCode },
    { no: 20, name: "attester", kind: "message", T: ClinicalDocument_Attester, repeated: true },
    { no: 21, name: "custodian", kind: "message", T: Reference },
    { no: 22, name: "relates_to", kind: "message", T: ClinicalDocument_RelatesTo, repeated: true },
    { no: 23, name: "event", kind: "message", T: ClinicalDocument_Event, repeated: true },
    { no: 24, name: "section", kind: "message", T: ClinicalDocument_Section, repeated: true },
    { no: 25, name: "version_number", kind: "message", T: String, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument {
    return new ClinicalDocument().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument {
    return new ClinicalDocument().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument {
    return new ClinicalDocument().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument | PlainMessage<ClinicalDocument> | undefined, b: ClinicalDocument | PlainMessage<ClinicalDocument> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument, a, b);
  }
}

/**
 * preliminary | final | amended | entered-in-error
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.StatusCode
 */
export class ClinicalDocument_StatusCode extends Message<ClinicalDocument_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.CompositionStatusCode.Value value = 1;
   */
  value = CompositionStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(CompositionStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_StatusCode {
    return new ClinicalDocument_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_StatusCode {
    return new ClinicalDocument_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_StatusCode {
    return new ClinicalDocument_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_StatusCode | PlainMessage<ClinicalDocument_StatusCode> | undefined, b: ClinicalDocument_StatusCode | PlainMessage<ClinicalDocument_StatusCode> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_StatusCode, a, b);
  }
}

/**
 * As defined by affinity domain
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.ConfidentialityCode
 */
export class ClinicalDocument_ConfidentialityCode extends Message<ClinicalDocument_ConfidentialityCode> {
  /**
   * @generated from field: google.fhir.r4.core.V3ConfidentialityClassificationValueSet.Value value = 1;
   */
  value = V3ConfidentialityClassificationValueSet_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_ConfidentialityCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.ConfidentialityCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(V3ConfidentialityClassificationValueSet_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_ConfidentialityCode {
    return new ClinicalDocument_ConfidentialityCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_ConfidentialityCode {
    return new ClinicalDocument_ConfidentialityCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_ConfidentialityCode {
    return new ClinicalDocument_ConfidentialityCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_ConfidentialityCode | PlainMessage<ClinicalDocument_ConfidentialityCode> | undefined, b: ClinicalDocument_ConfidentialityCode | PlainMessage<ClinicalDocument_ConfidentialityCode> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_ConfidentialityCode, a, b);
  }
}

/**
 * Attests to accuracy of composition
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.Attester
 */
export class ClinicalDocument_Attester extends Message<ClinicalDocument_Attester> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ClinicalDocument.Attester.ModeCode mode = 4;
   */
  mode?: ClinicalDocument_Attester_ModeCode;

  /**
   * When the composition was attested
   *
   * @generated from field: google.fhir.r4.core.DateTime time = 5;
   */
  time?: DateTime;

  /**
   * Who attested the composition
   *
   * @generated from field: google.fhir.r4.core.Reference party = 6;
   */
  party?: Reference;

  constructor(data?: PartialMessage<ClinicalDocument_Attester>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.Attester";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "mode", kind: "message", T: ClinicalDocument_Attester_ModeCode },
    { no: 5, name: "time", kind: "message", T: DateTime },
    { no: 6, name: "party", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_Attester {
    return new ClinicalDocument_Attester().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_Attester {
    return new ClinicalDocument_Attester().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_Attester {
    return new ClinicalDocument_Attester().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_Attester | PlainMessage<ClinicalDocument_Attester> | undefined, b: ClinicalDocument_Attester | PlainMessage<ClinicalDocument_Attester> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_Attester, a, b);
  }
}

/**
 * personal | professional | legal | official
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.Attester.ModeCode
 */
export class ClinicalDocument_Attester_ModeCode extends Message<ClinicalDocument_Attester_ModeCode> {
  /**
   * @generated from field: google.fhir.r4.core.CompositionAttestationModeCode.Value value = 1;
   */
  value = CompositionAttestationModeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_Attester_ModeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.Attester.ModeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(CompositionAttestationModeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_Attester_ModeCode {
    return new ClinicalDocument_Attester_ModeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_Attester_ModeCode {
    return new ClinicalDocument_Attester_ModeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_Attester_ModeCode {
    return new ClinicalDocument_Attester_ModeCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_Attester_ModeCode | PlainMessage<ClinicalDocument_Attester_ModeCode> | undefined, b: ClinicalDocument_Attester_ModeCode | PlainMessage<ClinicalDocument_Attester_ModeCode> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_Attester_ModeCode, a, b);
  }
}

/**
 * Relationships to other compositions/documents
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.RelatesTo
 */
export class ClinicalDocument_RelatesTo extends Message<ClinicalDocument_RelatesTo> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ClinicalDocument.RelatesTo.CodeType code = 4;
   */
  code?: ClinicalDocument_RelatesTo_CodeType;

  /**
   * @generated from field: google.fhir.r4.core.ClinicalDocument.RelatesTo.TargetX target = 5;
   */
  target?: ClinicalDocument_RelatesTo_TargetX;

  constructor(data?: PartialMessage<ClinicalDocument_RelatesTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.RelatesTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: ClinicalDocument_RelatesTo_CodeType },
    { no: 5, name: "target", kind: "message", T: ClinicalDocument_RelatesTo_TargetX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_RelatesTo {
    return new ClinicalDocument_RelatesTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_RelatesTo {
    return new ClinicalDocument_RelatesTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_RelatesTo {
    return new ClinicalDocument_RelatesTo().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_RelatesTo | PlainMessage<ClinicalDocument_RelatesTo> | undefined, b: ClinicalDocument_RelatesTo | PlainMessage<ClinicalDocument_RelatesTo> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_RelatesTo, a, b);
  }
}

/**
 * replaces | transforms | signs | appends
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.RelatesTo.CodeType
 */
export class ClinicalDocument_RelatesTo_CodeType extends Message<ClinicalDocument_RelatesTo_CodeType> {
  /**
   * @generated from field: google.fhir.r4.core.DocumentRelationshipTypeCode.Value value = 1;
   */
  value = DocumentRelationshipTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_RelatesTo_CodeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.RelatesTo.CodeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DocumentRelationshipTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_RelatesTo_CodeType {
    return new ClinicalDocument_RelatesTo_CodeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_RelatesTo_CodeType {
    return new ClinicalDocument_RelatesTo_CodeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_RelatesTo_CodeType {
    return new ClinicalDocument_RelatesTo_CodeType().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_RelatesTo_CodeType | PlainMessage<ClinicalDocument_RelatesTo_CodeType> | undefined, b: ClinicalDocument_RelatesTo_CodeType | PlainMessage<ClinicalDocument_RelatesTo_CodeType> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_RelatesTo_CodeType, a, b);
  }
}

/**
 * Target of the relationship
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.RelatesTo.TargetX
 */
export class ClinicalDocument_RelatesTo_TargetX extends Message<ClinicalDocument_RelatesTo_TargetX> {
  /**
   * @generated from oneof google.fhir.r4.core.ClinicalDocument.RelatesTo.TargetX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Identifier identifier = 1;
     */
    value: Identifier;
    case: "identifier";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClinicalDocument_RelatesTo_TargetX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.RelatesTo.TargetX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "message", T: Identifier, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_RelatesTo_TargetX {
    return new ClinicalDocument_RelatesTo_TargetX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_RelatesTo_TargetX {
    return new ClinicalDocument_RelatesTo_TargetX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_RelatesTo_TargetX {
    return new ClinicalDocument_RelatesTo_TargetX().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_RelatesTo_TargetX | PlainMessage<ClinicalDocument_RelatesTo_TargetX> | undefined, b: ClinicalDocument_RelatesTo_TargetX | PlainMessage<ClinicalDocument_RelatesTo_TargetX> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_RelatesTo_TargetX, a, b);
  }
}

/**
 * The clinical service(s) being documented
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.Event
 */
export class ClinicalDocument_Event extends Message<ClinicalDocument_Event> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Code(s) that apply to the event being documented
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept code = 4;
   */
  code: CodeableConcept[] = [];

  /**
   * The period covered by the documentation
   *
   * @generated from field: google.fhir.r4.core.Period period = 5;
   */
  period?: Period;

  /**
   * The event(s) being documented
   *
   * @generated from field: repeated google.fhir.r4.core.Reference detail = 6;
   */
  detail: Reference[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_Event>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.Event";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 5, name: "period", kind: "message", T: Period },
    { no: 6, name: "detail", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_Event {
    return new ClinicalDocument_Event().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_Event {
    return new ClinicalDocument_Event().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_Event {
    return new ClinicalDocument_Event().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_Event | PlainMessage<ClinicalDocument_Event> | undefined, b: ClinicalDocument_Event | PlainMessage<ClinicalDocument_Event> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_Event, a, b);
  }
}

/**
 * Composition is broken into sections
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.Section
 */
export class ClinicalDocument_Section extends Message<ClinicalDocument_Section> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Label for section (e.g. for ToC)
   *
   * @generated from field: google.fhir.r4.core.String title = 4;
   */
  title?: String;

  /**
   * Classification of section (recommended)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 5;
   */
  code?: CodeableConcept;

  /**
   * Who and/or what authored the section
   *
   * @generated from field: repeated google.fhir.r4.core.Reference author = 6;
   */
  author: Reference[] = [];

  /**
   * Who/what the section is about, when it is not about the subject of
   * composition
   *
   * @generated from field: google.fhir.r4.core.Reference focus = 7;
   */
  focus?: Reference;

  /**
   * Text summary of the section, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 8;
   */
  text?: Narrative;

  /**
   * @generated from field: google.fhir.r4.core.ClinicalDocument.Section.ModeCode mode = 9;
   */
  mode?: ClinicalDocument_Section_ModeCode;

  /**
   * Order of section entries
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept ordered_by = 10;
   */
  orderedBy?: CodeableConcept;

  /**
   * A reference to data that supports this section
   *
   * @generated from field: repeated google.fhir.r4.core.Reference entry = 11;
   */
  entry: Reference[] = [];

  /**
   * Why the section is empty
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept empty_reason = 12;
   */
  emptyReason?: CodeableConcept;

  /**
   * Nested Section
   *
   * @generated from field: repeated google.fhir.r4.core.ClinicalDocument.Section section = 13;
   */
  section: ClinicalDocument_Section[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_Section>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.Section";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "title", kind: "message", T: String },
    { no: 5, name: "code", kind: "message", T: CodeableConcept },
    { no: 6, name: "author", kind: "message", T: Reference, repeated: true },
    { no: 7, name: "focus", kind: "message", T: Reference },
    { no: 8, name: "text", kind: "message", T: Narrative },
    { no: 9, name: "mode", kind: "message", T: ClinicalDocument_Section_ModeCode },
    { no: 10, name: "ordered_by", kind: "message", T: CodeableConcept },
    { no: 11, name: "entry", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "empty_reason", kind: "message", T: CodeableConcept },
    { no: 13, name: "section", kind: "message", T: ClinicalDocument_Section, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_Section {
    return new ClinicalDocument_Section().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_Section {
    return new ClinicalDocument_Section().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_Section {
    return new ClinicalDocument_Section().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_Section | PlainMessage<ClinicalDocument_Section> | undefined, b: ClinicalDocument_Section | PlainMessage<ClinicalDocument_Section> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_Section, a, b);
  }
}

/**
 * working | snapshot | changes
 *
 * @generated from message google.fhir.r4.core.ClinicalDocument.Section.ModeCode
 */
export class ClinicalDocument_Section_ModeCode extends Message<ClinicalDocument_Section_ModeCode> {
  /**
   * @generated from field: google.fhir.r4.core.ListModeCode.Value value = 1;
   */
  value = ListModeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClinicalDocument_Section_ModeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalDocument.Section.ModeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ListModeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalDocument_Section_ModeCode {
    return new ClinicalDocument_Section_ModeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalDocument_Section_ModeCode {
    return new ClinicalDocument_Section_ModeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalDocument_Section_ModeCode {
    return new ClinicalDocument_Section_ModeCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalDocument_Section_ModeCode | PlainMessage<ClinicalDocument_Section_ModeCode> | undefined, b: ClinicalDocument_Section_ModeCode | PlainMessage<ClinicalDocument_Section_ModeCode> | undefined): boolean {
    return proto3.util.equals(ClinicalDocument_Section_ModeCode, a, b);
  }
}

