//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/profiles/ldl_cholesterol.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Boolean, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Instant, Integer, Meta, Narrative, Period, Quantity, Range, Ratio, Reference, SampledData, SimpleQuantity, String, Time, Timing, Uri } from "../datatypes_pb.js";
import { ObservationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Example Lipid Profile.
 * LDL Cholesterol Result.
 * See http://hl7.org/fhir/StructureDefinition/ldlcholesterol
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol
 */
export class LdlCholesterol extends Message<LdlCholesterol> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for observation
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Fulfills plan, proposal or order
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 11;
   */
  basedOn: Reference[] = [];

  /**
   * Part of referenced event
   *
   * @generated from field: repeated google.fhir.r4.core.Reference part_of = 12;
   */
  partOf: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.LdlCholesterol.StatusCode status = 13;
   */
  status?: LdlCholesterol_StatusCode;

  /**
   * Classification of  type of observation
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 14;
   */
  category: CodeableConcept[] = [];

  /**
   * LDL Cholesterol -measured or calculated per code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 15;
   */
  code?: CodeableConcept;

  /**
   * Who and/or what the observation is about
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 16;
   */
  subject?: Reference;

  /**
   * What the observation is about, when it is not about the subject of record
   *
   * @generated from field: repeated google.fhir.r4.core.Reference focus = 17;
   */
  focus: Reference[] = [];

  /**
   * Healthcare event during which this observation is made
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 18;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.LdlCholesterol.EffectiveX effective = 19;
   */
  effective?: LdlCholesterol_EffectiveX;

  /**
   * Date/Time this version was made available
   *
   * @generated from field: google.fhir.r4.core.Instant issued = 20;
   */
  issued?: Instant;

  /**
   * Who is responsible for the observation
   *
   * @generated from field: repeated google.fhir.r4.core.Reference performer = 21;
   */
  performer: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.LdlCholesterol.ValueX value = 22;
   */
  value?: LdlCholesterol_ValueX;

  /**
   * Why the result is missing
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept data_absent_reason = 23;
   */
  dataAbsentReason?: CodeableConcept;

  /**
   * + | ++ | +++ | - | -- | ---
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept interpretation = 24;
   */
  interpretation?: CodeableConcept;

  /**
   * Comments about result
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 25;
   */
  note: Annotation[] = [];

  /**
   * Observed body part
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept body_site = 26;
   */
  bodySite?: CodeableConcept;

  /**
   * How it was done
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 27;
   */
  method?: CodeableConcept;

  /**
   * Specimen used for this observation
   *
   * @generated from field: google.fhir.r4.core.Reference specimen = 28;
   */
  specimen?: Reference;

  /**
   * (Measurement) Device
   *
   * @generated from field: google.fhir.r4.core.Reference device = 29;
   */
  device?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.LdlCholesterol.ReferenceRange reference_range = 30;
   */
  referenceRange?: LdlCholesterol_ReferenceRange;

  /**
   * @generated from field: repeated google.fhir.r4.core.LdlCholesterol.Component component = 33;
   */
  component: LdlCholesterol_Component[] = [];

  constructor(data?: PartialMessage<LdlCholesterol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "part_of", kind: "message", T: Reference, repeated: true },
    { no: 13, name: "status", kind: "message", T: LdlCholesterol_StatusCode },
    { no: 14, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 15, name: "code", kind: "message", T: CodeableConcept },
    { no: 16, name: "subject", kind: "message", T: Reference },
    { no: 17, name: "focus", kind: "message", T: Reference, repeated: true },
    { no: 18, name: "encounter", kind: "message", T: Reference },
    { no: 19, name: "effective", kind: "message", T: LdlCholesterol_EffectiveX },
    { no: 20, name: "issued", kind: "message", T: Instant },
    { no: 21, name: "performer", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "value", kind: "message", T: LdlCholesterol_ValueX },
    { no: 23, name: "data_absent_reason", kind: "message", T: CodeableConcept },
    { no: 24, name: "interpretation", kind: "message", T: CodeableConcept },
    { no: 25, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 26, name: "body_site", kind: "message", T: CodeableConcept },
    { no: 27, name: "method", kind: "message", T: CodeableConcept },
    { no: 28, name: "specimen", kind: "message", T: Reference },
    { no: 29, name: "device", kind: "message", T: Reference },
    { no: 30, name: "reference_range", kind: "message", T: LdlCholesterol_ReferenceRange },
    { no: 33, name: "component", kind: "message", T: LdlCholesterol_Component, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol {
    return new LdlCholesterol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol {
    return new LdlCholesterol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol {
    return new LdlCholesterol().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol | PlainMessage<LdlCholesterol> | undefined, b: LdlCholesterol | PlainMessage<LdlCholesterol> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol, a, b);
  }
}

/**
 * registered | preliminary | final | amended +
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol.StatusCode
 */
export class LdlCholesterol_StatusCode extends Message<LdlCholesterol_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ObservationStatusCode.Value value = 1;
   */
  value = ObservationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<LdlCholesterol_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ObservationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol_StatusCode {
    return new LdlCholesterol_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol_StatusCode {
    return new LdlCholesterol_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol_StatusCode {
    return new LdlCholesterol_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol_StatusCode | PlainMessage<LdlCholesterol_StatusCode> | undefined, b: LdlCholesterol_StatusCode | PlainMessage<LdlCholesterol_StatusCode> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol_StatusCode, a, b);
  }
}

/**
 * Clinically relevant time/time-period for observation
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol.EffectiveX
 */
export class LdlCholesterol_EffectiveX extends Message<LdlCholesterol_EffectiveX> {
  /**
   * @generated from oneof google.fhir.r4.core.LdlCholesterol.EffectiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Timing timing = 3;
     */
    value: Timing;
    case: "timing";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Instant instant = 4;
     */
    value: Instant;
    case: "instant";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LdlCholesterol_EffectiveX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol.EffectiveX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 3, name: "timing", kind: "message", T: Timing, oneof: "choice" },
    { no: 4, name: "instant", kind: "message", T: Instant, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol_EffectiveX {
    return new LdlCholesterol_EffectiveX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol_EffectiveX {
    return new LdlCholesterol_EffectiveX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol_EffectiveX {
    return new LdlCholesterol_EffectiveX().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol_EffectiveX | PlainMessage<LdlCholesterol_EffectiveX> | undefined, b: LdlCholesterol_EffectiveX | PlainMessage<LdlCholesterol_EffectiveX> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol_EffectiveX, a, b);
  }
}

/**
 * Actual result
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol.ValueX
 */
export class LdlCholesterol_ValueX extends Message<LdlCholesterol_ValueX> {
  /**
   * @generated from oneof google.fhir.r4.core.LdlCholesterol.ValueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LdlCholesterol_ValueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol.ValueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol_ValueX {
    return new LdlCholesterol_ValueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol_ValueX {
    return new LdlCholesterol_ValueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol_ValueX {
    return new LdlCholesterol_ValueX().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol_ValueX | PlainMessage<LdlCholesterol_ValueX> | undefined, b: LdlCholesterol_ValueX | PlainMessage<LdlCholesterol_ValueX> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol_ValueX, a, b);
  }
}

/**
 * Provides guide for interpretation
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol.ReferenceRange
 */
export class LdlCholesterol_ReferenceRange extends Message<LdlCholesterol_ReferenceRange> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * A fixed quantity (no comparator)
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity high = 5;
   */
  high?: SimpleQuantity;

  /**
   * Text based reference range in an observation
   *
   * @generated from field: google.fhir.r4.core.String text = 9;
   */
  text?: String;

  constructor(data?: PartialMessage<LdlCholesterol_ReferenceRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol.ReferenceRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 5, name: "high", kind: "message", T: SimpleQuantity },
    { no: 9, name: "text", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol_ReferenceRange {
    return new LdlCholesterol_ReferenceRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol_ReferenceRange {
    return new LdlCholesterol_ReferenceRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol_ReferenceRange {
    return new LdlCholesterol_ReferenceRange().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol_ReferenceRange | PlainMessage<LdlCholesterol_ReferenceRange> | undefined, b: LdlCholesterol_ReferenceRange | PlainMessage<LdlCholesterol_ReferenceRange> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol_ReferenceRange, a, b);
  }
}

/**
 * Component results
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol.Component
 */
export class LdlCholesterol_Component extends Message<LdlCholesterol_Component> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of component observation (code / type)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.LdlCholesterol.Component.ValueX value = 5;
   */
  value?: LdlCholesterol_Component_ValueX;

  /**
   * Why the component result is missing
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept data_absent_reason = 6;
   */
  dataAbsentReason?: CodeableConcept;

  /**
   * High, low, normal, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept interpretation = 7;
   */
  interpretation: CodeableConcept[] = [];

  /**
   * Provides guide for interpretation of component result
   *
   * @generated from field: repeated google.fhir.r4.core.LdlCholesterol.ReferenceRange reference_range = 8;
   */
  referenceRange: LdlCholesterol_ReferenceRange[] = [];

  constructor(data?: PartialMessage<LdlCholesterol_Component>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol.Component";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "value", kind: "message", T: LdlCholesterol_Component_ValueX },
    { no: 6, name: "data_absent_reason", kind: "message", T: CodeableConcept },
    { no: 7, name: "interpretation", kind: "message", T: CodeableConcept, repeated: true },
    { no: 8, name: "reference_range", kind: "message", T: LdlCholesterol_ReferenceRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol_Component {
    return new LdlCholesterol_Component().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol_Component {
    return new LdlCholesterol_Component().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol_Component {
    return new LdlCholesterol_Component().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol_Component | PlainMessage<LdlCholesterol_Component> | undefined, b: LdlCholesterol_Component | PlainMessage<LdlCholesterol_Component> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol_Component, a, b);
  }
}

/**
 * Actual component result
 *
 * @generated from message google.fhir.r4.core.LdlCholesterol.Component.ValueX
 */
export class LdlCholesterol_Component_ValueX extends Message<LdlCholesterol_Component_ValueX> {
  /**
   * @generated from oneof google.fhir.r4.core.LdlCholesterol.Component.ValueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 3 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 4;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Integer integer = 5;
     */
    value: Integer;
    case: "integer";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 6;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Ratio ratio = 7;
     */
    value: Ratio;
    case: "ratio";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.SampledData sampled_data = 8;
     */
    value: SampledData;
    case: "sampledData";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Time time = 9;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 10;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 11;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<LdlCholesterol_Component_ValueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.LdlCholesterol.Component.ValueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 3, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 4, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 5, name: "integer", kind: "message", T: Integer, oneof: "choice" },
    { no: 6, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 7, name: "ratio", kind: "message", T: Ratio, oneof: "choice" },
    { no: 8, name: "sampled_data", kind: "message", T: SampledData, oneof: "choice" },
    { no: 9, name: "time", kind: "message", T: Time, oneof: "choice" },
    { no: 10, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 11, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LdlCholesterol_Component_ValueX {
    return new LdlCholesterol_Component_ValueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LdlCholesterol_Component_ValueX {
    return new LdlCholesterol_Component_ValueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LdlCholesterol_Component_ValueX {
    return new LdlCholesterol_Component_ValueX().fromJsonString(jsonString, options);
  }

  static equals(a: LdlCholesterol_Component_ValueX | PlainMessage<LdlCholesterol_Component_ValueX> | undefined, b: LdlCholesterol_Component_ValueX | PlainMessage<LdlCholesterol_Component_ValueX> | undefined): boolean {
    return proto3.util.equals(LdlCholesterol_Component_ValueX, a, b);
  }
}

