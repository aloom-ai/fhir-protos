//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/profiles/diagnostic_report_genetics.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Attachment, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Instant, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";
import { DiagnosticReportAnalysis, DiagnosticReportReferences } from "../extensions_pb.js";
import { DiagnosticReportStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for DiagnosticReport-Genetics.
 * A Diagnostic report - a combination of request information, atomic results,
 * images, interpretation, as well as formatted reports. See
 * http://hl7.org/fhir/StructureDefinition/diagnosticreport-genetics
 *
 * @generated from message google.fhir.r4.core.DiagnosticReportGenetics
 */
export class DiagnosticReportGenetics extends Message<DiagnosticReportGenetics> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Extension
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier for report
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * What was requested
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 11;
   */
  basedOn: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.DiagnosticReportGenetics.StatusCode status = 12;
   */
  status?: DiagnosticReportGenetics_StatusCode;

  /**
   * Service category
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 13;
   */
  category: CodeableConcept[] = [];

  /**
   * Name/Code for this diagnostic report
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 14;
   */
  code?: CodeableConcept;

  /**
   * The subject of the report - usually, but not always, the patient
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 15;
   */
  subject?: Reference;

  /**
   * Health care event when test ordered
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 16;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.DiagnosticReportGenetics.EffectiveX effective = 17;
   */
  effective?: DiagnosticReportGenetics_EffectiveX;

  /**
   * DateTime this version was made
   *
   * @generated from field: google.fhir.r4.core.Instant issued = 18;
   */
  issued?: Instant;

  /**
   * Responsible Diagnostic Service
   *
   * @generated from field: repeated google.fhir.r4.core.Reference performer = 19;
   */
  performer: Reference[] = [];

  /**
   * Primary result interpreter
   *
   * @generated from field: repeated google.fhir.r4.core.Reference results_interpreter = 20;
   */
  resultsInterpreter: Reference[] = [];

  /**
   * Specimens this report is based on
   *
   * @generated from field: repeated google.fhir.r4.core.Reference specimen = 21;
   */
  specimen: Reference[] = [];

  /**
   * Observations
   *
   * @generated from field: repeated google.fhir.r4.core.Reference result = 22;
   */
  result: Reference[] = [];

  /**
   * Reference to full details of imaging associated with the diagnostic report
   *
   * @generated from field: repeated google.fhir.r4.core.Reference imaging_study = 23;
   */
  imagingStudy: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.DiagnosticReportGenetics.Media media = 24;
   */
  media: DiagnosticReportGenetics_Media[] = [];

  /**
   * Clinical conclusion (interpretation) of test results
   *
   * @generated from field: google.fhir.r4.core.String conclusion = 25;
   */
  conclusion?: String;

  /**
   * Entire report as issued
   *
   * @generated from field: repeated google.fhir.r4.core.Attachment presented_form = 27;
   */
  presentedForm: Attachment[] = [];

  /**
   * AssessedCondition
   *
   * @generated from field: repeated google.fhir.r4.core.Reference assessed_condition = 28 [json_name = "AssessedCondition"];
   */
  assessedCondition: Reference[] = [];

  /**
   * FamilyHistory
   *
   * @generated from field: repeated google.fhir.r4.core.Reference family_member_history = 29 [json_name = "FamilyMemberHistory"];
   */
  familyMemberHistory: Reference[] = [];

  /**
   * Analysis
   *
   * @generated from field: repeated google.fhir.r4.core.DiagnosticReportAnalysis analysis = 30 [json_name = "Analysis"];
   */
  analysis: DiagnosticReportAnalysis[] = [];

  /**
   * References
   *
   * @generated from field: repeated google.fhir.r4.core.DiagnosticReportReferences references = 31 [json_name = "References"];
   */
  references: DiagnosticReportReferences[] = [];

  constructor(data?: PartialMessage<DiagnosticReportGenetics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DiagnosticReportGenetics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "status", kind: "message", T: DiagnosticReportGenetics_StatusCode },
    { no: 13, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "code", kind: "message", T: CodeableConcept },
    { no: 15, name: "subject", kind: "message", T: Reference },
    { no: 16, name: "encounter", kind: "message", T: Reference },
    { no: 17, name: "effective", kind: "message", T: DiagnosticReportGenetics_EffectiveX },
    { no: 18, name: "issued", kind: "message", T: Instant },
    { no: 19, name: "performer", kind: "message", T: Reference, repeated: true },
    { no: 20, name: "results_interpreter", kind: "message", T: Reference, repeated: true },
    { no: 21, name: "specimen", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "result", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "imaging_study", kind: "message", T: Reference, repeated: true },
    { no: 24, name: "media", kind: "message", T: DiagnosticReportGenetics_Media, repeated: true },
    { no: 25, name: "conclusion", kind: "message", T: String },
    { no: 27, name: "presented_form", kind: "message", T: Attachment, repeated: true },
    { no: 28, name: "assessed_condition", jsonName: "AssessedCondition", kind: "message", T: Reference, repeated: true },
    { no: 29, name: "family_member_history", jsonName: "FamilyMemberHistory", kind: "message", T: Reference, repeated: true },
    { no: 30, name: "analysis", jsonName: "Analysis", kind: "message", T: DiagnosticReportAnalysis, repeated: true },
    { no: 31, name: "references", jsonName: "References", kind: "message", T: DiagnosticReportReferences, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportGenetics {
    return new DiagnosticReportGenetics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics {
    return new DiagnosticReportGenetics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics {
    return new DiagnosticReportGenetics().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportGenetics | PlainMessage<DiagnosticReportGenetics> | undefined, b: DiagnosticReportGenetics | PlainMessage<DiagnosticReportGenetics> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportGenetics, a, b);
  }
}

/**
 * registered | partial | preliminary | final +
 *
 * @generated from message google.fhir.r4.core.DiagnosticReportGenetics.StatusCode
 */
export class DiagnosticReportGenetics_StatusCode extends Message<DiagnosticReportGenetics_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.DiagnosticReportStatusCode.Value value = 1;
   */
  value = DiagnosticReportStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DiagnosticReportGenetics_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DiagnosticReportGenetics.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DiagnosticReportStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportGenetics_StatusCode {
    return new DiagnosticReportGenetics_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics_StatusCode {
    return new DiagnosticReportGenetics_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics_StatusCode {
    return new DiagnosticReportGenetics_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportGenetics_StatusCode | PlainMessage<DiagnosticReportGenetics_StatusCode> | undefined, b: DiagnosticReportGenetics_StatusCode | PlainMessage<DiagnosticReportGenetics_StatusCode> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportGenetics_StatusCode, a, b);
  }
}

/**
 * Clinically relevant time/time-period for report
 *
 * @generated from message google.fhir.r4.core.DiagnosticReportGenetics.EffectiveX
 */
export class DiagnosticReportGenetics_EffectiveX extends Message<DiagnosticReportGenetics_EffectiveX> {
  /**
   * @generated from oneof google.fhir.r4.core.DiagnosticReportGenetics.EffectiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DiagnosticReportGenetics_EffectiveX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DiagnosticReportGenetics.EffectiveX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportGenetics_EffectiveX {
    return new DiagnosticReportGenetics_EffectiveX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics_EffectiveX {
    return new DiagnosticReportGenetics_EffectiveX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics_EffectiveX {
    return new DiagnosticReportGenetics_EffectiveX().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportGenetics_EffectiveX | PlainMessage<DiagnosticReportGenetics_EffectiveX> | undefined, b: DiagnosticReportGenetics_EffectiveX | PlainMessage<DiagnosticReportGenetics_EffectiveX> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportGenetics_EffectiveX, a, b);
  }
}

/**
 * Key images associated with this report
 *
 * @generated from message google.fhir.r4.core.DiagnosticReportGenetics.Media
 */
export class DiagnosticReportGenetics_Media extends Message<DiagnosticReportGenetics_Media> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Comment about the image (e.g. explanation)
   *
   * @generated from field: google.fhir.r4.core.String comment = 4;
   */
  comment?: String;

  /**
   * Reference to the image source
   *
   * @generated from field: google.fhir.r4.core.Reference link = 5;
   */
  link?: Reference;

  constructor(data?: PartialMessage<DiagnosticReportGenetics_Media>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DiagnosticReportGenetics.Media";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "comment", kind: "message", T: String },
    { no: 5, name: "link", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiagnosticReportGenetics_Media {
    return new DiagnosticReportGenetics_Media().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics_Media {
    return new DiagnosticReportGenetics_Media().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiagnosticReportGenetics_Media {
    return new DiagnosticReportGenetics_Media().fromJsonString(jsonString, options);
  }

  static equals(a: DiagnosticReportGenetics_Media | PlainMessage<DiagnosticReportGenetics_Media> | undefined, b: DiagnosticReportGenetics_Media | PlainMessage<DiagnosticReportGenetics_Media> | undefined): boolean {
    return proto3.util.equals(DiagnosticReportGenetics_Media, a, b);
  }
}

