//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/coverage_eligibility_request.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, Date, DateTime, Extension, Id, Identifier, Meta, Money, Narrative, Period, PositiveInt, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { EligibilityRequestPurposeCode_Value, FinancialResourceStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for CoverageEligibilityRequest.
 * CoverageEligibilityRequest resource.
 * See http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest
 */
export class CoverageEligibilityRequest extends Message<CoverageEligibilityRequest> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for coverage eligiblity request
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.CoverageEligibilityRequest.StatusCode status = 11;
   */
  status?: CoverageEligibilityRequest_StatusCode;

  /**
   * Desired processing priority
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept priority = 12;
   */
  priority?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode purpose = 13;
   */
  purpose: CoverageEligibilityRequest_PurposeCode[] = [];

  /**
   * Intended recipient of products and services
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 14;
   */
  patient?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.CoverageEligibilityRequest.ServicedX serviced = 15;
   */
  serviced?: CoverageEligibilityRequest_ServicedX;

  /**
   * Creation date
   *
   * @generated from field: google.fhir.r4.core.DateTime created = 16;
   */
  created?: DateTime;

  /**
   * Author
   *
   * @generated from field: google.fhir.r4.core.Reference enterer = 17;
   */
  enterer?: Reference;

  /**
   * Party responsible for the request
   *
   * @generated from field: google.fhir.r4.core.Reference provider = 18;
   */
  provider?: Reference;

  /**
   * Coverage issuer
   *
   * @generated from field: google.fhir.r4.core.Reference insurer = 19;
   */
  insurer?: Reference;

  /**
   * Servicing facility
   *
   * @generated from field: google.fhir.r4.core.Reference facility = 20;
   */
  facility?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation supporting_info = 21;
   */
  supportingInfo: CoverageEligibilityRequest_SupportingInformation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.CoverageEligibilityRequest.Insurance insurance = 22;
   */
  insurance: CoverageEligibilityRequest_Insurance[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.CoverageEligibilityRequest.Details item = 23;
   */
  item: CoverageEligibilityRequest_Details[] = [];

  constructor(data?: PartialMessage<CoverageEligibilityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: CoverageEligibilityRequest_StatusCode },
    { no: 12, name: "priority", kind: "message", T: CodeableConcept },
    { no: 13, name: "purpose", kind: "message", T: CoverageEligibilityRequest_PurposeCode, repeated: true },
    { no: 14, name: "patient", kind: "message", T: Reference },
    { no: 15, name: "serviced", kind: "message", T: CoverageEligibilityRequest_ServicedX },
    { no: 16, name: "created", kind: "message", T: DateTime },
    { no: 17, name: "enterer", kind: "message", T: Reference },
    { no: 18, name: "provider", kind: "message", T: Reference },
    { no: 19, name: "insurer", kind: "message", T: Reference },
    { no: 20, name: "facility", kind: "message", T: Reference },
    { no: 21, name: "supporting_info", kind: "message", T: CoverageEligibilityRequest_SupportingInformation, repeated: true },
    { no: 22, name: "insurance", kind: "message", T: CoverageEligibilityRequest_Insurance, repeated: true },
    { no: 23, name: "item", kind: "message", T: CoverageEligibilityRequest_Details, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest {
    return new CoverageEligibilityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest {
    return new CoverageEligibilityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest {
    return new CoverageEligibilityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest | PlainMessage<CoverageEligibilityRequest> | undefined, b: CoverageEligibilityRequest | PlainMessage<CoverageEligibilityRequest> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest, a, b);
  }
}

/**
 * active | cancelled | draft | entered-in-error
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.StatusCode
 */
export class CoverageEligibilityRequest_StatusCode extends Message<CoverageEligibilityRequest_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FinancialResourceStatusCode.Value value = 1;
   */
  value = FinancialResourceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<CoverageEligibilityRequest_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FinancialResourceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_StatusCode {
    return new CoverageEligibilityRequest_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_StatusCode {
    return new CoverageEligibilityRequest_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_StatusCode {
    return new CoverageEligibilityRequest_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_StatusCode | PlainMessage<CoverageEligibilityRequest_StatusCode> | undefined, b: CoverageEligibilityRequest_StatusCode | PlainMessage<CoverageEligibilityRequest_StatusCode> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_StatusCode, a, b);
  }
}

/**
 * auth-requirements | benefits | discovery | validation
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode
 */
export class CoverageEligibilityRequest_PurposeCode extends Message<CoverageEligibilityRequest_PurposeCode> {
  /**
   * @generated from field: google.fhir.r4.core.EligibilityRequestPurposeCode.Value value = 1;
   */
  value = EligibilityRequestPurposeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<CoverageEligibilityRequest_PurposeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.PurposeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EligibilityRequestPurposeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_PurposeCode {
    return new CoverageEligibilityRequest_PurposeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_PurposeCode {
    return new CoverageEligibilityRequest_PurposeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_PurposeCode {
    return new CoverageEligibilityRequest_PurposeCode().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_PurposeCode | PlainMessage<CoverageEligibilityRequest_PurposeCode> | undefined, b: CoverageEligibilityRequest_PurposeCode | PlainMessage<CoverageEligibilityRequest_PurposeCode> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_PurposeCode, a, b);
  }
}

/**
 * Estimated date or dates of service
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.ServicedX
 */
export class CoverageEligibilityRequest_ServicedX extends Message<CoverageEligibilityRequest_ServicedX> {
  /**
   * @generated from oneof google.fhir.r4.core.CoverageEligibilityRequest.ServicedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CoverageEligibilityRequest_ServicedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.ServicedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_ServicedX {
    return new CoverageEligibilityRequest_ServicedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_ServicedX {
    return new CoverageEligibilityRequest_ServicedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_ServicedX {
    return new CoverageEligibilityRequest_ServicedX().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_ServicedX | PlainMessage<CoverageEligibilityRequest_ServicedX> | undefined, b: CoverageEligibilityRequest_ServicedX | PlainMessage<CoverageEligibilityRequest_ServicedX> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_ServicedX, a, b);
  }
}

/**
 * Supporting information
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation
 */
export class CoverageEligibilityRequest_SupportingInformation extends Message<CoverageEligibilityRequest_SupportingInformation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Information instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Data to be provided
   *
   * @generated from field: google.fhir.r4.core.Reference information = 5;
   */
  information?: Reference;

  /**
   * Applies to all items
   *
   * @generated from field: google.fhir.r4.core.Boolean applies_to_all = 6;
   */
  appliesToAll?: Boolean;

  constructor(data?: PartialMessage<CoverageEligibilityRequest_SupportingInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.SupportingInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "information", kind: "message", T: Reference },
    { no: 6, name: "applies_to_all", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_SupportingInformation {
    return new CoverageEligibilityRequest_SupportingInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_SupportingInformation {
    return new CoverageEligibilityRequest_SupportingInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_SupportingInformation {
    return new CoverageEligibilityRequest_SupportingInformation().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_SupportingInformation | PlainMessage<CoverageEligibilityRequest_SupportingInformation> | undefined, b: CoverageEligibilityRequest_SupportingInformation | PlainMessage<CoverageEligibilityRequest_SupportingInformation> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_SupportingInformation, a, b);
  }
}

/**
 * Patient insurance information
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.Insurance
 */
export class CoverageEligibilityRequest_Insurance extends Message<CoverageEligibilityRequest_Insurance> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Applicable coverage
   *
   * @generated from field: google.fhir.r4.core.Boolean focal = 4;
   */
  focal?: Boolean;

  /**
   * Insurance information
   *
   * @generated from field: google.fhir.r4.core.Reference coverage = 5;
   */
  coverage?: Reference;

  /**
   * Additional provider contract number
   *
   * @generated from field: google.fhir.r4.core.String business_arrangement = 6;
   */
  businessArrangement?: String;

  constructor(data?: PartialMessage<CoverageEligibilityRequest_Insurance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.Insurance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "focal", kind: "message", T: Boolean },
    { no: 5, name: "coverage", kind: "message", T: Reference },
    { no: 6, name: "business_arrangement", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_Insurance {
    return new CoverageEligibilityRequest_Insurance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Insurance {
    return new CoverageEligibilityRequest_Insurance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Insurance {
    return new CoverageEligibilityRequest_Insurance().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_Insurance | PlainMessage<CoverageEligibilityRequest_Insurance> | undefined, b: CoverageEligibilityRequest_Insurance | PlainMessage<CoverageEligibilityRequest_Insurance> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_Insurance, a, b);
  }
}

/**
 * Item to be evaluated for eligibiity
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.Details
 */
export class CoverageEligibilityRequest_Details extends Message<CoverageEligibilityRequest_Details> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Applicable exception or supporting information
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt supporting_info_sequence = 4;
   */
  supportingInfoSequence: PositiveInt[] = [];

  /**
   * Benefit classification
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 5;
   */
  category?: CodeableConcept;

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 6;
   */
  productOrService?: CodeableConcept;

  /**
   * Product or service billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 7;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Perfoming practitioner
   *
   * @generated from field: google.fhir.r4.core.Reference provider = 8;
   */
  provider?: Reference;

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 9;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 10;
   */
  unitPrice?: Money;

  /**
   * Servicing facility
   *
   * @generated from field: google.fhir.r4.core.Reference facility = 11;
   */
  facility?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis diagnosis = 12;
   */
  diagnosis: CoverageEligibilityRequest_Details_Diagnosis[] = [];

  /**
   * Product or service details
   *
   * @generated from field: repeated google.fhir.r4.core.Reference detail = 13;
   */
  detail: Reference[] = [];

  constructor(data?: PartialMessage<CoverageEligibilityRequest_Details>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.Details";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "supporting_info_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 5, name: "category", kind: "message", T: CodeableConcept },
    { no: 6, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 7, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 8, name: "provider", kind: "message", T: Reference },
    { no: 9, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 10, name: "unit_price", kind: "message", T: Money },
    { no: 11, name: "facility", kind: "message", T: Reference },
    { no: 12, name: "diagnosis", kind: "message", T: CoverageEligibilityRequest_Details_Diagnosis, repeated: true },
    { no: 13, name: "detail", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_Details {
    return new CoverageEligibilityRequest_Details().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Details {
    return new CoverageEligibilityRequest_Details().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Details {
    return new CoverageEligibilityRequest_Details().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_Details | PlainMessage<CoverageEligibilityRequest_Details> | undefined, b: CoverageEligibilityRequest_Details | PlainMessage<CoverageEligibilityRequest_Details> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_Details, a, b);
  }
}

/**
 * Applicable diagnosis
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis
 */
export class CoverageEligibilityRequest_Details_Diagnosis extends Message<CoverageEligibilityRequest_Details_Diagnosis> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX diagnosis = 4;
   */
  diagnosis?: CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX;

  constructor(data?: PartialMessage<CoverageEligibilityRequest_Details_Diagnosis>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "diagnosis", kind: "message", T: CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_Details_Diagnosis {
    return new CoverageEligibilityRequest_Details_Diagnosis().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Details_Diagnosis {
    return new CoverageEligibilityRequest_Details_Diagnosis().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Details_Diagnosis {
    return new CoverageEligibilityRequest_Details_Diagnosis().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_Details_Diagnosis | PlainMessage<CoverageEligibilityRequest_Details_Diagnosis> | undefined, b: CoverageEligibilityRequest_Details_Diagnosis | PlainMessage<CoverageEligibilityRequest_Details_Diagnosis> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_Details_Diagnosis, a, b);
  }
}

/**
 * Nature of illness or problem
 *
 * @generated from message google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX
 */
export class CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX extends Message<CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX> {
  /**
   * @generated from oneof google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.CoverageEligibilityRequest.Details.Diagnosis.DiagnosisX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX {
    return new CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX {
    return new CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX {
    return new CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX().fromJsonString(jsonString, options);
  }

  static equals(a: CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX | PlainMessage<CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX> | undefined, b: CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX | PlainMessage<CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX> | undefined): boolean {
    return proto3.util.equals(CoverageEligibilityRequest_Details_Diagnosis_DiagnosisX, a, b);
  }
}

