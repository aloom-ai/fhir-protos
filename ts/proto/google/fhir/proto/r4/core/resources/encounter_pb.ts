//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/encounter.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Coding, Duration, Extension, Id, Identifier, Meta, Narrative, Period, PositiveInt, Reference, String, Uri } from "../datatypes_pb.js";
import { EncounterLocationStatusCode_Value, EncounterStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Encounter.
 * An interaction during which services are provided to the patient.
 * See http://hl7.org/fhir/StructureDefinition/Encounter
 *
 * @generated from message google.fhir.r4.core.Encounter
 */
export class Encounter extends Message<Encounter> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier(s) by which this encounter is known
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Encounter.StatusCode status = 11;
   */
  status?: Encounter_StatusCode;

  /**
   * @generated from field: repeated google.fhir.r4.core.Encounter.StatusHistory status_history = 12;
   */
  statusHistory: Encounter_StatusHistory[] = [];

  /**
   * Classification of patient encounter
   *
   * @generated from field: google.fhir.r4.core.Coding class_value = 13 [json_name = "class"];
   */
  classValue?: Coding;

  /**
   * @generated from field: repeated google.fhir.r4.core.Encounter.ClassHistory class_history = 14;
   */
  classHistory: Encounter_ClassHistory[] = [];

  /**
   * Specific type of encounter
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 15;
   */
  type: CodeableConcept[] = [];

  /**
   * Specific type of service
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept service_type = 16;
   */
  serviceType?: CodeableConcept;

  /**
   * Indicates the urgency of the encounter
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept priority = 17;
   */
  priority?: CodeableConcept;

  /**
   * The patient or group present at the encounter
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 18;
   */
  subject?: Reference;

  /**
   * Episode(s) of care that this encounter should be recorded against
   *
   * @generated from field: repeated google.fhir.r4.core.Reference episode_of_care = 19;
   */
  episodeOfCare: Reference[] = [];

  /**
   * The ServiceRequest that initiated this encounter
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 20;
   */
  basedOn: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Encounter.Participant participant = 21;
   */
  participant: Encounter_Participant[] = [];

  /**
   * The appointment that scheduled this encounter
   *
   * @generated from field: repeated google.fhir.r4.core.Reference appointment = 22;
   */
  appointment: Reference[] = [];

  /**
   * The start and end time of the encounter
   *
   * @generated from field: google.fhir.r4.core.Period period = 23;
   */
  period?: Period;

  /**
   * Quantity of time the encounter lasted (less time absent)
   *
   * @generated from field: google.fhir.r4.core.Duration length = 24;
   */
  length?: Duration;

  /**
   * Coded reason the encounter takes place
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 25;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * Reason the encounter takes place (reference)
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reason_reference = 26;
   */
  reasonReference: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Encounter.Diagnosis diagnosis = 27;
   */
  diagnosis: Encounter_Diagnosis[] = [];

  /**
   * The set of accounts that may be used for billing for this Encounter
   *
   * @generated from field: repeated google.fhir.r4.core.Reference account = 28;
   */
  account: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Encounter.Hospitalization hospitalization = 29;
   */
  hospitalization?: Encounter_Hospitalization;

  /**
   * @generated from field: repeated google.fhir.r4.core.Encounter.Location location = 30;
   */
  location: Encounter_Location[] = [];

  /**
   * The organization (facility) responsible for this encounter
   *
   * @generated from field: google.fhir.r4.core.Reference service_provider = 31;
   */
  serviceProvider?: Reference;

  /**
   * Another Encounter this encounter is part of
   *
   * @generated from field: google.fhir.r4.core.Reference part_of = 32;
   */
  partOf?: Reference;

  constructor(data?: PartialMessage<Encounter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: Encounter_StatusCode },
    { no: 12, name: "status_history", kind: "message", T: Encounter_StatusHistory, repeated: true },
    { no: 13, name: "class_value", jsonName: "class", kind: "message", T: Coding },
    { no: 14, name: "class_history", kind: "message", T: Encounter_ClassHistory, repeated: true },
    { no: 15, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 16, name: "service_type", kind: "message", T: CodeableConcept },
    { no: 17, name: "priority", kind: "message", T: CodeableConcept },
    { no: 18, name: "subject", kind: "message", T: Reference },
    { no: 19, name: "episode_of_care", kind: "message", T: Reference, repeated: true },
    { no: 20, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 21, name: "participant", kind: "message", T: Encounter_Participant, repeated: true },
    { no: 22, name: "appointment", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "period", kind: "message", T: Period },
    { no: 24, name: "length", kind: "message", T: Duration },
    { no: 25, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 26, name: "reason_reference", kind: "message", T: Reference, repeated: true },
    { no: 27, name: "diagnosis", kind: "message", T: Encounter_Diagnosis, repeated: true },
    { no: 28, name: "account", kind: "message", T: Reference, repeated: true },
    { no: 29, name: "hospitalization", kind: "message", T: Encounter_Hospitalization },
    { no: 30, name: "location", kind: "message", T: Encounter_Location, repeated: true },
    { no: 31, name: "service_provider", kind: "message", T: Reference },
    { no: 32, name: "part_of", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter {
    return new Encounter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter {
    return new Encounter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter {
    return new Encounter().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter | PlainMessage<Encounter> | undefined, b: Encounter | PlainMessage<Encounter> | undefined): boolean {
    return proto3.util.equals(Encounter, a, b);
  }
}

/**
 * planned | arrived | triaged | in-progress | onleave | finished | cancelled
 * +
 *
 * @generated from message google.fhir.r4.core.Encounter.StatusCode
 */
export class Encounter_StatusCode extends Message<Encounter_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.EncounterStatusCode.Value value = 1;
   */
  value = EncounterStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Encounter_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EncounterStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_StatusCode {
    return new Encounter_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_StatusCode {
    return new Encounter_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_StatusCode {
    return new Encounter_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_StatusCode | PlainMessage<Encounter_StatusCode> | undefined, b: Encounter_StatusCode | PlainMessage<Encounter_StatusCode> | undefined): boolean {
    return proto3.util.equals(Encounter_StatusCode, a, b);
  }
}

/**
 * List of past encounter statuses
 *
 * @generated from message google.fhir.r4.core.Encounter.StatusHistory
 */
export class Encounter_StatusHistory extends Message<Encounter_StatusHistory> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Encounter.StatusHistory.StatusCode status = 4;
   */
  status?: Encounter_StatusHistory_StatusCode;

  /**
   * The time that the episode was in the specified status
   *
   * @generated from field: google.fhir.r4.core.Period period = 5;
   */
  period?: Period;

  constructor(data?: PartialMessage<Encounter_StatusHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.StatusHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "status", kind: "message", T: Encounter_StatusHistory_StatusCode },
    { no: 5, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_StatusHistory {
    return new Encounter_StatusHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_StatusHistory {
    return new Encounter_StatusHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_StatusHistory {
    return new Encounter_StatusHistory().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_StatusHistory | PlainMessage<Encounter_StatusHistory> | undefined, b: Encounter_StatusHistory | PlainMessage<Encounter_StatusHistory> | undefined): boolean {
    return proto3.util.equals(Encounter_StatusHistory, a, b);
  }
}

/**
 * planned | arrived | triaged | in-progress | onleave | finished |
 * cancelled +
 *
 * @generated from message google.fhir.r4.core.Encounter.StatusHistory.StatusCode
 */
export class Encounter_StatusHistory_StatusCode extends Message<Encounter_StatusHistory_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.EncounterStatusCode.Value value = 1;
   */
  value = EncounterStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Encounter_StatusHistory_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.StatusHistory.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EncounterStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_StatusHistory_StatusCode {
    return new Encounter_StatusHistory_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_StatusHistory_StatusCode {
    return new Encounter_StatusHistory_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_StatusHistory_StatusCode {
    return new Encounter_StatusHistory_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_StatusHistory_StatusCode | PlainMessage<Encounter_StatusHistory_StatusCode> | undefined, b: Encounter_StatusHistory_StatusCode | PlainMessage<Encounter_StatusHistory_StatusCode> | undefined): boolean {
    return proto3.util.equals(Encounter_StatusHistory_StatusCode, a, b);
  }
}

/**
 * List of past encounter classes
 *
 * @generated from message google.fhir.r4.core.Encounter.ClassHistory
 */
export class Encounter_ClassHistory extends Message<Encounter_ClassHistory> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * inpatient | outpatient | ambulatory | emergency +
   *
   * @generated from field: google.fhir.r4.core.Coding class_value = 4 [json_name = "class"];
   */
  classValue?: Coding;

  /**
   * The time that the episode was in the specified class
   *
   * @generated from field: google.fhir.r4.core.Period period = 5;
   */
  period?: Period;

  constructor(data?: PartialMessage<Encounter_ClassHistory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.ClassHistory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "class_value", jsonName: "class", kind: "message", T: Coding },
    { no: 5, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_ClassHistory {
    return new Encounter_ClassHistory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_ClassHistory {
    return new Encounter_ClassHistory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_ClassHistory {
    return new Encounter_ClassHistory().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_ClassHistory | PlainMessage<Encounter_ClassHistory> | undefined, b: Encounter_ClassHistory | PlainMessage<Encounter_ClassHistory> | undefined): boolean {
    return proto3.util.equals(Encounter_ClassHistory, a, b);
  }
}

/**
 * List of participants involved in the encounter
 *
 * @generated from message google.fhir.r4.core.Encounter.Participant
 */
export class Encounter_Participant extends Message<Encounter_Participant> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Role of participant in encounter
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 4;
   */
  type: CodeableConcept[] = [];

  /**
   * Period of time during the encounter that the participant participated
   *
   * @generated from field: google.fhir.r4.core.Period period = 5;
   */
  period?: Period;

  /**
   * Persons involved in the encounter other than the patient
   *
   * @generated from field: google.fhir.r4.core.Reference individual = 6;
   */
  individual?: Reference;

  constructor(data?: PartialMessage<Encounter_Participant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.Participant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 5, name: "period", kind: "message", T: Period },
    { no: 6, name: "individual", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_Participant {
    return new Encounter_Participant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_Participant {
    return new Encounter_Participant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_Participant {
    return new Encounter_Participant().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_Participant | PlainMessage<Encounter_Participant> | undefined, b: Encounter_Participant | PlainMessage<Encounter_Participant> | undefined): boolean {
    return proto3.util.equals(Encounter_Participant, a, b);
  }
}

/**
 * The list of diagnosis relevant to this encounter
 *
 * @generated from message google.fhir.r4.core.Encounter.Diagnosis
 */
export class Encounter_Diagnosis extends Message<Encounter_Diagnosis> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The diagnosis or procedure relevant to the encounter
   *
   * @generated from field: google.fhir.r4.core.Reference condition = 4;
   */
  condition?: Reference;

  /**
   * Role that this diagnosis has within the encounter (e.g. admission,
   * billing, discharge …)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept use = 5;
   */
  use?: CodeableConcept;

  /**
   * Ranking of the diagnosis (for each role type)
   *
   * @generated from field: google.fhir.r4.core.PositiveInt rank = 6;
   */
  rank?: PositiveInt;

  constructor(data?: PartialMessage<Encounter_Diagnosis>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.Diagnosis";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "condition", kind: "message", T: Reference },
    { no: 5, name: "use", kind: "message", T: CodeableConcept },
    { no: 6, name: "rank", kind: "message", T: PositiveInt },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_Diagnosis {
    return new Encounter_Diagnosis().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_Diagnosis {
    return new Encounter_Diagnosis().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_Diagnosis {
    return new Encounter_Diagnosis().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_Diagnosis | PlainMessage<Encounter_Diagnosis> | undefined, b: Encounter_Diagnosis | PlainMessage<Encounter_Diagnosis> | undefined): boolean {
    return proto3.util.equals(Encounter_Diagnosis, a, b);
  }
}

/**
 * Details about the admission to a healthcare service
 *
 * @generated from message google.fhir.r4.core.Encounter.Hospitalization
 */
export class Encounter_Hospitalization extends Message<Encounter_Hospitalization> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Pre-admission identifier
   *
   * @generated from field: google.fhir.r4.core.Identifier pre_admission_identifier = 4;
   */
  preAdmissionIdentifier?: Identifier;

  /**
   * The location/organization from which the patient came before admission
   *
   * @generated from field: google.fhir.r4.core.Reference origin = 5;
   */
  origin?: Reference;

  /**
   * From where patient was admitted (physician referral, transfer)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept admit_source = 6;
   */
  admitSource?: CodeableConcept;

  /**
   * The type of hospital re-admission that has occurred (if any). If the
   * value is absent, then this is not identified as a readmission
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept re_admission = 7;
   */
  reAdmission?: CodeableConcept;

  /**
   * Diet preferences reported by the patient
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept diet_preference = 8;
   */
  dietPreference: CodeableConcept[] = [];

  /**
   * Special courtesies (VIP, board member)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept special_courtesy = 9;
   */
  specialCourtesy: CodeableConcept[] = [];

  /**
   * Wheelchair, translator, stretcher, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept special_arrangement = 10;
   */
  specialArrangement: CodeableConcept[] = [];

  /**
   * Location/organization to which the patient is discharged
   *
   * @generated from field: google.fhir.r4.core.Reference destination = 11;
   */
  destination?: Reference;

  /**
   * Category or kind of location after discharge
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept discharge_disposition = 12;
   */
  dischargeDisposition?: CodeableConcept;

  constructor(data?: PartialMessage<Encounter_Hospitalization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.Hospitalization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "pre_admission_identifier", kind: "message", T: Identifier },
    { no: 5, name: "origin", kind: "message", T: Reference },
    { no: 6, name: "admit_source", kind: "message", T: CodeableConcept },
    { no: 7, name: "re_admission", kind: "message", T: CodeableConcept },
    { no: 8, name: "diet_preference", kind: "message", T: CodeableConcept, repeated: true },
    { no: 9, name: "special_courtesy", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "special_arrangement", kind: "message", T: CodeableConcept, repeated: true },
    { no: 11, name: "destination", kind: "message", T: Reference },
    { no: 12, name: "discharge_disposition", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_Hospitalization {
    return new Encounter_Hospitalization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_Hospitalization {
    return new Encounter_Hospitalization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_Hospitalization {
    return new Encounter_Hospitalization().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_Hospitalization | PlainMessage<Encounter_Hospitalization> | undefined, b: Encounter_Hospitalization | PlainMessage<Encounter_Hospitalization> | undefined): boolean {
    return proto3.util.equals(Encounter_Hospitalization, a, b);
  }
}

/**
 * List of locations where the patient has been
 *
 * @generated from message google.fhir.r4.core.Encounter.Location
 */
export class Encounter_Location extends Message<Encounter_Location> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Location the encounter takes place
   *
   * @generated from field: google.fhir.r4.core.Reference location = 4;
   */
  location?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Encounter.Location.StatusCode status = 5;
   */
  status?: Encounter_Location_StatusCode;

  /**
   * The physical type of the location (usually the level in the location
   * hierachy - bed room ward etc.)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept physical_type = 6;
   */
  physicalType?: CodeableConcept;

  /**
   * Time period during which the patient was present at the location
   *
   * @generated from field: google.fhir.r4.core.Period period = 7;
   */
  period?: Period;

  constructor(data?: PartialMessage<Encounter_Location>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.Location";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "location", kind: "message", T: Reference },
    { no: 5, name: "status", kind: "message", T: Encounter_Location_StatusCode },
    { no: 6, name: "physical_type", kind: "message", T: CodeableConcept },
    { no: 7, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_Location {
    return new Encounter_Location().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_Location {
    return new Encounter_Location().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_Location {
    return new Encounter_Location().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_Location | PlainMessage<Encounter_Location> | undefined, b: Encounter_Location | PlainMessage<Encounter_Location> | undefined): boolean {
    return proto3.util.equals(Encounter_Location, a, b);
  }
}

/**
 * planned | active | reserved | completed
 *
 * @generated from message google.fhir.r4.core.Encounter.Location.StatusCode
 */
export class Encounter_Location_StatusCode extends Message<Encounter_Location_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.EncounterLocationStatusCode.Value value = 1;
   */
  value = EncounterLocationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Encounter_Location_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Encounter.Location.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EncounterLocationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Encounter_Location_StatusCode {
    return new Encounter_Location_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Encounter_Location_StatusCode {
    return new Encounter_Location_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Encounter_Location_StatusCode {
    return new Encounter_Location_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Encounter_Location_StatusCode | PlainMessage<Encounter_Location_StatusCode> | undefined, b: Encounter_Location_StatusCode | PlainMessage<Encounter_Location_StatusCode> | undefined): boolean {
    return proto3.util.equals(Encounter_Location_StatusCode, a, b);
  }
}

