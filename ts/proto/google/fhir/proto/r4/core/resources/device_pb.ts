//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/device.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Base64Binary, Code, CodeableConcept, ContactPoint, DateTime, Extension, Id, Identifier, Meta, Narrative, Quantity, Reference, String, Uri } from "../datatypes_pb.js";
import { DeviceNameTypeCode_Value, FHIRDeviceStatusCode_Value, UDIEntryTypeCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Device.
 * Item used in healthcare.
 * See http://hl7.org/fhir/StructureDefinition/Device
 *
 * @generated from message google.fhir.r4.core.Device
 */
export class Device extends Message<Device> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Instance identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * The reference to the definition for the device
   *
   * @generated from field: google.fhir.r4.core.Reference definition = 11;
   */
  definition?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.Device.UdiCarrier udi_carrier = 12;
   */
  udiCarrier: Device_UdiCarrier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Device.StatusCode status = 13;
   */
  status?: Device_StatusCode;

  /**
   * online | paused | standby | offline | not-ready | transduc-discon |
   * hw-discon | off
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept status_reason = 14;
   */
  statusReason: CodeableConcept[] = [];

  /**
   * The distinct identification string
   *
   * @generated from field: google.fhir.r4.core.String distinct_identifier = 15;
   */
  distinctIdentifier?: String;

  /**
   * Name of device manufacturer
   *
   * @generated from field: google.fhir.r4.core.String manufacturer = 16;
   */
  manufacturer?: String;

  /**
   * Date when the device was made
   *
   * @generated from field: google.fhir.r4.core.DateTime manufacture_date = 17;
   */
  manufactureDate?: DateTime;

  /**
   * Date and time of expiry of this device (if applicable)
   *
   * @generated from field: google.fhir.r4.core.DateTime expiration_date = 18;
   */
  expirationDate?: DateTime;

  /**
   * Lot number of manufacture
   *
   * @generated from field: google.fhir.r4.core.String lot_number = 19;
   */
  lotNumber?: String;

  /**
   * Serial number assigned by the manufacturer
   *
   * @generated from field: google.fhir.r4.core.String serial_number = 20;
   */
  serialNumber?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Device.DeviceName device_name = 21;
   */
  deviceName: Device_DeviceName[] = [];

  /**
   * The model number for the device
   *
   * @generated from field: google.fhir.r4.core.String model_number = 22;
   */
  modelNumber?: String;

  /**
   * The part number of the device
   *
   * @generated from field: google.fhir.r4.core.String part_number = 23;
   */
  partNumber?: String;

  /**
   * The kind or type of device
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 24;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.Device.Specialization specialization = 25;
   */
  specialization: Device_Specialization[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Device.Version version = 26;
   */
  version: Device_Version[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Device.Property property = 27;
   */
  property: Device_Property[] = [];

  /**
   * Patient to whom Device is affixed
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 28;
   */
  patient?: Reference;

  /**
   * Organization responsible for device
   *
   * @generated from field: google.fhir.r4.core.Reference owner = 29;
   */
  owner?: Reference;

  /**
   * Details for human/organization for support
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint contact = 30;
   */
  contact: ContactPoint[] = [];

  /**
   * Where the device is found
   *
   * @generated from field: google.fhir.r4.core.Reference location = 31;
   */
  location?: Reference;

  /**
   * Network address to contact device
   *
   * @generated from field: google.fhir.r4.core.Uri url = 32;
   */
  url?: Uri;

  /**
   * Device notes and comments
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 33;
   */
  note: Annotation[] = [];

  /**
   * Safety Characteristics of Device
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept safety = 34;
   */
  safety: CodeableConcept[] = [];

  /**
   * The parent device
   *
   * @generated from field: google.fhir.r4.core.Reference parent = 35;
   */
  parent?: Reference;

  constructor(data?: PartialMessage<Device>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "definition", kind: "message", T: Reference },
    { no: 12, name: "udi_carrier", kind: "message", T: Device_UdiCarrier, repeated: true },
    { no: 13, name: "status", kind: "message", T: Device_StatusCode },
    { no: 14, name: "status_reason", kind: "message", T: CodeableConcept, repeated: true },
    { no: 15, name: "distinct_identifier", kind: "message", T: String },
    { no: 16, name: "manufacturer", kind: "message", T: String },
    { no: 17, name: "manufacture_date", kind: "message", T: DateTime },
    { no: 18, name: "expiration_date", kind: "message", T: DateTime },
    { no: 19, name: "lot_number", kind: "message", T: String },
    { no: 20, name: "serial_number", kind: "message", T: String },
    { no: 21, name: "device_name", kind: "message", T: Device_DeviceName, repeated: true },
    { no: 22, name: "model_number", kind: "message", T: String },
    { no: 23, name: "part_number", kind: "message", T: String },
    { no: 24, name: "type", kind: "message", T: CodeableConcept },
    { no: 25, name: "specialization", kind: "message", T: Device_Specialization, repeated: true },
    { no: 26, name: "version", kind: "message", T: Device_Version, repeated: true },
    { no: 27, name: "property", kind: "message", T: Device_Property, repeated: true },
    { no: 28, name: "patient", kind: "message", T: Reference },
    { no: 29, name: "owner", kind: "message", T: Reference },
    { no: 30, name: "contact", kind: "message", T: ContactPoint, repeated: true },
    { no: 31, name: "location", kind: "message", T: Reference },
    { no: 32, name: "url", kind: "message", T: Uri },
    { no: 33, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 34, name: "safety", kind: "message", T: CodeableConcept, repeated: true },
    { no: 35, name: "parent", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device {
    return new Device().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device {
    return new Device().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device {
    return new Device().fromJsonString(jsonString, options);
  }

  static equals(a: Device | PlainMessage<Device> | undefined, b: Device | PlainMessage<Device> | undefined): boolean {
    return proto3.util.equals(Device, a, b);
  }
}

/**
 * Unique Device Identifier (UDI) Barcode string
 *
 * @generated from message google.fhir.r4.core.Device.UdiCarrier
 */
export class Device_UdiCarrier extends Message<Device_UdiCarrier> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Mandatory fixed portion of UDI
   *
   * @generated from field: google.fhir.r4.core.String device_identifier = 4;
   */
  deviceIdentifier?: String;

  /**
   * UDI Issuing Organization
   *
   * @generated from field: google.fhir.r4.core.Uri issuer = 5;
   */
  issuer?: Uri;

  /**
   * Regional UDI authority
   *
   * @generated from field: google.fhir.r4.core.Uri jurisdiction = 6;
   */
  jurisdiction?: Uri;

  /**
   * UDI Machine Readable Barcode String
   *
   * @generated from field: google.fhir.r4.core.Base64Binary carrier_aidc = 7 [json_name = "carrierAIDC"];
   */
  carrierAidc?: Base64Binary;

  /**
   * UDI Human Readable Barcode String
   *
   * @generated from field: google.fhir.r4.core.String carrier_hrf = 8 [json_name = "carrierHRF"];
   */
  carrierHrf?: String;

  /**
   * @generated from field: google.fhir.r4.core.Device.UdiCarrier.EntryTypeCode entry_type = 9;
   */
  entryType?: Device_UdiCarrier_EntryTypeCode;

  constructor(data?: PartialMessage<Device_UdiCarrier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.UdiCarrier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "device_identifier", kind: "message", T: String },
    { no: 5, name: "issuer", kind: "message", T: Uri },
    { no: 6, name: "jurisdiction", kind: "message", T: Uri },
    { no: 7, name: "carrier_aidc", jsonName: "carrierAIDC", kind: "message", T: Base64Binary },
    { no: 8, name: "carrier_hrf", jsonName: "carrierHRF", kind: "message", T: String },
    { no: 9, name: "entry_type", kind: "message", T: Device_UdiCarrier_EntryTypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_UdiCarrier {
    return new Device_UdiCarrier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_UdiCarrier {
    return new Device_UdiCarrier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_UdiCarrier {
    return new Device_UdiCarrier().fromJsonString(jsonString, options);
  }

  static equals(a: Device_UdiCarrier | PlainMessage<Device_UdiCarrier> | undefined, b: Device_UdiCarrier | PlainMessage<Device_UdiCarrier> | undefined): boolean {
    return proto3.util.equals(Device_UdiCarrier, a, b);
  }
}

/**
 * barcode | rfid | manual +
 *
 * @generated from message google.fhir.r4.core.Device.UdiCarrier.EntryTypeCode
 */
export class Device_UdiCarrier_EntryTypeCode extends Message<Device_UdiCarrier_EntryTypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.UDIEntryTypeCode.Value value = 1;
   */
  value = UDIEntryTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Device_UdiCarrier_EntryTypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.UdiCarrier.EntryTypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(UDIEntryTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_UdiCarrier_EntryTypeCode {
    return new Device_UdiCarrier_EntryTypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_UdiCarrier_EntryTypeCode {
    return new Device_UdiCarrier_EntryTypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_UdiCarrier_EntryTypeCode {
    return new Device_UdiCarrier_EntryTypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: Device_UdiCarrier_EntryTypeCode | PlainMessage<Device_UdiCarrier_EntryTypeCode> | undefined, b: Device_UdiCarrier_EntryTypeCode | PlainMessage<Device_UdiCarrier_EntryTypeCode> | undefined): boolean {
    return proto3.util.equals(Device_UdiCarrier_EntryTypeCode, a, b);
  }
}

/**
 * active | inactive | entered-in-error | unknown
 *
 * @generated from message google.fhir.r4.core.Device.StatusCode
 */
export class Device_StatusCode extends Message<Device_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FHIRDeviceStatusCode.Value value = 1;
   */
  value = FHIRDeviceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Device_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FHIRDeviceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_StatusCode {
    return new Device_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_StatusCode {
    return new Device_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_StatusCode {
    return new Device_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Device_StatusCode | PlainMessage<Device_StatusCode> | undefined, b: Device_StatusCode | PlainMessage<Device_StatusCode> | undefined): boolean {
    return proto3.util.equals(Device_StatusCode, a, b);
  }
}

/**
 * The name of the device as given by the manufacturer
 *
 * @generated from message google.fhir.r4.core.Device.DeviceName
 */
export class Device_DeviceName extends Message<Device_DeviceName> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The name of the device
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * @generated from field: google.fhir.r4.core.Device.DeviceName.TypeCode type = 5;
   */
  type?: Device_DeviceName_TypeCode;

  constructor(data?: PartialMessage<Device_DeviceName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.DeviceName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: Device_DeviceName_TypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_DeviceName {
    return new Device_DeviceName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_DeviceName {
    return new Device_DeviceName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_DeviceName {
    return new Device_DeviceName().fromJsonString(jsonString, options);
  }

  static equals(a: Device_DeviceName | PlainMessage<Device_DeviceName> | undefined, b: Device_DeviceName | PlainMessage<Device_DeviceName> | undefined): boolean {
    return proto3.util.equals(Device_DeviceName, a, b);
  }
}

/**
 * udi-label-name | user-friendly-name | patient-reported-name |
 * manufacturer-name | model-name | other
 *
 * @generated from message google.fhir.r4.core.Device.DeviceName.TypeCode
 */
export class Device_DeviceName_TypeCode extends Message<Device_DeviceName_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceNameTypeCode.Value value = 1;
   */
  value = DeviceNameTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Device_DeviceName_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.DeviceName.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceNameTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_DeviceName_TypeCode {
    return new Device_DeviceName_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_DeviceName_TypeCode {
    return new Device_DeviceName_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_DeviceName_TypeCode {
    return new Device_DeviceName_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: Device_DeviceName_TypeCode | PlainMessage<Device_DeviceName_TypeCode> | undefined, b: Device_DeviceName_TypeCode | PlainMessage<Device_DeviceName_TypeCode> | undefined): boolean {
    return proto3.util.equals(Device_DeviceName_TypeCode, a, b);
  }
}

/**
 * The capabilities supported on a  device, the standards to which the device
 * conforms for a particular purpose, and used for the communication
 *
 * @generated from message google.fhir.r4.core.Device.Specialization
 */
export class Device_Specialization extends Message<Device_Specialization> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The standard that is used to operate and communicate
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept system_type = 4;
   */
  systemType?: CodeableConcept;

  /**
   * The version of the standard that is used to operate and communicate
   *
   * @generated from field: google.fhir.r4.core.String version = 5;
   */
  version?: String;

  constructor(data?: PartialMessage<Device_Specialization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.Specialization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "system_type", kind: "message", T: CodeableConcept },
    { no: 5, name: "version", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_Specialization {
    return new Device_Specialization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_Specialization {
    return new Device_Specialization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_Specialization {
    return new Device_Specialization().fromJsonString(jsonString, options);
  }

  static equals(a: Device_Specialization | PlainMessage<Device_Specialization> | undefined, b: Device_Specialization | PlainMessage<Device_Specialization> | undefined): boolean {
    return proto3.util.equals(Device_Specialization, a, b);
  }
}

/**
 * The actual design of the device or software version running on the device
 *
 * @generated from message google.fhir.r4.core.Device.Version
 */
export class Device_Version extends Message<Device_Version> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of the device version
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * A single component of the device version
   *
   * @generated from field: google.fhir.r4.core.Identifier component = 5;
   */
  component?: Identifier;

  /**
   * The version text
   *
   * @generated from field: google.fhir.r4.core.String value = 6;
   */
  value?: String;

  constructor(data?: PartialMessage<Device_Version>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.Version";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "component", kind: "message", T: Identifier },
    { no: 6, name: "value", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_Version {
    return new Device_Version().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_Version {
    return new Device_Version().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_Version {
    return new Device_Version().fromJsonString(jsonString, options);
  }

  static equals(a: Device_Version | PlainMessage<Device_Version> | undefined, b: Device_Version | PlainMessage<Device_Version> | undefined): boolean {
    return proto3.util.equals(Device_Version, a, b);
  }
}

/**
 * The actual configuration settings of a device as it actually operates,
 * e.g., regulation status, time properties
 *
 * @generated from message google.fhir.r4.core.Device.Property
 */
export class Device_Property extends Message<Device_Property> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Property value as a quantity
   *
   * @generated from field: repeated google.fhir.r4.core.Quantity value_quantity = 5;
   */
  valueQuantity: Quantity[] = [];

  /**
   * Property value as a code, e.g., NTP4 (synced to NTP)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept value_code = 6;
   */
  valueCode: CodeableConcept[] = [];

  constructor(data?: PartialMessage<Device_Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Device.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "value_quantity", kind: "message", T: Quantity, repeated: true },
    { no: 6, name: "value_code", kind: "message", T: CodeableConcept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Device_Property {
    return new Device_Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Device_Property {
    return new Device_Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Device_Property {
    return new Device_Property().fromJsonString(jsonString, options);
  }

  static equals(a: Device_Property | PlainMessage<Device_Property> | undefined, b: Device_Property | PlainMessage<Device_Property> | undefined): boolean {
    return proto3.util.equals(Device_Property, a, b);
  }
}

