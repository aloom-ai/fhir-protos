//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/procedure.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Age, Annotation, Canonical, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Range, Reference, String, Uri } from "../datatypes_pb.js";
import { EventStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Procedure.
 * An action that is being or was performed on a patient.
 * See http://hl7.org/fhir/StructureDefinition/Procedure
 *
 * @generated from message google.fhir.r4.core.Procedure
 */
export class Procedure extends Message<Procedure> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External Identifiers for this procedure
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Instantiates FHIR protocol or definition
   *
   * @generated from field: repeated google.fhir.r4.core.Canonical instantiates_canonical = 11;
   */
  instantiatesCanonical: Canonical[] = [];

  /**
   * Instantiates external protocol or definition
   *
   * @generated from field: repeated google.fhir.r4.core.Uri instantiates_uri = 12;
   */
  instantiatesUri: Uri[] = [];

  /**
   * A request for this procedure
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 13;
   */
  basedOn: Reference[] = [];

  /**
   * Part of referenced event
   *
   * @generated from field: repeated google.fhir.r4.core.Reference part_of = 14;
   */
  partOf: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Procedure.StatusCode status = 15;
   */
  status?: Procedure_StatusCode;

  /**
   * Reason for current status
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status_reason = 16;
   */
  statusReason?: CodeableConcept;

  /**
   * Classification of the procedure
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 17;
   */
  category?: CodeableConcept;

  /**
   * Identification of the procedure
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 18;
   */
  code?: CodeableConcept;

  /**
   * Who the procedure was performed on
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 19;
   */
  subject?: Reference;

  /**
   * Encounter created as part of
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 20;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Procedure.PerformedX performed = 21;
   */
  performed?: Procedure_PerformedX;

  /**
   * Who recorded the procedure
   *
   * @generated from field: google.fhir.r4.core.Reference recorder = 22;
   */
  recorder?: Reference;

  /**
   * Person who asserts this procedure
   *
   * @generated from field: google.fhir.r4.core.Reference asserter = 23;
   */
  asserter?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.Procedure.Performer performer = 24;
   */
  performer: Procedure_Performer[] = [];

  /**
   * Where the procedure happened
   *
   * @generated from field: google.fhir.r4.core.Reference location = 25;
   */
  location?: Reference;

  /**
   * Coded reason procedure performed
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 26;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * The justification that the procedure was performed
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reason_reference = 27;
   */
  reasonReference: Reference[] = [];

  /**
   * Target body sites
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept body_site = 28;
   */
  bodySite: CodeableConcept[] = [];

  /**
   * The result of procedure
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept outcome = 29;
   */
  outcome?: CodeableConcept;

  /**
   * Any report resulting from the procedure
   *
   * @generated from field: repeated google.fhir.r4.core.Reference report = 30;
   */
  report: Reference[] = [];

  /**
   * Complication following the procedure
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept complication = 31;
   */
  complication: CodeableConcept[] = [];

  /**
   * A condition that is a result of the procedure
   *
   * @generated from field: repeated google.fhir.r4.core.Reference complication_detail = 32;
   */
  complicationDetail: Reference[] = [];

  /**
   * Instructions for follow up
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept follow_up = 33;
   */
  followUp: CodeableConcept[] = [];

  /**
   * Additional information about the procedure
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 34;
   */
  note: Annotation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Procedure.FocalDevice focal_device = 35;
   */
  focalDevice: Procedure_FocalDevice[] = [];

  /**
   * Items used during procedure
   *
   * @generated from field: repeated google.fhir.r4.core.Reference used_reference = 36;
   */
  usedReference: Reference[] = [];

  /**
   * Coded items used during the procedure
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept used_code = 37;
   */
  usedCode: CodeableConcept[] = [];

  constructor(data?: PartialMessage<Procedure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Procedure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "instantiates_canonical", kind: "message", T: Canonical, repeated: true },
    { no: 12, name: "instantiates_uri", kind: "message", T: Uri, repeated: true },
    { no: 13, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 14, name: "part_of", kind: "message", T: Reference, repeated: true },
    { no: 15, name: "status", kind: "message", T: Procedure_StatusCode },
    { no: 16, name: "status_reason", kind: "message", T: CodeableConcept },
    { no: 17, name: "category", kind: "message", T: CodeableConcept },
    { no: 18, name: "code", kind: "message", T: CodeableConcept },
    { no: 19, name: "subject", kind: "message", T: Reference },
    { no: 20, name: "encounter", kind: "message", T: Reference },
    { no: 21, name: "performed", kind: "message", T: Procedure_PerformedX },
    { no: 22, name: "recorder", kind: "message", T: Reference },
    { no: 23, name: "asserter", kind: "message", T: Reference },
    { no: 24, name: "performer", kind: "message", T: Procedure_Performer, repeated: true },
    { no: 25, name: "location", kind: "message", T: Reference },
    { no: 26, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 27, name: "reason_reference", kind: "message", T: Reference, repeated: true },
    { no: 28, name: "body_site", kind: "message", T: CodeableConcept, repeated: true },
    { no: 29, name: "outcome", kind: "message", T: CodeableConcept },
    { no: 30, name: "report", kind: "message", T: Reference, repeated: true },
    { no: 31, name: "complication", kind: "message", T: CodeableConcept, repeated: true },
    { no: 32, name: "complication_detail", kind: "message", T: Reference, repeated: true },
    { no: 33, name: "follow_up", kind: "message", T: CodeableConcept, repeated: true },
    { no: 34, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 35, name: "focal_device", kind: "message", T: Procedure_FocalDevice, repeated: true },
    { no: 36, name: "used_reference", kind: "message", T: Reference, repeated: true },
    { no: 37, name: "used_code", kind: "message", T: CodeableConcept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Procedure {
    return new Procedure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Procedure {
    return new Procedure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Procedure {
    return new Procedure().fromJsonString(jsonString, options);
  }

  static equals(a: Procedure | PlainMessage<Procedure> | undefined, b: Procedure | PlainMessage<Procedure> | undefined): boolean {
    return proto3.util.equals(Procedure, a, b);
  }
}

/**
 * preparation | in-progress | not-done | on-hold | stopped | completed |
 * entered-in-error | unknown
 *
 * @generated from message google.fhir.r4.core.Procedure.StatusCode
 */
export class Procedure_StatusCode extends Message<Procedure_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.EventStatusCode.Value value = 1;
   */
  value = EventStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Procedure_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Procedure.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EventStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Procedure_StatusCode {
    return new Procedure_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Procedure_StatusCode {
    return new Procedure_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Procedure_StatusCode {
    return new Procedure_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Procedure_StatusCode | PlainMessage<Procedure_StatusCode> | undefined, b: Procedure_StatusCode | PlainMessage<Procedure_StatusCode> | undefined): boolean {
    return proto3.util.equals(Procedure_StatusCode, a, b);
  }
}

/**
 * When the procedure was performed
 *
 * @generated from message google.fhir.r4.core.Procedure.PerformedX
 */
export class Procedure_PerformedX extends Message<Procedure_PerformedX> {
  /**
   * @generated from oneof google.fhir.r4.core.Procedure.PerformedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 3 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Age age = 4;
     */
    value: Age;
    case: "age";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 5;
     */
    value: Range;
    case: "range";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Procedure_PerformedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Procedure.PerformedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 3, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 4, name: "age", kind: "message", T: Age, oneof: "choice" },
    { no: 5, name: "range", kind: "message", T: Range, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Procedure_PerformedX {
    return new Procedure_PerformedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Procedure_PerformedX {
    return new Procedure_PerformedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Procedure_PerformedX {
    return new Procedure_PerformedX().fromJsonString(jsonString, options);
  }

  static equals(a: Procedure_PerformedX | PlainMessage<Procedure_PerformedX> | undefined, b: Procedure_PerformedX | PlainMessage<Procedure_PerformedX> | undefined): boolean {
    return proto3.util.equals(Procedure_PerformedX, a, b);
  }
}

/**
 * The people who performed the procedure
 *
 * @generated from message google.fhir.r4.core.Procedure.Performer
 */
export class Procedure_Performer extends Message<Procedure_Performer> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of performance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept function = 4;
   */
  function?: CodeableConcept;

  /**
   * The reference to the practitioner
   *
   * @generated from field: google.fhir.r4.core.Reference actor = 5;
   */
  actor?: Reference;

  /**
   * Organization the device or practitioner was acting for
   *
   * @generated from field: google.fhir.r4.core.Reference on_behalf_of = 6;
   */
  onBehalfOf?: Reference;

  constructor(data?: PartialMessage<Procedure_Performer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Procedure.Performer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "function", kind: "message", T: CodeableConcept },
    { no: 5, name: "actor", kind: "message", T: Reference },
    { no: 6, name: "on_behalf_of", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Procedure_Performer {
    return new Procedure_Performer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Procedure_Performer {
    return new Procedure_Performer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Procedure_Performer {
    return new Procedure_Performer().fromJsonString(jsonString, options);
  }

  static equals(a: Procedure_Performer | PlainMessage<Procedure_Performer> | undefined, b: Procedure_Performer | PlainMessage<Procedure_Performer> | undefined): boolean {
    return proto3.util.equals(Procedure_Performer, a, b);
  }
}

/**
 * Manipulated, implanted, or removed device
 *
 * @generated from message google.fhir.r4.core.Procedure.FocalDevice
 */
export class Procedure_FocalDevice extends Message<Procedure_FocalDevice> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Kind of change to device
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept action = 4;
   */
  action?: CodeableConcept;

  /**
   * Device that was changed
   *
   * @generated from field: google.fhir.r4.core.Reference manipulated = 5;
   */
  manipulated?: Reference;

  constructor(data?: PartialMessage<Procedure_FocalDevice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Procedure.FocalDevice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "action", kind: "message", T: CodeableConcept },
    { no: 5, name: "manipulated", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Procedure_FocalDevice {
    return new Procedure_FocalDevice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Procedure_FocalDevice {
    return new Procedure_FocalDevice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Procedure_FocalDevice {
    return new Procedure_FocalDevice().fromJsonString(jsonString, options);
  }

  static equals(a: Procedure_FocalDevice | PlainMessage<Procedure_FocalDevice> | undefined, b: Procedure_FocalDevice | PlainMessage<Procedure_FocalDevice> | undefined): boolean {
    return proto3.util.equals(Procedure_FocalDevice, a, b);
  }
}

