//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/claim_response.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Address, Attachment, Boolean, Code, CodeableConcept, Date, DateTime, Decimal, Extension, Id, Identifier, Meta, Money, Narrative, Period, PositiveInt, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { ClaimProcessingCode_Value, FinancialResourceStatusCode_Value, NoteTypeCode_Value, UseCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for ClaimResponse.
 * Response to a claim predetermination or preauthorization.
 * See http://hl7.org/fhir/StructureDefinition/ClaimResponse
 *
 * @generated from message google.fhir.r4.core.ClaimResponse
 */
export class ClaimResponse extends Message<ClaimResponse> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for a claim response
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.StatusCode status = 11;
   */
  status?: ClaimResponse_StatusCode;

  /**
   * More granular claim type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 12;
   */
  type?: CodeableConcept;

  /**
   * More granular claim type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept sub_type = 13;
   */
  subType?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.UseCode use = 14;
   */
  use?: ClaimResponse_UseCode;

  /**
   * The recipient of the products and services
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 15;
   */
  patient?: Reference;

  /**
   * Response creation date
   *
   * @generated from field: google.fhir.r4.core.DateTime created = 16;
   */
  created?: DateTime;

  /**
   * Party responsible for reimbursement
   *
   * @generated from field: google.fhir.r4.core.Reference insurer = 17;
   */
  insurer?: Reference;

  /**
   * Party responsible for the claim
   *
   * @generated from field: google.fhir.r4.core.Reference requestor = 18;
   */
  requestor?: Reference;

  /**
   * Id of resource triggering adjudication
   *
   * @generated from field: google.fhir.r4.core.Reference request = 19;
   */
  request?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.OutcomeCode outcome = 20;
   */
  outcome?: ClaimResponse_OutcomeCode;

  /**
   * Disposition Message
   *
   * @generated from field: google.fhir.r4.core.String disposition = 21;
   */
  disposition?: String;

  /**
   * Preauthorization reference
   *
   * @generated from field: google.fhir.r4.core.String pre_auth_ref = 22;
   */
  preAuthRef?: String;

  /**
   * Preauthorization reference effective period
   *
   * @generated from field: google.fhir.r4.core.Period pre_auth_period = 23;
   */
  preAuthPeriod?: Period;

  /**
   * Party to be paid any benefits payable
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept payee_type = 24;
   */
  payeeType?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item item = 25;
   */
  item: ClaimResponse_Item[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.AddedItem add_item = 26;
   */
  addItem: ClaimResponse_AddedItem[] = [];

  /**
   * Header-level adjudication
   *
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 27;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Total total = 28;
   */
  total: ClaimResponse_Total[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.Payment payment = 29;
   */
  payment?: ClaimResponse_Payment;

  /**
   * Funds reserved status
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept funds_reserve = 30;
   */
  fundsReserve?: CodeableConcept;

  /**
   * Printed form identifier
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept form_code = 31;
   */
  formCode?: CodeableConcept;

  /**
   * Printed reference or actual form
   *
   * @generated from field: google.fhir.r4.core.Attachment form = 32;
   */
  form?: Attachment;

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Note process_note = 33;
   */
  processNote: ClaimResponse_Note[] = [];

  /**
   * Request for additional information
   *
   * @generated from field: repeated google.fhir.r4.core.Reference communication_request = 34;
   */
  communicationRequest: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Insurance insurance = 35;
   */
  insurance: ClaimResponse_Insurance[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Error error = 36;
   */
  error: ClaimResponse_Error[] = [];

  constructor(data?: PartialMessage<ClaimResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: ClaimResponse_StatusCode },
    { no: 12, name: "type", kind: "message", T: CodeableConcept },
    { no: 13, name: "sub_type", kind: "message", T: CodeableConcept },
    { no: 14, name: "use", kind: "message", T: ClaimResponse_UseCode },
    { no: 15, name: "patient", kind: "message", T: Reference },
    { no: 16, name: "created", kind: "message", T: DateTime },
    { no: 17, name: "insurer", kind: "message", T: Reference },
    { no: 18, name: "requestor", kind: "message", T: Reference },
    { no: 19, name: "request", kind: "message", T: Reference },
    { no: 20, name: "outcome", kind: "message", T: ClaimResponse_OutcomeCode },
    { no: 21, name: "disposition", kind: "message", T: String },
    { no: 22, name: "pre_auth_ref", kind: "message", T: String },
    { no: 23, name: "pre_auth_period", kind: "message", T: Period },
    { no: 24, name: "payee_type", kind: "message", T: CodeableConcept },
    { no: 25, name: "item", kind: "message", T: ClaimResponse_Item, repeated: true },
    { no: 26, name: "add_item", kind: "message", T: ClaimResponse_AddedItem, repeated: true },
    { no: 27, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
    { no: 28, name: "total", kind: "message", T: ClaimResponse_Total, repeated: true },
    { no: 29, name: "payment", kind: "message", T: ClaimResponse_Payment },
    { no: 30, name: "funds_reserve", kind: "message", T: CodeableConcept },
    { no: 31, name: "form_code", kind: "message", T: CodeableConcept },
    { no: 32, name: "form", kind: "message", T: Attachment },
    { no: 33, name: "process_note", kind: "message", T: ClaimResponse_Note, repeated: true },
    { no: 34, name: "communication_request", kind: "message", T: Reference, repeated: true },
    { no: 35, name: "insurance", kind: "message", T: ClaimResponse_Insurance, repeated: true },
    { no: 36, name: "error", kind: "message", T: ClaimResponse_Error, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse {
    return new ClaimResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse {
    return new ClaimResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse {
    return new ClaimResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse | PlainMessage<ClaimResponse> | undefined, b: ClaimResponse | PlainMessage<ClaimResponse> | undefined): boolean {
    return proto3.util.equals(ClaimResponse, a, b);
  }
}

/**
 * active | cancelled | draft | entered-in-error
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.StatusCode
 */
export class ClaimResponse_StatusCode extends Message<ClaimResponse_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FinancialResourceStatusCode.Value value = 1;
   */
  value = FinancialResourceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClaimResponse_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FinancialResourceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_StatusCode {
    return new ClaimResponse_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_StatusCode {
    return new ClaimResponse_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_StatusCode {
    return new ClaimResponse_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_StatusCode | PlainMessage<ClaimResponse_StatusCode> | undefined, b: ClaimResponse_StatusCode | PlainMessage<ClaimResponse_StatusCode> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_StatusCode, a, b);
  }
}

/**
 * claim | preauthorization | predetermination
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.UseCode
 */
export class ClaimResponse_UseCode extends Message<ClaimResponse_UseCode> {
  /**
   * @generated from field: google.fhir.r4.core.UseCode.Value value = 1;
   */
  value = UseCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClaimResponse_UseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.UseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(UseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_UseCode {
    return new ClaimResponse_UseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_UseCode {
    return new ClaimResponse_UseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_UseCode {
    return new ClaimResponse_UseCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_UseCode | PlainMessage<ClaimResponse_UseCode> | undefined, b: ClaimResponse_UseCode | PlainMessage<ClaimResponse_UseCode> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_UseCode, a, b);
  }
}

/**
 * queued | complete | error | partial
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.OutcomeCode
 */
export class ClaimResponse_OutcomeCode extends Message<ClaimResponse_OutcomeCode> {
  /**
   * @generated from field: google.fhir.r4.core.ClaimProcessingCode.Value value = 1;
   */
  value = ClaimProcessingCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClaimResponse_OutcomeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.OutcomeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ClaimProcessingCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_OutcomeCode {
    return new ClaimResponse_OutcomeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_OutcomeCode {
    return new ClaimResponse_OutcomeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_OutcomeCode {
    return new ClaimResponse_OutcomeCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_OutcomeCode | PlainMessage<ClaimResponse_OutcomeCode> | undefined, b: ClaimResponse_OutcomeCode | PlainMessage<ClaimResponse_OutcomeCode> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_OutcomeCode, a, b);
  }
}

/**
 * Adjudication for claim line items
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Item
 */
export class ClaimResponse_Item extends Message<ClaimResponse_Item> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Claim item instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt item_sequence = 4;
   */
  itemSequence?: PositiveInt;

  /**
   * Applicable note numbers
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt note_number = 5;
   */
  noteNumber: PositiveInt[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 6;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.ItemDetail detail = 7;
   */
  detail: ClaimResponse_Item_ItemDetail[] = [];

  constructor(data?: PartialMessage<ClaimResponse_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "item_sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "note_number", kind: "message", T: PositiveInt, repeated: true },
    { no: 6, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
    { no: 7, name: "detail", kind: "message", T: ClaimResponse_Item_ItemDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Item {
    return new ClaimResponse_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Item {
    return new ClaimResponse_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Item {
    return new ClaimResponse_Item().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Item | PlainMessage<ClaimResponse_Item> | undefined, b: ClaimResponse_Item | PlainMessage<ClaimResponse_Item> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Item, a, b);
  }
}

/**
 * Adjudication details
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Item.Adjudication
 */
export class ClaimResponse_Item_Adjudication extends Message<ClaimResponse_Item_Adjudication> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of adjudication information
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 4;
   */
  category?: CodeableConcept;

  /**
   * Explanation of adjudication outcome
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept reason = 5;
   */
  reason?: CodeableConcept;

  /**
   * Monetary amount
   *
   * @generated from field: google.fhir.r4.core.Money amount = 6;
   */
  amount?: Money;

  /**
   * Non-monetary value
   *
   * @generated from field: google.fhir.r4.core.Decimal value = 7;
   */
  value?: Decimal;

  constructor(data?: PartialMessage<ClaimResponse_Item_Adjudication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Item.Adjudication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "category", kind: "message", T: CodeableConcept },
    { no: 5, name: "reason", kind: "message", T: CodeableConcept },
    { no: 6, name: "amount", kind: "message", T: Money },
    { no: 7, name: "value", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Item_Adjudication {
    return new ClaimResponse_Item_Adjudication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Item_Adjudication {
    return new ClaimResponse_Item_Adjudication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Item_Adjudication {
    return new ClaimResponse_Item_Adjudication().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Item_Adjudication | PlainMessage<ClaimResponse_Item_Adjudication> | undefined, b: ClaimResponse_Item_Adjudication | PlainMessage<ClaimResponse_Item_Adjudication> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Item_Adjudication, a, b);
  }
}

/**
 * Adjudication for claim details
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Item.ItemDetail
 */
export class ClaimResponse_Item_ItemDetail extends Message<ClaimResponse_Item_ItemDetail> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Claim detail instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt detail_sequence = 4;
   */
  detailSequence?: PositiveInt;

  /**
   * Applicable note numbers
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt note_number = 5;
   */
  noteNumber: PositiveInt[] = [];

  /**
   * Detail level adjudication details
   *
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 6;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.ItemDetail.SubDetail sub_detail = 7;
   */
  subDetail: ClaimResponse_Item_ItemDetail_SubDetail[] = [];

  constructor(data?: PartialMessage<ClaimResponse_Item_ItemDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Item.ItemDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "detail_sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "note_number", kind: "message", T: PositiveInt, repeated: true },
    { no: 6, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
    { no: 7, name: "sub_detail", kind: "message", T: ClaimResponse_Item_ItemDetail_SubDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Item_ItemDetail {
    return new ClaimResponse_Item_ItemDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Item_ItemDetail {
    return new ClaimResponse_Item_ItemDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Item_ItemDetail {
    return new ClaimResponse_Item_ItemDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Item_ItemDetail | PlainMessage<ClaimResponse_Item_ItemDetail> | undefined, b: ClaimResponse_Item_ItemDetail | PlainMessage<ClaimResponse_Item_ItemDetail> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Item_ItemDetail, a, b);
  }
}

/**
 * Adjudication for claim sub-details
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Item.ItemDetail.SubDetail
 */
export class ClaimResponse_Item_ItemDetail_SubDetail extends Message<ClaimResponse_Item_ItemDetail_SubDetail> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Claim sub-detail instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sub_detail_sequence = 4;
   */
  subDetailSequence?: PositiveInt;

  /**
   * Applicable note numbers
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt note_number = 5;
   */
  noteNumber: PositiveInt[] = [];

  /**
   * Subdetail level adjudication details
   *
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 6;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  constructor(data?: PartialMessage<ClaimResponse_Item_ItemDetail_SubDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Item.ItemDetail.SubDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sub_detail_sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "note_number", kind: "message", T: PositiveInt, repeated: true },
    { no: 6, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Item_ItemDetail_SubDetail {
    return new ClaimResponse_Item_ItemDetail_SubDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Item_ItemDetail_SubDetail {
    return new ClaimResponse_Item_ItemDetail_SubDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Item_ItemDetail_SubDetail {
    return new ClaimResponse_Item_ItemDetail_SubDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Item_ItemDetail_SubDetail | PlainMessage<ClaimResponse_Item_ItemDetail_SubDetail> | undefined, b: ClaimResponse_Item_ItemDetail_SubDetail | PlainMessage<ClaimResponse_Item_ItemDetail_SubDetail> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Item_ItemDetail_SubDetail, a, b);
  }
}

/**
 * Insurer added line items
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.AddedItem
 */
export class ClaimResponse_AddedItem extends Message<ClaimResponse_AddedItem> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Item sequence number
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt item_sequence = 4;
   */
  itemSequence: PositiveInt[] = [];

  /**
   * Detail sequence number
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt detail_sequence = 5;
   */
  detailSequence: PositiveInt[] = [];

  /**
   * Subdetail sequence number
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt subdetail_sequence = 6;
   */
  subdetailSequence: PositiveInt[] = [];

  /**
   * Authorized providers
   *
   * @generated from field: repeated google.fhir.r4.core.Reference provider = 7;
   */
  provider: Reference[] = [];

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 8;
   */
  productOrService?: CodeableConcept;

  /**
   * Service/Product billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 9;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Program the product or service is provided under
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept program_code = 10;
   */
  programCode: CodeableConcept[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.AddedItem.ServicedX serviced = 11;
   */
  serviced?: ClaimResponse_AddedItem_ServicedX;

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.AddedItem.LocationX location = 12;
   */
  location?: ClaimResponse_AddedItem_LocationX;

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 13;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 14;
   */
  unitPrice?: Money;

  /**
   * Price scaling factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 15;
   */
  factor?: Decimal;

  /**
   * Total item cost
   *
   * @generated from field: google.fhir.r4.core.Money net = 16;
   */
  net?: Money;

  /**
   * Anatomical location
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept body_site = 17;
   */
  bodySite?: CodeableConcept;

  /**
   * Anatomical sub-location
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept sub_site = 18;
   */
  subSite: CodeableConcept[] = [];

  /**
   * Applicable note numbers
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt note_number = 19;
   */
  noteNumber: PositiveInt[] = [];

  /**
   * Added items adjudication
   *
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 20;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.AddedItem.AddedItemDetail detail = 21;
   */
  detail: ClaimResponse_AddedItem_AddedItemDetail[] = [];

  constructor(data?: PartialMessage<ClaimResponse_AddedItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.AddedItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "item_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 5, name: "detail_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 6, name: "subdetail_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 7, name: "provider", kind: "message", T: Reference, repeated: true },
    { no: 8, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 9, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "program_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 11, name: "serviced", kind: "message", T: ClaimResponse_AddedItem_ServicedX },
    { no: 12, name: "location", kind: "message", T: ClaimResponse_AddedItem_LocationX },
    { no: 13, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 14, name: "unit_price", kind: "message", T: Money },
    { no: 15, name: "factor", kind: "message", T: Decimal },
    { no: 16, name: "net", kind: "message", T: Money },
    { no: 17, name: "body_site", kind: "message", T: CodeableConcept },
    { no: 18, name: "sub_site", kind: "message", T: CodeableConcept, repeated: true },
    { no: 19, name: "note_number", kind: "message", T: PositiveInt, repeated: true },
    { no: 20, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
    { no: 21, name: "detail", kind: "message", T: ClaimResponse_AddedItem_AddedItemDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_AddedItem {
    return new ClaimResponse_AddedItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem {
    return new ClaimResponse_AddedItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem {
    return new ClaimResponse_AddedItem().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_AddedItem | PlainMessage<ClaimResponse_AddedItem> | undefined, b: ClaimResponse_AddedItem | PlainMessage<ClaimResponse_AddedItem> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_AddedItem, a, b);
  }
}

/**
 * Date or dates of service or product delivery
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.AddedItem.ServicedX
 */
export class ClaimResponse_AddedItem_ServicedX extends Message<ClaimResponse_AddedItem_ServicedX> {
  /**
   * @generated from oneof google.fhir.r4.core.ClaimResponse.AddedItem.ServicedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClaimResponse_AddedItem_ServicedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.AddedItem.ServicedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_AddedItem_ServicedX {
    return new ClaimResponse_AddedItem_ServicedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_ServicedX {
    return new ClaimResponse_AddedItem_ServicedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_ServicedX {
    return new ClaimResponse_AddedItem_ServicedX().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_AddedItem_ServicedX | PlainMessage<ClaimResponse_AddedItem_ServicedX> | undefined, b: ClaimResponse_AddedItem_ServicedX | PlainMessage<ClaimResponse_AddedItem_ServicedX> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_AddedItem_ServicedX, a, b);
  }
}

/**
 * Place of service or where product was supplied
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.AddedItem.LocationX
 */
export class ClaimResponse_AddedItem_LocationX extends Message<ClaimResponse_AddedItem_LocationX> {
  /**
   * @generated from oneof google.fhir.r4.core.ClaimResponse.AddedItem.LocationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Address address = 2;
     */
    value: Address;
    case: "address";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 3;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClaimResponse_AddedItem_LocationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.AddedItem.LocationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "address", kind: "message", T: Address, oneof: "choice" },
    { no: 3, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_AddedItem_LocationX {
    return new ClaimResponse_AddedItem_LocationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_LocationX {
    return new ClaimResponse_AddedItem_LocationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_LocationX {
    return new ClaimResponse_AddedItem_LocationX().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_AddedItem_LocationX | PlainMessage<ClaimResponse_AddedItem_LocationX> | undefined, b: ClaimResponse_AddedItem_LocationX | PlainMessage<ClaimResponse_AddedItem_LocationX> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_AddedItem_LocationX, a, b);
  }
}

/**
 * Insurer added line details
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.AddedItem.AddedItemDetail
 */
export class ClaimResponse_AddedItem_AddedItemDetail extends Message<ClaimResponse_AddedItem_AddedItemDetail> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 4;
   */
  productOrService?: CodeableConcept;

  /**
   * Service/Product billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 5;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 6;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 7;
   */
  unitPrice?: Money;

  /**
   * Price scaling factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 8;
   */
  factor?: Decimal;

  /**
   * Total item cost
   *
   * @generated from field: google.fhir.r4.core.Money net = 9;
   */
  net?: Money;

  /**
   * Applicable note numbers
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt note_number = 10;
   */
  noteNumber: PositiveInt[] = [];

  /**
   * Added items detail adjudication
   *
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 11;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.AddedItem.AddedItemDetail.AddedItemSubDetail sub_detail = 12;
   */
  subDetail: ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail[] = [];

  constructor(data?: PartialMessage<ClaimResponse_AddedItem_AddedItemDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.AddedItem.AddedItemDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 5, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 7, name: "unit_price", kind: "message", T: Money },
    { no: 8, name: "factor", kind: "message", T: Decimal },
    { no: 9, name: "net", kind: "message", T: Money },
    { no: 10, name: "note_number", kind: "message", T: PositiveInt, repeated: true },
    { no: 11, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
    { no: 12, name: "sub_detail", kind: "message", T: ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_AddedItem_AddedItemDetail {
    return new ClaimResponse_AddedItem_AddedItemDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_AddedItemDetail {
    return new ClaimResponse_AddedItem_AddedItemDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_AddedItemDetail {
    return new ClaimResponse_AddedItem_AddedItemDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_AddedItem_AddedItemDetail | PlainMessage<ClaimResponse_AddedItem_AddedItemDetail> | undefined, b: ClaimResponse_AddedItem_AddedItemDetail | PlainMessage<ClaimResponse_AddedItem_AddedItemDetail> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_AddedItem_AddedItemDetail, a, b);
  }
}

/**
 * Insurer added line items
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.AddedItem.AddedItemDetail.AddedItemSubDetail
 */
export class ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail extends Message<ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 4;
   */
  productOrService?: CodeableConcept;

  /**
   * Service/Product billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 5;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 6;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 7;
   */
  unitPrice?: Money;

  /**
   * Price scaling factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 8;
   */
  factor?: Decimal;

  /**
   * Total item cost
   *
   * @generated from field: google.fhir.r4.core.Money net = 9;
   */
  net?: Money;

  /**
   * Applicable note numbers
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt note_number = 10;
   */
  noteNumber: PositiveInt[] = [];

  /**
   * Added items detail adjudication
   *
   * @generated from field: repeated google.fhir.r4.core.ClaimResponse.Item.Adjudication adjudication = 11;
   */
  adjudication: ClaimResponse_Item_Adjudication[] = [];

  constructor(data?: PartialMessage<ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.AddedItem.AddedItemDetail.AddedItemSubDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 5, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 7, name: "unit_price", kind: "message", T: Money },
    { no: 8, name: "factor", kind: "message", T: Decimal },
    { no: 9, name: "net", kind: "message", T: Money },
    { no: 10, name: "note_number", kind: "message", T: PositiveInt, repeated: true },
    { no: 11, name: "adjudication", kind: "message", T: ClaimResponse_Item_Adjudication, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail {
    return new ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail {
    return new ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail {
    return new ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail | PlainMessage<ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail> | undefined, b: ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail | PlainMessage<ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_AddedItem_AddedItemDetail_AddedItemSubDetail, a, b);
  }
}

/**
 * Adjudication totals
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Total
 */
export class ClaimResponse_Total extends Message<ClaimResponse_Total> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of adjudication information
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 4;
   */
  category?: CodeableConcept;

  /**
   * Financial total for the category
   *
   * @generated from field: google.fhir.r4.core.Money amount = 5;
   */
  amount?: Money;

  constructor(data?: PartialMessage<ClaimResponse_Total>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Total";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "category", kind: "message", T: CodeableConcept },
    { no: 5, name: "amount", kind: "message", T: Money },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Total {
    return new ClaimResponse_Total().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Total {
    return new ClaimResponse_Total().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Total {
    return new ClaimResponse_Total().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Total | PlainMessage<ClaimResponse_Total> | undefined, b: ClaimResponse_Total | PlainMessage<ClaimResponse_Total> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Total, a, b);
  }
}

/**
 * Payment Details
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Payment
 */
export class ClaimResponse_Payment extends Message<ClaimResponse_Payment> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Partial or complete payment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Payment adjustment for non-claim issues
   *
   * @generated from field: google.fhir.r4.core.Money adjustment = 5;
   */
  adjustment?: Money;

  /**
   * Explanation for the adjustment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept adjustment_reason = 6;
   */
  adjustmentReason?: CodeableConcept;

  /**
   * Expected date of payment
   *
   * @generated from field: google.fhir.r4.core.Date date = 7;
   */
  date?: Date;

  /**
   * Payable amount after adjustment
   *
   * @generated from field: google.fhir.r4.core.Money amount = 8;
   */
  amount?: Money;

  /**
   * Business identifier for the payment
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 9;
   */
  identifier?: Identifier;

  constructor(data?: PartialMessage<ClaimResponse_Payment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Payment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "adjustment", kind: "message", T: Money },
    { no: 6, name: "adjustment_reason", kind: "message", T: CodeableConcept },
    { no: 7, name: "date", kind: "message", T: Date },
    { no: 8, name: "amount", kind: "message", T: Money },
    { no: 9, name: "identifier", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Payment {
    return new ClaimResponse_Payment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Payment {
    return new ClaimResponse_Payment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Payment {
    return new ClaimResponse_Payment().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Payment | PlainMessage<ClaimResponse_Payment> | undefined, b: ClaimResponse_Payment | PlainMessage<ClaimResponse_Payment> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Payment, a, b);
  }
}

/**
 * Note concerning adjudication
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Note
 */
export class ClaimResponse_Note extends Message<ClaimResponse_Note> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Note instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt number = 4;
   */
  number?: PositiveInt;

  /**
   * @generated from field: google.fhir.r4.core.ClaimResponse.Note.TypeCode type = 5;
   */
  type?: ClaimResponse_Note_TypeCode;

  /**
   * Note explanatory text
   *
   * @generated from field: google.fhir.r4.core.String text = 6;
   */
  text?: String;

  /**
   * Language of the text
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept language = 7;
   */
  language?: CodeableConcept;

  constructor(data?: PartialMessage<ClaimResponse_Note>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Note";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "number", kind: "message", T: PositiveInt },
    { no: 5, name: "type", kind: "message", T: ClaimResponse_Note_TypeCode },
    { no: 6, name: "text", kind: "message", T: String },
    { no: 7, name: "language", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Note {
    return new ClaimResponse_Note().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Note {
    return new ClaimResponse_Note().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Note {
    return new ClaimResponse_Note().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Note | PlainMessage<ClaimResponse_Note> | undefined, b: ClaimResponse_Note | PlainMessage<ClaimResponse_Note> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Note, a, b);
  }
}

/**
 * display | print | printoper
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Note.TypeCode
 */
export class ClaimResponse_Note_TypeCode extends Message<ClaimResponse_Note_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.NoteTypeCode.Value value = 1;
   */
  value = NoteTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClaimResponse_Note_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Note.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(NoteTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Note_TypeCode {
    return new ClaimResponse_Note_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Note_TypeCode {
    return new ClaimResponse_Note_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Note_TypeCode {
    return new ClaimResponse_Note_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Note_TypeCode | PlainMessage<ClaimResponse_Note_TypeCode> | undefined, b: ClaimResponse_Note_TypeCode | PlainMessage<ClaimResponse_Note_TypeCode> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Note_TypeCode, a, b);
  }
}

/**
 * Patient insurance information
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Insurance
 */
export class ClaimResponse_Insurance extends Message<ClaimResponse_Insurance> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Insurance instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Coverage to be used for adjudication
   *
   * @generated from field: google.fhir.r4.core.Boolean focal = 5;
   */
  focal?: Boolean;

  /**
   * Insurance information
   *
   * @generated from field: google.fhir.r4.core.Reference coverage = 6;
   */
  coverage?: Reference;

  /**
   * Additional provider contract number
   *
   * @generated from field: google.fhir.r4.core.String business_arrangement = 7;
   */
  businessArrangement?: String;

  /**
   * Adjudication results
   *
   * @generated from field: google.fhir.r4.core.Reference claim_response = 8;
   */
  claimResponse?: Reference;

  constructor(data?: PartialMessage<ClaimResponse_Insurance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Insurance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "focal", kind: "message", T: Boolean },
    { no: 6, name: "coverage", kind: "message", T: Reference },
    { no: 7, name: "business_arrangement", kind: "message", T: String },
    { no: 8, name: "claim_response", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Insurance {
    return new ClaimResponse_Insurance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Insurance {
    return new ClaimResponse_Insurance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Insurance {
    return new ClaimResponse_Insurance().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Insurance | PlainMessage<ClaimResponse_Insurance> | undefined, b: ClaimResponse_Insurance | PlainMessage<ClaimResponse_Insurance> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Insurance, a, b);
  }
}

/**
 * Processing errors
 *
 * @generated from message google.fhir.r4.core.ClaimResponse.Error
 */
export class ClaimResponse_Error extends Message<ClaimResponse_Error> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Item sequence number
   *
   * @generated from field: google.fhir.r4.core.PositiveInt item_sequence = 4;
   */
  itemSequence?: PositiveInt;

  /**
   * Detail sequence number
   *
   * @generated from field: google.fhir.r4.core.PositiveInt detail_sequence = 5;
   */
  detailSequence?: PositiveInt;

  /**
   * Subdetail sequence number
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sub_detail_sequence = 6;
   */
  subDetailSequence?: PositiveInt;

  /**
   * Error code detailing processing issues
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 7;
   */
  code?: CodeableConcept;

  constructor(data?: PartialMessage<ClaimResponse_Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClaimResponse.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "item_sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "detail_sequence", kind: "message", T: PositiveInt },
    { no: 6, name: "sub_detail_sequence", kind: "message", T: PositiveInt },
    { no: 7, name: "code", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimResponse_Error {
    return new ClaimResponse_Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimResponse_Error {
    return new ClaimResponse_Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimResponse_Error {
    return new ClaimResponse_Error().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimResponse_Error | PlainMessage<ClaimResponse_Error> | undefined, b: ClaimResponse_Error | PlainMessage<ClaimResponse_Error> | undefined): boolean {
    return proto3.util.equals(ClaimResponse_Error, a, b);
  }
}

