//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/specimen.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, DateTime, Duration, Extension, Id, Identifier, Meta, Narrative, Period, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { SpecimenStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Specimen.
 * Sample for analysis.
 * See http://hl7.org/fhir/StructureDefinition/Specimen
 *
 * @generated from message google.fhir.r4.core.Specimen
 */
export class Specimen extends Message<Specimen> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External Identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Identifier assigned by the lab
   *
   * @generated from field: google.fhir.r4.core.Identifier accession_identifier = 11;
   */
  accessionIdentifier?: Identifier;

  /**
   * @generated from field: google.fhir.r4.core.Specimen.StatusCode status = 12;
   */
  status?: Specimen_StatusCode;

  /**
   * Kind of material that forms the specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 13;
   */
  type?: CodeableConcept;

  /**
   * Where the specimen came from. This may be from patient(s), from a location
   * (e.g., the source of an environmental sample), or a sampling of a substance
   * or a device
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 14;
   */
  subject?: Reference;

  /**
   * The time when specimen was received for processing
   *
   * @generated from field: google.fhir.r4.core.DateTime received_time = 15;
   */
  receivedTime?: DateTime;

  /**
   * Specimen from which this specimen originated
   *
   * @generated from field: repeated google.fhir.r4.core.Reference parent = 16;
   */
  parent: Reference[] = [];

  /**
   * Why the specimen was collected
   *
   * @generated from field: repeated google.fhir.r4.core.Reference request = 17;
   */
  request: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Specimen.Collection collection = 18;
   */
  collection?: Specimen_Collection;

  /**
   * @generated from field: repeated google.fhir.r4.core.Specimen.Processing processing = 19;
   */
  processing: Specimen_Processing[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Specimen.Container container = 20;
   */
  container: Specimen_Container[] = [];

  /**
   * State of the specimen
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept condition = 21;
   */
  condition: CodeableConcept[] = [];

  /**
   * Comments
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 22;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<Specimen>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "accession_identifier", kind: "message", T: Identifier },
    { no: 12, name: "status", kind: "message", T: Specimen_StatusCode },
    { no: 13, name: "type", kind: "message", T: CodeableConcept },
    { no: 14, name: "subject", kind: "message", T: Reference },
    { no: 15, name: "received_time", kind: "message", T: DateTime },
    { no: 16, name: "parent", kind: "message", T: Reference, repeated: true },
    { no: 17, name: "request", kind: "message", T: Reference, repeated: true },
    { no: 18, name: "collection", kind: "message", T: Specimen_Collection },
    { no: 19, name: "processing", kind: "message", T: Specimen_Processing, repeated: true },
    { no: 20, name: "container", kind: "message", T: Specimen_Container, repeated: true },
    { no: 21, name: "condition", kind: "message", T: CodeableConcept, repeated: true },
    { no: 22, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen {
    return new Specimen().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen {
    return new Specimen().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen {
    return new Specimen().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen | PlainMessage<Specimen> | undefined, b: Specimen | PlainMessage<Specimen> | undefined): boolean {
    return proto3.util.equals(Specimen, a, b);
  }
}

/**
 * available | unavailable | unsatisfactory | entered-in-error
 *
 * @generated from message google.fhir.r4.core.Specimen.StatusCode
 */
export class Specimen_StatusCode extends Message<Specimen_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.SpecimenStatusCode.Value value = 1;
   */
  value = SpecimenStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Specimen_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(SpecimenStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_StatusCode {
    return new Specimen_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_StatusCode {
    return new Specimen_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_StatusCode {
    return new Specimen_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_StatusCode | PlainMessage<Specimen_StatusCode> | undefined, b: Specimen_StatusCode | PlainMessage<Specimen_StatusCode> | undefined): boolean {
    return proto3.util.equals(Specimen_StatusCode, a, b);
  }
}

/**
 * Collection details
 *
 * @generated from message google.fhir.r4.core.Specimen.Collection
 */
export class Specimen_Collection extends Message<Specimen_Collection> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Who collected the specimen
   *
   * @generated from field: google.fhir.r4.core.Reference collector = 4;
   */
  collector?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Specimen.Collection.CollectedX collected = 5;
   */
  collected?: Specimen_Collection_CollectedX;

  /**
   * How long it took to collect specimen
   *
   * @generated from field: google.fhir.r4.core.Duration duration = 6;
   */
  duration?: Duration;

  /**
   * The quantity of specimen collected
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 7;
   */
  quantity?: SimpleQuantity;

  /**
   * Technique used to perform collection
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 8;
   */
  method?: CodeableConcept;

  /**
   * Anatomical collection site
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept body_site = 9;
   */
  bodySite?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Specimen.Collection.FastingStatusX fasting_status = 10;
   */
  fastingStatus?: Specimen_Collection_FastingStatusX;

  constructor(data?: PartialMessage<Specimen_Collection>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Collection";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "collector", kind: "message", T: Reference },
    { no: 5, name: "collected", kind: "message", T: Specimen_Collection_CollectedX },
    { no: 6, name: "duration", kind: "message", T: Duration },
    { no: 7, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 8, name: "method", kind: "message", T: CodeableConcept },
    { no: 9, name: "body_site", kind: "message", T: CodeableConcept },
    { no: 10, name: "fasting_status", kind: "message", T: Specimen_Collection_FastingStatusX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Collection {
    return new Specimen_Collection().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Collection {
    return new Specimen_Collection().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Collection {
    return new Specimen_Collection().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Collection | PlainMessage<Specimen_Collection> | undefined, b: Specimen_Collection | PlainMessage<Specimen_Collection> | undefined): boolean {
    return proto3.util.equals(Specimen_Collection, a, b);
  }
}

/**
 * Collection time
 *
 * @generated from message google.fhir.r4.core.Specimen.Collection.CollectedX
 */
export class Specimen_Collection_CollectedX extends Message<Specimen_Collection_CollectedX> {
  /**
   * @generated from oneof google.fhir.r4.core.Specimen.Collection.CollectedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Specimen_Collection_CollectedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Collection.CollectedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Collection_CollectedX {
    return new Specimen_Collection_CollectedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Collection_CollectedX {
    return new Specimen_Collection_CollectedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Collection_CollectedX {
    return new Specimen_Collection_CollectedX().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Collection_CollectedX | PlainMessage<Specimen_Collection_CollectedX> | undefined, b: Specimen_Collection_CollectedX | PlainMessage<Specimen_Collection_CollectedX> | undefined): boolean {
    return proto3.util.equals(Specimen_Collection_CollectedX, a, b);
  }
}

/**
 * Whether or how long patient abstained from food and/or drink
 *
 * @generated from message google.fhir.r4.core.Specimen.Collection.FastingStatusX
 */
export class Specimen_Collection_FastingStatusX extends Message<Specimen_Collection_FastingStatusX> {
  /**
   * @generated from oneof google.fhir.r4.core.Specimen.Collection.FastingStatusX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Duration duration = 2;
     */
    value: Duration;
    case: "duration";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Specimen_Collection_FastingStatusX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Collection.FastingStatusX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "duration", kind: "message", T: Duration, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Collection_FastingStatusX {
    return new Specimen_Collection_FastingStatusX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Collection_FastingStatusX {
    return new Specimen_Collection_FastingStatusX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Collection_FastingStatusX {
    return new Specimen_Collection_FastingStatusX().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Collection_FastingStatusX | PlainMessage<Specimen_Collection_FastingStatusX> | undefined, b: Specimen_Collection_FastingStatusX | PlainMessage<Specimen_Collection_FastingStatusX> | undefined): boolean {
    return proto3.util.equals(Specimen_Collection_FastingStatusX, a, b);
  }
}

/**
 * Processing and processing step details
 *
 * @generated from message google.fhir.r4.core.Specimen.Processing
 */
export class Specimen_Processing extends Message<Specimen_Processing> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Textual description of procedure
   *
   * @generated from field: google.fhir.r4.core.String description = 4;
   */
  description?: String;

  /**
   * Indicates the treatment step  applied to the specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept procedure = 5;
   */
  procedure?: CodeableConcept;

  /**
   * Material used in the processing step
   *
   * @generated from field: repeated google.fhir.r4.core.Reference additive = 6;
   */
  additive: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Specimen.Processing.TimeX time = 7;
   */
  time?: Specimen_Processing_TimeX;

  constructor(data?: PartialMessage<Specimen_Processing>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Processing";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "description", kind: "message", T: String },
    { no: 5, name: "procedure", kind: "message", T: CodeableConcept },
    { no: 6, name: "additive", kind: "message", T: Reference, repeated: true },
    { no: 7, name: "time", kind: "message", T: Specimen_Processing_TimeX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Processing {
    return new Specimen_Processing().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Processing {
    return new Specimen_Processing().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Processing {
    return new Specimen_Processing().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Processing | PlainMessage<Specimen_Processing> | undefined, b: Specimen_Processing | PlainMessage<Specimen_Processing> | undefined): boolean {
    return proto3.util.equals(Specimen_Processing, a, b);
  }
}

/**
 * Date and time of specimen processing
 *
 * @generated from message google.fhir.r4.core.Specimen.Processing.TimeX
 */
export class Specimen_Processing_TimeX extends Message<Specimen_Processing_TimeX> {
  /**
   * @generated from oneof google.fhir.r4.core.Specimen.Processing.TimeX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Specimen_Processing_TimeX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Processing.TimeX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Processing_TimeX {
    return new Specimen_Processing_TimeX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Processing_TimeX {
    return new Specimen_Processing_TimeX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Processing_TimeX {
    return new Specimen_Processing_TimeX().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Processing_TimeX | PlainMessage<Specimen_Processing_TimeX> | undefined, b: Specimen_Processing_TimeX | PlainMessage<Specimen_Processing_TimeX> | undefined): boolean {
    return proto3.util.equals(Specimen_Processing_TimeX, a, b);
  }
}

/**
 * Direct container of specimen (tube/slide, etc.)
 *
 * @generated from message google.fhir.r4.core.Specimen.Container
 */
export class Specimen_Container extends Message<Specimen_Container> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Id for the container
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier: Identifier[] = [];

  /**
   * Textual description of the container
   *
   * @generated from field: google.fhir.r4.core.String description = 5;
   */
  description?: String;

  /**
   * Kind of container directly associated with specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 6;
   */
  type?: CodeableConcept;

  /**
   * Container volume or size
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity capacity = 7;
   */
  capacity?: SimpleQuantity;

  /**
   * Quantity of specimen within container
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity specimen_quantity = 8;
   */
  specimenQuantity?: SimpleQuantity;

  /**
   * @generated from field: google.fhir.r4.core.Specimen.Container.AdditiveX additive = 9;
   */
  additive?: Specimen_Container_AdditiveX;

  constructor(data?: PartialMessage<Specimen_Container>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Container";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 5, name: "description", kind: "message", T: String },
    { no: 6, name: "type", kind: "message", T: CodeableConcept },
    { no: 7, name: "capacity", kind: "message", T: SimpleQuantity },
    { no: 8, name: "specimen_quantity", kind: "message", T: SimpleQuantity },
    { no: 9, name: "additive", kind: "message", T: Specimen_Container_AdditiveX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Container {
    return new Specimen_Container().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Container {
    return new Specimen_Container().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Container {
    return new Specimen_Container().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Container | PlainMessage<Specimen_Container> | undefined, b: Specimen_Container | PlainMessage<Specimen_Container> | undefined): boolean {
    return proto3.util.equals(Specimen_Container, a, b);
  }
}

/**
 * Additive associated with container
 *
 * @generated from message google.fhir.r4.core.Specimen.Container.AdditiveX
 */
export class Specimen_Container_AdditiveX extends Message<Specimen_Container_AdditiveX> {
  /**
   * @generated from oneof google.fhir.r4.core.Specimen.Container.AdditiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Specimen_Container_AdditiveX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Specimen.Container.AdditiveX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Specimen_Container_AdditiveX {
    return new Specimen_Container_AdditiveX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Specimen_Container_AdditiveX {
    return new Specimen_Container_AdditiveX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Specimen_Container_AdditiveX {
    return new Specimen_Container_AdditiveX().fromJsonString(jsonString, options);
  }

  static equals(a: Specimen_Container_AdditiveX | PlainMessage<Specimen_Container_AdditiveX> | undefined, b: Specimen_Container_AdditiveX | PlainMessage<Specimen_Container_AdditiveX> | undefined): boolean {
    return proto3.util.equals(Specimen_Container_AdditiveX, a, b);
  }
}

