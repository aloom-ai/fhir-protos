//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/organization.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Address, Boolean, Code, CodeableConcept, ContactPoint, Extension, HumanName, Id, Identifier, Meta, Narrative, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for Organization.
 * A grouping of people or organizations with a common purpose.
 * See http://hl7.org/fhir/StructureDefinition/Organization
 *
 * @generated from message google.fhir.r4.core.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifies this organization  across multiple systems
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Whether the organization's record is still in active use
   *
   * @generated from field: google.fhir.r4.core.Boolean active = 11;
   */
  active?: Boolean;

  /**
   * Kind of organization
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 12;
   */
  type: CodeableConcept[] = [];

  /**
   * Name used for the organization
   *
   * @generated from field: google.fhir.r4.core.String name = 13;
   */
  name?: String;

  /**
   * A list of alternate names that the organization is known as, or was known
   * as in the past
   *
   * @generated from field: repeated google.fhir.r4.core.String alias = 14;
   */
  alias: String[] = [];

  /**
   * A contact detail for the organization
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint telecom = 15;
   */
  telecom: ContactPoint[] = [];

  /**
   * An address for the organization
   *
   * @generated from field: repeated google.fhir.r4.core.Address address = 16;
   */
  address: Address[] = [];

  /**
   * The organization of which this organization forms a part
   *
   * @generated from field: google.fhir.r4.core.Reference part_of = 17;
   */
  partOf?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.Organization.Contact contact = 18;
   */
  contact: Organization_Contact[] = [];

  /**
   * Technical endpoints providing access to services operated for the
   * organization
   *
   * @generated from field: repeated google.fhir.r4.core.Reference endpoint = 19;
   */
  endpoint: Reference[] = [];

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "active", kind: "message", T: Boolean },
    { no: 12, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 13, name: "name", kind: "message", T: String },
    { no: 14, name: "alias", kind: "message", T: String, repeated: true },
    { no: 15, name: "telecom", kind: "message", T: ContactPoint, repeated: true },
    { no: 16, name: "address", kind: "message", T: Address, repeated: true },
    { no: 17, name: "part_of", kind: "message", T: Reference },
    { no: 18, name: "contact", kind: "message", T: Organization_Contact, repeated: true },
    { no: 19, name: "endpoint", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * Contact for the organization for a certain purpose
 *
 * @generated from message google.fhir.r4.core.Organization.Contact
 */
export class Organization_Contact extends Message<Organization_Contact> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of contact
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept purpose = 4;
   */
  purpose?: CodeableConcept;

  /**
   * A name associated with the contact
   *
   * @generated from field: google.fhir.r4.core.HumanName name = 5;
   */
  name?: HumanName;

  /**
   * Contact details (telephone, email, etc.)  for a contact
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint telecom = 6;
   */
  telecom: ContactPoint[] = [];

  /**
   * Visiting or postal addresses for the contact
   *
   * @generated from field: google.fhir.r4.core.Address address = 7;
   */
  address?: Address;

  constructor(data?: PartialMessage<Organization_Contact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Organization.Contact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "purpose", kind: "message", T: CodeableConcept },
    { no: 5, name: "name", kind: "message", T: HumanName },
    { no: 6, name: "telecom", kind: "message", T: ContactPoint, repeated: true },
    { no: 7, name: "address", kind: "message", T: Address },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization_Contact {
    return new Organization_Contact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization_Contact {
    return new Organization_Contact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization_Contact {
    return new Organization_Contact().fromJsonString(jsonString, options);
  }

  static equals(a: Organization_Contact | PlainMessage<Organization_Contact> | undefined, b: Organization_Contact | PlainMessage<Organization_Contact> | undefined): boolean {
    return proto3.util.equals(Organization_Contact, a, b);
  }
}

