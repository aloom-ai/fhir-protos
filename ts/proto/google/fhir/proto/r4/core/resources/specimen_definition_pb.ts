//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/specimen_definition.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, Duration, Extension, Id, Identifier, Meta, Narrative, Range, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { SpecimenContainedPreferenceCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for SpecimenDefinition.
 * Kind of specimen.
 * See http://hl7.org/fhir/StructureDefinition/SpecimenDefinition
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition
 */
export class SpecimenDefinition extends Message<SpecimenDefinition> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier of a kind of specimen
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier?: Identifier;

  /**
   * Kind of material to collect
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type_collected = 11;
   */
  typeCollected?: CodeableConcept;

  /**
   * Patient preparation for collection
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept patient_preparation = 12;
   */
  patientPreparation: CodeableConcept[] = [];

  /**
   * Time aspect for collection
   *
   * @generated from field: google.fhir.r4.core.String time_aspect = 13;
   */
  timeAspect?: String;

  /**
   * Specimen collection procedure
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept collection = 14;
   */
  collection: CodeableConcept[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SpecimenDefinition.TypeTested type_tested = 15;
   */
  typeTested: SpecimenDefinition_TypeTested[] = [];

  constructor(data?: PartialMessage<SpecimenDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier },
    { no: 11, name: "type_collected", kind: "message", T: CodeableConcept },
    { no: 12, name: "patient_preparation", kind: "message", T: CodeableConcept, repeated: true },
    { no: 13, name: "time_aspect", kind: "message", T: String },
    { no: 14, name: "collection", kind: "message", T: CodeableConcept, repeated: true },
    { no: 15, name: "type_tested", kind: "message", T: SpecimenDefinition_TypeTested, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition {
    return new SpecimenDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition {
    return new SpecimenDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition {
    return new SpecimenDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition | PlainMessage<SpecimenDefinition> | undefined, b: SpecimenDefinition | PlainMessage<SpecimenDefinition> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition, a, b);
  }
}

/**
 * Specimen in container intended for testing by lab
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested
 */
export class SpecimenDefinition_TypeTested extends Message<SpecimenDefinition_TypeTested> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Primary or secondary specimen
   *
   * @generated from field: google.fhir.r4.core.Boolean is_derived = 4;
   */
  isDerived?: Boolean;

  /**
   * Type of intended specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode preference = 6;
   */
  preference?: SpecimenDefinition_TypeTested_PreferenceCode;

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container container = 7;
   */
  container?: SpecimenDefinition_TypeTested_Container;

  /**
   * Specimen requirements
   *
   * @generated from field: google.fhir.r4.core.String requirement = 8;
   */
  requirement?: String;

  /**
   * Specimen retention time
   *
   * @generated from field: google.fhir.r4.core.Duration retention_time = 9;
   */
  retentionTime?: Duration;

  /**
   * Rejection criterion
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept rejection_criterion = 10;
   */
  rejectionCriterion: CodeableConcept[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling handling = 11;
   */
  handling: SpecimenDefinition_TypeTested_Handling[] = [];

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "is_derived", kind: "message", T: Boolean },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "preference", kind: "message", T: SpecimenDefinition_TypeTested_PreferenceCode },
    { no: 7, name: "container", kind: "message", T: SpecimenDefinition_TypeTested_Container },
    { no: 8, name: "requirement", kind: "message", T: String },
    { no: 9, name: "retention_time", kind: "message", T: Duration },
    { no: 10, name: "rejection_criterion", kind: "message", T: CodeableConcept, repeated: true },
    { no: 11, name: "handling", kind: "message", T: SpecimenDefinition_TypeTested_Handling, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested {
    return new SpecimenDefinition_TypeTested().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested {
    return new SpecimenDefinition_TypeTested().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested {
    return new SpecimenDefinition_TypeTested().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested | PlainMessage<SpecimenDefinition_TypeTested> | undefined, b: SpecimenDefinition_TypeTested | PlainMessage<SpecimenDefinition_TypeTested> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested, a, b);
  }
}

/**
 * preferred | alternate
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode
 */
export class SpecimenDefinition_TypeTested_PreferenceCode extends Message<SpecimenDefinition_TypeTested_PreferenceCode> {
  /**
   * @generated from field: google.fhir.r4.core.SpecimenContainedPreferenceCode.Value value = 1;
   */
  value = SpecimenContainedPreferenceCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested_PreferenceCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested.PreferenceCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(SpecimenContainedPreferenceCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested_PreferenceCode {
    return new SpecimenDefinition_TypeTested_PreferenceCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_PreferenceCode {
    return new SpecimenDefinition_TypeTested_PreferenceCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_PreferenceCode {
    return new SpecimenDefinition_TypeTested_PreferenceCode().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested_PreferenceCode | PlainMessage<SpecimenDefinition_TypeTested_PreferenceCode> | undefined, b: SpecimenDefinition_TypeTested_PreferenceCode | PlainMessage<SpecimenDefinition_TypeTested_PreferenceCode> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested_PreferenceCode, a, b);
  }
}

/**
 * The specimen's container
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container
 */
export class SpecimenDefinition_TypeTested_Container extends Message<SpecimenDefinition_TypeTested_Container> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Container material
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept material = 4;
   */
  material?: CodeableConcept;

  /**
   * Kind of container associated with the kind of specimen
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Color of container cap
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept cap = 6;
   */
  cap?: CodeableConcept;

  /**
   * Container description
   *
   * @generated from field: google.fhir.r4.core.String description = 7;
   */
  description?: String;

  /**
   * Container capacity
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity capacity = 8;
   */
  capacity?: SimpleQuantity;

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX minimum_volume = 9;
   */
  minimumVolume?: SpecimenDefinition_TypeTested_Container_MinimumVolumeX;

  /**
   * @generated from field: repeated google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive additive = 10;
   */
  additive: SpecimenDefinition_TypeTested_Container_Additive[] = [];

  /**
   * Specimen container preparation
   *
   * @generated from field: google.fhir.r4.core.String preparation = 11;
   */
  preparation?: String;

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested_Container>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested.Container";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "material", kind: "message", T: CodeableConcept },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "cap", kind: "message", T: CodeableConcept },
    { no: 7, name: "description", kind: "message", T: String },
    { no: 8, name: "capacity", kind: "message", T: SimpleQuantity },
    { no: 9, name: "minimum_volume", kind: "message", T: SpecimenDefinition_TypeTested_Container_MinimumVolumeX },
    { no: 10, name: "additive", kind: "message", T: SpecimenDefinition_TypeTested_Container_Additive, repeated: true },
    { no: 11, name: "preparation", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested_Container {
    return new SpecimenDefinition_TypeTested_Container().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container {
    return new SpecimenDefinition_TypeTested_Container().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container {
    return new SpecimenDefinition_TypeTested_Container().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested_Container | PlainMessage<SpecimenDefinition_TypeTested_Container> | undefined, b: SpecimenDefinition_TypeTested_Container | PlainMessage<SpecimenDefinition_TypeTested_Container> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested_Container, a, b);
  }
}

/**
 * Minimum volume
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX
 */
export class SpecimenDefinition_TypeTested_Container_MinimumVolumeX extends Message<SpecimenDefinition_TypeTested_Container_MinimumVolumeX> {
  /**
   * @generated from oneof google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 1;
     */
    value: SimpleQuantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested_Container_MinimumVolumeX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.MinimumVolumeX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: SimpleQuantity, oneof: "choice" },
    { no: 2, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested_Container_MinimumVolumeX {
    return new SpecimenDefinition_TypeTested_Container_MinimumVolumeX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container_MinimumVolumeX {
    return new SpecimenDefinition_TypeTested_Container_MinimumVolumeX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container_MinimumVolumeX {
    return new SpecimenDefinition_TypeTested_Container_MinimumVolumeX().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested_Container_MinimumVolumeX | PlainMessage<SpecimenDefinition_TypeTested_Container_MinimumVolumeX> | undefined, b: SpecimenDefinition_TypeTested_Container_MinimumVolumeX | PlainMessage<SpecimenDefinition_TypeTested_Container_MinimumVolumeX> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested_Container_MinimumVolumeX, a, b);
  }
}

/**
 * Additive associated with container
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive
 */
export class SpecimenDefinition_TypeTested_Container_Additive extends Message<SpecimenDefinition_TypeTested_Container_Additive> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX additive = 4;
   */
  additive?: SpecimenDefinition_TypeTested_Container_Additive_AdditiveX;

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested_Container_Additive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "additive", kind: "message", T: SpecimenDefinition_TypeTested_Container_Additive_AdditiveX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested_Container_Additive {
    return new SpecimenDefinition_TypeTested_Container_Additive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container_Additive {
    return new SpecimenDefinition_TypeTested_Container_Additive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container_Additive {
    return new SpecimenDefinition_TypeTested_Container_Additive().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested_Container_Additive | PlainMessage<SpecimenDefinition_TypeTested_Container_Additive> | undefined, b: SpecimenDefinition_TypeTested_Container_Additive | PlainMessage<SpecimenDefinition_TypeTested_Container_Additive> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested_Container_Additive, a, b);
  }
}

/**
 * Additive associated with container
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX
 */
export class SpecimenDefinition_TypeTested_Container_Additive_AdditiveX extends Message<SpecimenDefinition_TypeTested_Container_Additive_AdditiveX> {
  /**
   * @generated from oneof google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested_Container_Additive_AdditiveX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested.Container.Additive.AdditiveX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested_Container_Additive_AdditiveX {
    return new SpecimenDefinition_TypeTested_Container_Additive_AdditiveX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container_Additive_AdditiveX {
    return new SpecimenDefinition_TypeTested_Container_Additive_AdditiveX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Container_Additive_AdditiveX {
    return new SpecimenDefinition_TypeTested_Container_Additive_AdditiveX().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested_Container_Additive_AdditiveX | PlainMessage<SpecimenDefinition_TypeTested_Container_Additive_AdditiveX> | undefined, b: SpecimenDefinition_TypeTested_Container_Additive_AdditiveX | PlainMessage<SpecimenDefinition_TypeTested_Container_Additive_AdditiveX> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested_Container_Additive_AdditiveX, a, b);
  }
}

/**
 * Specimen handling before testing
 *
 * @generated from message google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling
 */
export class SpecimenDefinition_TypeTested_Handling extends Message<SpecimenDefinition_TypeTested_Handling> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Temperature qualifier
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept temperature_qualifier = 4;
   */
  temperatureQualifier?: CodeableConcept;

  /**
   * Temperature range
   *
   * @generated from field: google.fhir.r4.core.Range temperature_range = 5;
   */
  temperatureRange?: Range;

  /**
   * Maximum preservation time
   *
   * @generated from field: google.fhir.r4.core.Duration max_duration = 6;
   */
  maxDuration?: Duration;

  /**
   * Preservation instruction
   *
   * @generated from field: google.fhir.r4.core.String instruction = 7;
   */
  instruction?: String;

  constructor(data?: PartialMessage<SpecimenDefinition_TypeTested_Handling>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SpecimenDefinition.TypeTested.Handling";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "temperature_qualifier", kind: "message", T: CodeableConcept },
    { no: 5, name: "temperature_range", kind: "message", T: Range },
    { no: 6, name: "max_duration", kind: "message", T: Duration },
    { no: 7, name: "instruction", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SpecimenDefinition_TypeTested_Handling {
    return new SpecimenDefinition_TypeTested_Handling().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Handling {
    return new SpecimenDefinition_TypeTested_Handling().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SpecimenDefinition_TypeTested_Handling {
    return new SpecimenDefinition_TypeTested_Handling().fromJsonString(jsonString, options);
  }

  static equals(a: SpecimenDefinition_TypeTested_Handling | PlainMessage<SpecimenDefinition_TypeTested_Handling> | undefined, b: SpecimenDefinition_TypeTested_Handling | PlainMessage<SpecimenDefinition_TypeTested_Handling> | undefined): boolean {
    return proto3.util.equals(SpecimenDefinition_TypeTested_Handling, a, b);
  }
}

