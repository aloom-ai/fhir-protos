//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/provenance.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, DateTime, Extension, Id, Instant, Meta, Narrative, Period, Reference, Signature, String, Uri } from "../datatypes_pb.js";
import { ProvenanceEntityRoleCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Provenance.
 * Who, What, When for a set of resources.
 * See http://hl7.org/fhir/StructureDefinition/Provenance
 *
 * @generated from message google.fhir.r4.core.Provenance
 */
export class Provenance extends Message<Provenance> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Target Reference(s) (usually version specific)
   *
   * @generated from field: repeated google.fhir.r4.core.Reference target = 10;
   */
  target: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Provenance.OccurredX occurred = 11;
   */
  occurred?: Provenance_OccurredX;

  /**
   * When the activity was recorded / updated
   *
   * @generated from field: google.fhir.r4.core.Instant recorded = 12;
   */
  recorded?: Instant;

  /**
   * Policy or plan the activity was defined by
   *
   * @generated from field: repeated google.fhir.r4.core.Uri policy = 13;
   */
  policy: Uri[] = [];

  /**
   * Where the activity occurred, if relevant
   *
   * @generated from field: google.fhir.r4.core.Reference location = 14;
   */
  location?: Reference;

  /**
   * Reason the activity is occurring
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason = 15;
   */
  reason: CodeableConcept[] = [];

  /**
   * Activity that occurred
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept activity = 16;
   */
  activity?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.Provenance.Agent agent = 17;
   */
  agent: Provenance_Agent[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Provenance.Entity entity = 18;
   */
  entity: Provenance_Entity[] = [];

  /**
   * Signature on target
   *
   * @generated from field: repeated google.fhir.r4.core.Signature signature = 19;
   */
  signature: Signature[] = [];

  constructor(data?: PartialMessage<Provenance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Provenance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "target", kind: "message", T: Reference, repeated: true },
    { no: 11, name: "occurred", kind: "message", T: Provenance_OccurredX },
    { no: 12, name: "recorded", kind: "message", T: Instant },
    { no: 13, name: "policy", kind: "message", T: Uri, repeated: true },
    { no: 14, name: "location", kind: "message", T: Reference },
    { no: 15, name: "reason", kind: "message", T: CodeableConcept, repeated: true },
    { no: 16, name: "activity", kind: "message", T: CodeableConcept },
    { no: 17, name: "agent", kind: "message", T: Provenance_Agent, repeated: true },
    { no: 18, name: "entity", kind: "message", T: Provenance_Entity, repeated: true },
    { no: 19, name: "signature", kind: "message", T: Signature, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provenance {
    return new Provenance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provenance {
    return new Provenance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provenance {
    return new Provenance().fromJsonString(jsonString, options);
  }

  static equals(a: Provenance | PlainMessage<Provenance> | undefined, b: Provenance | PlainMessage<Provenance> | undefined): boolean {
    return proto3.util.equals(Provenance, a, b);
  }
}

/**
 * When the activity occurred
 *
 * @generated from message google.fhir.r4.core.Provenance.OccurredX
 */
export class Provenance_OccurredX extends Message<Provenance_OccurredX> {
  /**
   * @generated from oneof google.fhir.r4.core.Provenance.OccurredX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 1;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 2;
     */
    value: DateTime;
    case: "dateTime";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Provenance_OccurredX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Provenance.OccurredX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 2, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provenance_OccurredX {
    return new Provenance_OccurredX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provenance_OccurredX {
    return new Provenance_OccurredX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provenance_OccurredX {
    return new Provenance_OccurredX().fromJsonString(jsonString, options);
  }

  static equals(a: Provenance_OccurredX | PlainMessage<Provenance_OccurredX> | undefined, b: Provenance_OccurredX | PlainMessage<Provenance_OccurredX> | undefined): boolean {
    return proto3.util.equals(Provenance_OccurredX, a, b);
  }
}

/**
 * Actor involved
 *
 * @generated from message google.fhir.r4.core.Provenance.Agent
 */
export class Provenance_Agent extends Message<Provenance_Agent> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * How the agent participated
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * What the agents role was
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept role = 5;
   */
  role: CodeableConcept[] = [];

  /**
   * Who participated
   *
   * @generated from field: google.fhir.r4.core.Reference who = 6;
   */
  who?: Reference;

  /**
   * Who the agent is representing
   *
   * @generated from field: google.fhir.r4.core.Reference on_behalf_of = 7;
   */
  onBehalfOf?: Reference;

  constructor(data?: PartialMessage<Provenance_Agent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Provenance.Agent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "role", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "who", kind: "message", T: Reference },
    { no: 7, name: "on_behalf_of", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provenance_Agent {
    return new Provenance_Agent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provenance_Agent {
    return new Provenance_Agent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provenance_Agent {
    return new Provenance_Agent().fromJsonString(jsonString, options);
  }

  static equals(a: Provenance_Agent | PlainMessage<Provenance_Agent> | undefined, b: Provenance_Agent | PlainMessage<Provenance_Agent> | undefined): boolean {
    return proto3.util.equals(Provenance_Agent, a, b);
  }
}

/**
 * An entity used in this activity
 *
 * @generated from message google.fhir.r4.core.Provenance.Entity
 */
export class Provenance_Entity extends Message<Provenance_Entity> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Provenance.Entity.RoleCode role = 4;
   */
  role?: Provenance_Entity_RoleCode;

  /**
   * Identity of entity
   *
   * @generated from field: google.fhir.r4.core.Reference what = 5;
   */
  what?: Reference;

  /**
   * Entity is attributed to this agent
   *
   * @generated from field: repeated google.fhir.r4.core.Provenance.Agent agent = 6;
   */
  agent: Provenance_Agent[] = [];

  constructor(data?: PartialMessage<Provenance_Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Provenance.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "role", kind: "message", T: Provenance_Entity_RoleCode },
    { no: 5, name: "what", kind: "message", T: Reference },
    { no: 6, name: "agent", kind: "message", T: Provenance_Agent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provenance_Entity {
    return new Provenance_Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provenance_Entity {
    return new Provenance_Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provenance_Entity {
    return new Provenance_Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Provenance_Entity | PlainMessage<Provenance_Entity> | undefined, b: Provenance_Entity | PlainMessage<Provenance_Entity> | undefined): boolean {
    return proto3.util.equals(Provenance_Entity, a, b);
  }
}

/**
 * derivation | revision | quotation | source | removal
 *
 * @generated from message google.fhir.r4.core.Provenance.Entity.RoleCode
 */
export class Provenance_Entity_RoleCode extends Message<Provenance_Entity_RoleCode> {
  /**
   * @generated from field: google.fhir.r4.core.ProvenanceEntityRoleCode.Value value = 1;
   */
  value = ProvenanceEntityRoleCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Provenance_Entity_RoleCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Provenance.Entity.RoleCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ProvenanceEntityRoleCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Provenance_Entity_RoleCode {
    return new Provenance_Entity_RoleCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Provenance_Entity_RoleCode {
    return new Provenance_Entity_RoleCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Provenance_Entity_RoleCode {
    return new Provenance_Entity_RoleCode().fromJsonString(jsonString, options);
  }

  static equals(a: Provenance_Entity_RoleCode | PlainMessage<Provenance_Entity_RoleCode> | undefined, b: Provenance_Entity_RoleCode | PlainMessage<Provenance_Entity_RoleCode> | undefined): boolean {
    return proto3.util.equals(Provenance_Entity_RoleCode, a, b);
  }
}

