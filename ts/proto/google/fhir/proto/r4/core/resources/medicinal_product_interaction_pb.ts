//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medicinal_product_interaction.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Extension, Id, Meta, Narrative, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicinalProductInteraction.
 * MedicinalProductInteraction.
 * See http://hl7.org/fhir/StructureDefinition/MedicinalProductInteraction
 *
 * @generated from message google.fhir.r4.core.MedicinalProductInteraction
 */
export class MedicinalProductInteraction extends Message<MedicinalProductInteraction> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * The medication for which this is a described interaction
   *
   * @generated from field: repeated google.fhir.r4.core.Reference subject = 10;
   */
  subject: Reference[] = [];

  /**
   * The interaction described
   *
   * @generated from field: google.fhir.r4.core.String description = 11;
   */
  description?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductInteraction.Interactant interactant = 12;
   */
  interactant: MedicinalProductInteraction_Interactant[] = [];

  /**
   * The type of the interaction e.g. drug-drug interaction, drug-food
   * interaction, drug-lab test interaction
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 13;
   */
  type?: CodeableConcept;

  /**
   * The effect of the interaction, for example "reduced gastric absorption of
   * primary medication"
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept effect = 14;
   */
  effect?: CodeableConcept;

  /**
   * The incidence of the interaction, e.g. theoretical, observed
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept incidence = 15;
   */
  incidence?: CodeableConcept;

  /**
   * Actions for managing the interaction
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept management = 16;
   */
  management?: CodeableConcept;

  constructor(data?: PartialMessage<MedicinalProductInteraction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductInteraction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "subject", kind: "message", T: Reference, repeated: true },
    { no: 11, name: "description", kind: "message", T: String },
    { no: 12, name: "interactant", kind: "message", T: MedicinalProductInteraction_Interactant, repeated: true },
    { no: 13, name: "type", kind: "message", T: CodeableConcept },
    { no: 14, name: "effect", kind: "message", T: CodeableConcept },
    { no: 15, name: "incidence", kind: "message", T: CodeableConcept },
    { no: 16, name: "management", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductInteraction {
    return new MedicinalProductInteraction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductInteraction {
    return new MedicinalProductInteraction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductInteraction {
    return new MedicinalProductInteraction().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductInteraction | PlainMessage<MedicinalProductInteraction> | undefined, b: MedicinalProductInteraction | PlainMessage<MedicinalProductInteraction> | undefined): boolean {
    return proto3.util.equals(MedicinalProductInteraction, a, b);
  }
}

/**
 * The specific medication, food or laboratory test that interacts
 *
 * @generated from message google.fhir.r4.core.MedicinalProductInteraction.Interactant
 */
export class MedicinalProductInteraction_Interactant extends Message<MedicinalProductInteraction_Interactant> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MedicinalProductInteraction.Interactant.ItemX item = 4;
   */
  item?: MedicinalProductInteraction_Interactant_ItemX;

  constructor(data?: PartialMessage<MedicinalProductInteraction_Interactant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductInteraction.Interactant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "item", kind: "message", T: MedicinalProductInteraction_Interactant_ItemX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductInteraction_Interactant {
    return new MedicinalProductInteraction_Interactant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductInteraction_Interactant {
    return new MedicinalProductInteraction_Interactant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductInteraction_Interactant {
    return new MedicinalProductInteraction_Interactant().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductInteraction_Interactant | PlainMessage<MedicinalProductInteraction_Interactant> | undefined, b: MedicinalProductInteraction_Interactant | PlainMessage<MedicinalProductInteraction_Interactant> | undefined): boolean {
    return proto3.util.equals(MedicinalProductInteraction_Interactant, a, b);
  }
}

/**
 * The specific medication, food or laboratory test that interacts
 *
 * @generated from message google.fhir.r4.core.MedicinalProductInteraction.Interactant.ItemX
 */
export class MedicinalProductInteraction_Interactant_ItemX extends Message<MedicinalProductInteraction_Interactant_ItemX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicinalProductInteraction.Interactant.ItemX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicinalProductInteraction_Interactant_ItemX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductInteraction.Interactant.ItemX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "choice" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductInteraction_Interactant_ItemX {
    return new MedicinalProductInteraction_Interactant_ItemX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductInteraction_Interactant_ItemX {
    return new MedicinalProductInteraction_Interactant_ItemX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductInteraction_Interactant_ItemX {
    return new MedicinalProductInteraction_Interactant_ItemX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductInteraction_Interactant_ItemX | PlainMessage<MedicinalProductInteraction_Interactant_ItemX> | undefined, b: MedicinalProductInteraction_Interactant_ItemX | PlainMessage<MedicinalProductInteraction_Interactant_ItemX> | undefined): boolean {
    return proto3.util.equals(MedicinalProductInteraction_Interactant_ItemX, a, b);
  }
}

