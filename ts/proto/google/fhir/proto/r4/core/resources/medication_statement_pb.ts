//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medication_statement.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, DateTime, Dosage, Extension, Id, Identifier, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";
import { MedicationStatementStatusCodes_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicationStatement.
 * Record of medication being taken by a patient.
 * See http://hl7.org/fhir/StructureDefinition/MedicationStatement
 *
 * @generated from message google.fhir.r4.core.MedicationStatement
 */
export class MedicationStatement extends Message<MedicationStatement> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Fulfils plan, proposal or order
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 11;
   */
  basedOn: Reference[] = [];

  /**
   * Part of referenced event
   *
   * @generated from field: repeated google.fhir.r4.core.Reference part_of = 12;
   */
  partOf: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MedicationStatement.StatusCode status = 13;
   */
  status?: MedicationStatement_StatusCode;

  /**
   * Reason for current status
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept status_reason = 14;
   */
  statusReason: CodeableConcept[] = [];

  /**
   * Type of medication usage
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 15;
   */
  category?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.MedicationStatement.MedicationX medication = 16;
   */
  medication?: MedicationStatement_MedicationX;

  /**
   * Who is/was taking  the medication
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 17;
   */
  subject?: Reference;

  /**
   * Encounter / Episode associated with MedicationStatement
   *
   * @generated from field: google.fhir.r4.core.Reference context = 18;
   */
  context?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.MedicationStatement.EffectiveX effective = 19;
   */
  effective?: MedicationStatement_EffectiveX;

  /**
   * When the statement was asserted?
   *
   * @generated from field: google.fhir.r4.core.DateTime date_asserted = 20;
   */
  dateAsserted?: DateTime;

  /**
   * Person or organization that provided the information about the taking of
   * this medication
   *
   * @generated from field: google.fhir.r4.core.Reference information_source = 21;
   */
  informationSource?: Reference;

  /**
   * Additional supporting information
   *
   * @generated from field: repeated google.fhir.r4.core.Reference derived_from = 22;
   */
  derivedFrom: Reference[] = [];

  /**
   * Reason for why the medication is being/was taken
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 23;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * Condition or observation that supports why the medication is being/was
   * taken
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reason_reference = 24;
   */
  reasonReference: Reference[] = [];

  /**
   * Further information about the statement
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 25;
   */
  note: Annotation[] = [];

  /**
   * Details of how medication is/was taken or should be taken
   *
   * @generated from field: repeated google.fhir.r4.core.Dosage dosage = 26;
   */
  dosage: Dosage[] = [];

  constructor(data?: PartialMessage<MedicationStatement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationStatement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "part_of", kind: "message", T: Reference, repeated: true },
    { no: 13, name: "status", kind: "message", T: MedicationStatement_StatusCode },
    { no: 14, name: "status_reason", kind: "message", T: CodeableConcept, repeated: true },
    { no: 15, name: "category", kind: "message", T: CodeableConcept },
    { no: 16, name: "medication", kind: "message", T: MedicationStatement_MedicationX },
    { no: 17, name: "subject", kind: "message", T: Reference },
    { no: 18, name: "context", kind: "message", T: Reference },
    { no: 19, name: "effective", kind: "message", T: MedicationStatement_EffectiveX },
    { no: 20, name: "date_asserted", kind: "message", T: DateTime },
    { no: 21, name: "information_source", kind: "message", T: Reference },
    { no: 22, name: "derived_from", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 24, name: "reason_reference", kind: "message", T: Reference, repeated: true },
    { no: 25, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 26, name: "dosage", kind: "message", T: Dosage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationStatement {
    return new MedicationStatement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationStatement {
    return new MedicationStatement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationStatement {
    return new MedicationStatement().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationStatement | PlainMessage<MedicationStatement> | undefined, b: MedicationStatement | PlainMessage<MedicationStatement> | undefined): boolean {
    return proto3.util.equals(MedicationStatement, a, b);
  }
}

/**
 * active | completed | entered-in-error | intended | stopped | on-hold |
 * unknown | not-taken
 *
 * @generated from message google.fhir.r4.core.MedicationStatement.StatusCode
 */
export class MedicationStatement_StatusCode extends Message<MedicationStatement_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.MedicationStatementStatusCodes.Value value = 1;
   */
  value = MedicationStatementStatusCodes_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MedicationStatement_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationStatement.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(MedicationStatementStatusCodes_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationStatement_StatusCode {
    return new MedicationStatement_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationStatement_StatusCode {
    return new MedicationStatement_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationStatement_StatusCode {
    return new MedicationStatement_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationStatement_StatusCode | PlainMessage<MedicationStatement_StatusCode> | undefined, b: MedicationStatement_StatusCode | PlainMessage<MedicationStatement_StatusCode> | undefined): boolean {
    return proto3.util.equals(MedicationStatement_StatusCode, a, b);
  }
}

/**
 * What medication was taken
 *
 * @generated from message google.fhir.r4.core.MedicationStatement.MedicationX
 */
export class MedicationStatement_MedicationX extends Message<MedicationStatement_MedicationX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicationStatement.MedicationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicationStatement_MedicationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationStatement.MedicationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationStatement_MedicationX {
    return new MedicationStatement_MedicationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationStatement_MedicationX {
    return new MedicationStatement_MedicationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationStatement_MedicationX {
    return new MedicationStatement_MedicationX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationStatement_MedicationX | PlainMessage<MedicationStatement_MedicationX> | undefined, b: MedicationStatement_MedicationX | PlainMessage<MedicationStatement_MedicationX> | undefined): boolean {
    return proto3.util.equals(MedicationStatement_MedicationX, a, b);
  }
}

/**
 * The date/time or interval when the medication is/was/will be taken
 *
 * @generated from message google.fhir.r4.core.MedicationStatement.EffectiveX
 */
export class MedicationStatement_EffectiveX extends Message<MedicationStatement_EffectiveX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicationStatement.EffectiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicationStatement_EffectiveX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationStatement.EffectiveX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationStatement_EffectiveX {
    return new MedicationStatement_EffectiveX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationStatement_EffectiveX {
    return new MedicationStatement_EffectiveX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationStatement_EffectiveX {
    return new MedicationStatement_EffectiveX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationStatement_EffectiveX | PlainMessage<MedicationStatement_EffectiveX> | undefined, b: MedicationStatement_EffectiveX | PlainMessage<MedicationStatement_EffectiveX> | undefined): boolean {
    return proto3.util.equals(MedicationStatement_EffectiveX, a, b);
  }
}

