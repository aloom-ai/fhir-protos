//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/subscription.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, ContactPoint, Extension, Id, Instant, Meta, Narrative, String, Uri, Url } from "../datatypes_pb.js";
import { SubscriptionChannelTypeCode_Value, SubscriptionStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Subscription.
 * Server push subscription criteria.
 * See http://hl7.org/fhir/StructureDefinition/Subscription
 *
 * @generated from message google.fhir.r4.core.Subscription
 */
export class Subscription extends Message<Subscription> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Subscription.StatusCode status = 10;
   */
  status?: Subscription_StatusCode;

  /**
   * Contact details for source (e.g. troubleshooting)
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint contact = 11;
   */
  contact: ContactPoint[] = [];

  /**
   * When to automatically delete the subscription
   *
   * @generated from field: google.fhir.r4.core.Instant end = 12;
   */
  end?: Instant;

  /**
   * Description of why this subscription was created
   *
   * @generated from field: google.fhir.r4.core.String reason = 13;
   */
  reason?: String;

  /**
   * Rule for server push
   *
   * @generated from field: google.fhir.r4.core.String criteria = 14;
   */
  criteria?: String;

  /**
   * Latest error note
   *
   * @generated from field: google.fhir.r4.core.String error = 15;
   */
  error?: String;

  /**
   * @generated from field: google.fhir.r4.core.Subscription.Channel channel = 16;
   */
  channel?: Subscription_Channel;

  constructor(data?: PartialMessage<Subscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Subscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "status", kind: "message", T: Subscription_StatusCode },
    { no: 11, name: "contact", kind: "message", T: ContactPoint, repeated: true },
    { no: 12, name: "end", kind: "message", T: Instant },
    { no: 13, name: "reason", kind: "message", T: String },
    { no: 14, name: "criteria", kind: "message", T: String },
    { no: 15, name: "error", kind: "message", T: String },
    { no: 16, name: "channel", kind: "message", T: Subscription_Channel },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription {
    return new Subscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription {
    return new Subscription().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription | PlainMessage<Subscription> | undefined, b: Subscription | PlainMessage<Subscription> | undefined): boolean {
    return proto3.util.equals(Subscription, a, b);
  }
}

/**
 * requested | active | error | off
 *
 * @generated from message google.fhir.r4.core.Subscription.StatusCode
 */
export class Subscription_StatusCode extends Message<Subscription_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.SubscriptionStatusCode.Value value = 1;
   */
  value = SubscriptionStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Subscription_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Subscription.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(SubscriptionStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription_StatusCode {
    return new Subscription_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription_StatusCode {
    return new Subscription_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription_StatusCode {
    return new Subscription_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription_StatusCode | PlainMessage<Subscription_StatusCode> | undefined, b: Subscription_StatusCode | PlainMessage<Subscription_StatusCode> | undefined): boolean {
    return proto3.util.equals(Subscription_StatusCode, a, b);
  }
}

/**
 * The channel on which to report matches to the criteria
 *
 * @generated from message google.fhir.r4.core.Subscription.Channel
 */
export class Subscription_Channel extends Message<Subscription_Channel> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Subscription.Channel.TypeCode type = 4;
   */
  type?: Subscription_Channel_TypeCode;

  /**
   * Where the channel points to
   *
   * @generated from field: google.fhir.r4.core.Url endpoint = 5;
   */
  endpoint?: Url;

  /**
   * @generated from field: google.fhir.r4.core.Subscription.Channel.PayloadCode payload = 6;
   */
  payload?: Subscription_Channel_PayloadCode;

  /**
   * Usage depends on the channel type
   *
   * @generated from field: repeated google.fhir.r4.core.String header = 7;
   */
  header: String[] = [];

  constructor(data?: PartialMessage<Subscription_Channel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Subscription.Channel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: Subscription_Channel_TypeCode },
    { no: 5, name: "endpoint", kind: "message", T: Url },
    { no: 6, name: "payload", kind: "message", T: Subscription_Channel_PayloadCode },
    { no: 7, name: "header", kind: "message", T: String, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription_Channel {
    return new Subscription_Channel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription_Channel {
    return new Subscription_Channel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription_Channel {
    return new Subscription_Channel().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription_Channel | PlainMessage<Subscription_Channel> | undefined, b: Subscription_Channel | PlainMessage<Subscription_Channel> | undefined): boolean {
    return proto3.util.equals(Subscription_Channel, a, b);
  }
}

/**
 * rest-hook | websocket | email | sms | message
 *
 * @generated from message google.fhir.r4.core.Subscription.Channel.TypeCode
 */
export class Subscription_Channel_TypeCode extends Message<Subscription_Channel_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.SubscriptionChannelTypeCode.Value value = 1;
   */
  value = SubscriptionChannelTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Subscription_Channel_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Subscription.Channel.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(SubscriptionChannelTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription_Channel_TypeCode {
    return new Subscription_Channel_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription_Channel_TypeCode {
    return new Subscription_Channel_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription_Channel_TypeCode {
    return new Subscription_Channel_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription_Channel_TypeCode | PlainMessage<Subscription_Channel_TypeCode> | undefined, b: Subscription_Channel_TypeCode | PlainMessage<Subscription_Channel_TypeCode> | undefined): boolean {
    return proto3.util.equals(Subscription_Channel_TypeCode, a, b);
  }
}

/**
 * MIME type to send, or omit for no payload
 *
 * @generated from message google.fhir.r4.core.Subscription.Channel.PayloadCode
 */
export class Subscription_Channel_PayloadCode extends Message<Subscription_Channel_PayloadCode> {
  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  /**
   * This valueset is not enumerable, and so is represented as a string.
   *
   * @generated from field: string value = 4;
   */
  value = "";

  constructor(data?: PartialMessage<Subscription_Channel_PayloadCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Subscription.Channel.PayloadCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Subscription_Channel_PayloadCode {
    return new Subscription_Channel_PayloadCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Subscription_Channel_PayloadCode {
    return new Subscription_Channel_PayloadCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Subscription_Channel_PayloadCode {
    return new Subscription_Channel_PayloadCode().fromJsonString(jsonString, options);
  }

  static equals(a: Subscription_Channel_PayloadCode | PlainMessage<Subscription_Channel_PayloadCode> | undefined, b: Subscription_Channel_PayloadCode | PlainMessage<Subscription_Channel_PayloadCode> | undefined): boolean {
    return proto3.util.equals(Subscription_Channel_PayloadCode, a, b);
  }
}

