//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/practitioner.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Address, Attachment, Boolean, Code, CodeableConcept, ContactPoint, Date, Extension, HumanName, Id, Identifier, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";
import { AdministrativeGenderCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Practitioner.
 * A person with a  formal responsibility in the provisioning of healthcare or
 * related services. See http://hl7.org/fhir/StructureDefinition/Practitioner
 *
 * @generated from message google.fhir.r4.core.Practitioner
 */
export class Practitioner extends Message<Practitioner> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * An identifier for the person as this agent
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Whether this practitioner's record is in active use
   *
   * @generated from field: google.fhir.r4.core.Boolean active = 11;
   */
  active?: Boolean;

  /**
   * The name(s) associated with the practitioner
   *
   * @generated from field: repeated google.fhir.r4.core.HumanName name = 12;
   */
  name: HumanName[] = [];

  /**
   * A contact detail for the practitioner (that apply to all roles)
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint telecom = 13;
   */
  telecom: ContactPoint[] = [];

  /**
   * Address(es) of the practitioner that are not role specific (typically home
   * address)
   *
   * @generated from field: repeated google.fhir.r4.core.Address address = 14;
   */
  address: Address[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Practitioner.GenderCode gender = 15;
   */
  gender?: Practitioner_GenderCode;

  /**
   * The date  on which the practitioner was born
   *
   * @generated from field: google.fhir.r4.core.Date birth_date = 16;
   */
  birthDate?: Date;

  /**
   * Image of the person
   *
   * @generated from field: repeated google.fhir.r4.core.Attachment photo = 17;
   */
  photo: Attachment[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Practitioner.Qualification qualification = 18;
   */
  qualification: Practitioner_Qualification[] = [];

  /**
   * A language the practitioner can use in patient communication
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept communication = 19;
   */
  communication: CodeableConcept[] = [];

  constructor(data?: PartialMessage<Practitioner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Practitioner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "active", kind: "message", T: Boolean },
    { no: 12, name: "name", kind: "message", T: HumanName, repeated: true },
    { no: 13, name: "telecom", kind: "message", T: ContactPoint, repeated: true },
    { no: 14, name: "address", kind: "message", T: Address, repeated: true },
    { no: 15, name: "gender", kind: "message", T: Practitioner_GenderCode },
    { no: 16, name: "birth_date", kind: "message", T: Date },
    { no: 17, name: "photo", kind: "message", T: Attachment, repeated: true },
    { no: 18, name: "qualification", kind: "message", T: Practitioner_Qualification, repeated: true },
    { no: 19, name: "communication", kind: "message", T: CodeableConcept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Practitioner {
    return new Practitioner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Practitioner {
    return new Practitioner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Practitioner {
    return new Practitioner().fromJsonString(jsonString, options);
  }

  static equals(a: Practitioner | PlainMessage<Practitioner> | undefined, b: Practitioner | PlainMessage<Practitioner> | undefined): boolean {
    return proto3.util.equals(Practitioner, a, b);
  }
}

/**
 * male | female | other | unknown
 *
 * @generated from message google.fhir.r4.core.Practitioner.GenderCode
 */
export class Practitioner_GenderCode extends Message<Practitioner_GenderCode> {
  /**
   * @generated from field: google.fhir.r4.core.AdministrativeGenderCode.Value value = 1;
   */
  value = AdministrativeGenderCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Practitioner_GenderCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Practitioner.GenderCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AdministrativeGenderCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Practitioner_GenderCode {
    return new Practitioner_GenderCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Practitioner_GenderCode {
    return new Practitioner_GenderCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Practitioner_GenderCode {
    return new Practitioner_GenderCode().fromJsonString(jsonString, options);
  }

  static equals(a: Practitioner_GenderCode | PlainMessage<Practitioner_GenderCode> | undefined, b: Practitioner_GenderCode | PlainMessage<Practitioner_GenderCode> | undefined): boolean {
    return proto3.util.equals(Practitioner_GenderCode, a, b);
  }
}

/**
 * Certification, licenses, or training pertaining to the provision of care
 *
 * @generated from message google.fhir.r4.core.Practitioner.Qualification
 */
export class Practitioner_Qualification extends Message<Practitioner_Qualification> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * An identifier for this qualification for the practitioner
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier: Identifier[] = [];

  /**
   * Coded representation of the qualification
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 5;
   */
  code?: CodeableConcept;

  /**
   * Period during which the qualification is valid
   *
   * @generated from field: google.fhir.r4.core.Period period = 6;
   */
  period?: Period;

  /**
   * Organization that regulates and issues the qualification
   *
   * @generated from field: google.fhir.r4.core.Reference issuer = 7;
   */
  issuer?: Reference;

  constructor(data?: PartialMessage<Practitioner_Qualification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Practitioner.Qualification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 5, name: "code", kind: "message", T: CodeableConcept },
    { no: 6, name: "period", kind: "message", T: Period },
    { no: 7, name: "issuer", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Practitioner_Qualification {
    return new Practitioner_Qualification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Practitioner_Qualification {
    return new Practitioner_Qualification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Practitioner_Qualification {
    return new Practitioner_Qualification().fromJsonString(jsonString, options);
  }

  static equals(a: Practitioner_Qualification | PlainMessage<Practitioner_Qualification> | undefined, b: Practitioner_Qualification | PlainMessage<Practitioner_Qualification> | undefined): boolean {
    return proto3.util.equals(Practitioner_Qualification, a, b);
  }
}

