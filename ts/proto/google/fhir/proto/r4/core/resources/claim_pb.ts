//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/claim.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Address, Attachment, Boolean, Code, CodeableConcept, Date, DateTime, Decimal, Extension, Id, Identifier, Meta, Money, Narrative, Period, PositiveInt, Quantity, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { FinancialResourceStatusCode_Value, UseCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Claim.
 * Claim, Pre-determination or Pre-authorization.
 * See http://hl7.org/fhir/StructureDefinition/Claim
 *
 * @generated from message google.fhir.r4.core.Claim
 */
export class Claim extends Message<Claim> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for claim
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Claim.StatusCode status = 11;
   */
  status?: Claim_StatusCode;

  /**
   * Category or discipline
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 12;
   */
  type?: CodeableConcept;

  /**
   * More granular claim type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept sub_type = 13;
   */
  subType?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Claim.UseCode use = 14;
   */
  use?: Claim_UseCode;

  /**
   * The recipient of the products and services
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 15;
   */
  patient?: Reference;

  /**
   * Relevant time frame for the claim
   *
   * @generated from field: google.fhir.r4.core.Period billable_period = 16;
   */
  billablePeriod?: Period;

  /**
   * Resource creation date
   *
   * @generated from field: google.fhir.r4.core.DateTime created = 17;
   */
  created?: DateTime;

  /**
   * Author of the claim
   *
   * @generated from field: google.fhir.r4.core.Reference enterer = 18;
   */
  enterer?: Reference;

  /**
   * Target
   *
   * @generated from field: google.fhir.r4.core.Reference insurer = 19;
   */
  insurer?: Reference;

  /**
   * Party responsible for the claim
   *
   * @generated from field: google.fhir.r4.core.Reference provider = 20;
   */
  provider?: Reference;

  /**
   * Desired processing ugency
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept priority = 21;
   */
  priority?: CodeableConcept;

  /**
   * For whom to reserve funds
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept funds_reserve = 22;
   */
  fundsReserve?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.RelatedClaim related = 23;
   */
  related: Claim_RelatedClaim[] = [];

  /**
   * Prescription authorizing services and products
   *
   * @generated from field: google.fhir.r4.core.Reference prescription = 24;
   */
  prescription?: Reference;

  /**
   * Original prescription if superseded by fulfiller
   *
   * @generated from field: google.fhir.r4.core.Reference original_prescription = 25;
   */
  originalPrescription?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Claim.Payee payee = 26;
   */
  payee?: Claim_Payee;

  /**
   * Treatment referral
   *
   * @generated from field: google.fhir.r4.core.Reference referral = 27;
   */
  referral?: Reference;

  /**
   * Servicing facility
   *
   * @generated from field: google.fhir.r4.core.Reference facility = 28;
   */
  facility?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.CareTeam care_team = 29;
   */
  careTeam: Claim_CareTeam[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.SupportingInformation supporting_info = 30;
   */
  supportingInfo: Claim_SupportingInformation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.Diagnosis diagnosis = 31;
   */
  diagnosis: Claim_Diagnosis[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.Procedure procedure = 32;
   */
  procedure: Claim_Procedure[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.Insurance insurance = 33;
   */
  insurance: Claim_Insurance[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Claim.Accident accident = 34;
   */
  accident?: Claim_Accident;

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.Item item = 35;
   */
  item: Claim_Item[] = [];

  /**
   * Total claim cost
   *
   * @generated from field: google.fhir.r4.core.Money total = 36;
   */
  total?: Money;

  constructor(data?: PartialMessage<Claim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: Claim_StatusCode },
    { no: 12, name: "type", kind: "message", T: CodeableConcept },
    { no: 13, name: "sub_type", kind: "message", T: CodeableConcept },
    { no: 14, name: "use", kind: "message", T: Claim_UseCode },
    { no: 15, name: "patient", kind: "message", T: Reference },
    { no: 16, name: "billable_period", kind: "message", T: Period },
    { no: 17, name: "created", kind: "message", T: DateTime },
    { no: 18, name: "enterer", kind: "message", T: Reference },
    { no: 19, name: "insurer", kind: "message", T: Reference },
    { no: 20, name: "provider", kind: "message", T: Reference },
    { no: 21, name: "priority", kind: "message", T: CodeableConcept },
    { no: 22, name: "funds_reserve", kind: "message", T: CodeableConcept },
    { no: 23, name: "related", kind: "message", T: Claim_RelatedClaim, repeated: true },
    { no: 24, name: "prescription", kind: "message", T: Reference },
    { no: 25, name: "original_prescription", kind: "message", T: Reference },
    { no: 26, name: "payee", kind: "message", T: Claim_Payee },
    { no: 27, name: "referral", kind: "message", T: Reference },
    { no: 28, name: "facility", kind: "message", T: Reference },
    { no: 29, name: "care_team", kind: "message", T: Claim_CareTeam, repeated: true },
    { no: 30, name: "supporting_info", kind: "message", T: Claim_SupportingInformation, repeated: true },
    { no: 31, name: "diagnosis", kind: "message", T: Claim_Diagnosis, repeated: true },
    { no: 32, name: "procedure", kind: "message", T: Claim_Procedure, repeated: true },
    { no: 33, name: "insurance", kind: "message", T: Claim_Insurance, repeated: true },
    { no: 34, name: "accident", kind: "message", T: Claim_Accident },
    { no: 35, name: "item", kind: "message", T: Claim_Item, repeated: true },
    { no: 36, name: "total", kind: "message", T: Money },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim {
    return new Claim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim {
    return new Claim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim {
    return new Claim().fromJsonString(jsonString, options);
  }

  static equals(a: Claim | PlainMessage<Claim> | undefined, b: Claim | PlainMessage<Claim> | undefined): boolean {
    return proto3.util.equals(Claim, a, b);
  }
}

/**
 * active | cancelled | draft | entered-in-error
 *
 * @generated from message google.fhir.r4.core.Claim.StatusCode
 */
export class Claim_StatusCode extends Message<Claim_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FinancialResourceStatusCode.Value value = 1;
   */
  value = FinancialResourceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Claim_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FinancialResourceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_StatusCode {
    return new Claim_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_StatusCode {
    return new Claim_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_StatusCode {
    return new Claim_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_StatusCode | PlainMessage<Claim_StatusCode> | undefined, b: Claim_StatusCode | PlainMessage<Claim_StatusCode> | undefined): boolean {
    return proto3.util.equals(Claim_StatusCode, a, b);
  }
}

/**
 * claim | preauthorization | predetermination
 *
 * @generated from message google.fhir.r4.core.Claim.UseCode
 */
export class Claim_UseCode extends Message<Claim_UseCode> {
  /**
   * @generated from field: google.fhir.r4.core.UseCode.Value value = 1;
   */
  value = UseCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Claim_UseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.UseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(UseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_UseCode {
    return new Claim_UseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_UseCode {
    return new Claim_UseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_UseCode {
    return new Claim_UseCode().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_UseCode | PlainMessage<Claim_UseCode> | undefined, b: Claim_UseCode | PlainMessage<Claim_UseCode> | undefined): boolean {
    return proto3.util.equals(Claim_UseCode, a, b);
  }
}

/**
 * Prior or corollary claims
 *
 * @generated from message google.fhir.r4.core.Claim.RelatedClaim
 */
export class Claim_RelatedClaim extends Message<Claim_RelatedClaim> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Reference to the related claim
   *
   * @generated from field: google.fhir.r4.core.Reference claim = 4;
   */
  claim?: Reference;

  /**
   * How the reference claim is related
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept relationship = 5;
   */
  relationship?: CodeableConcept;

  /**
   * File or case reference
   *
   * @generated from field: google.fhir.r4.core.Identifier reference = 6;
   */
  reference?: Identifier;

  constructor(data?: PartialMessage<Claim_RelatedClaim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.RelatedClaim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "claim", kind: "message", T: Reference },
    { no: 5, name: "relationship", kind: "message", T: CodeableConcept },
    { no: 6, name: "reference", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_RelatedClaim {
    return new Claim_RelatedClaim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_RelatedClaim {
    return new Claim_RelatedClaim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_RelatedClaim {
    return new Claim_RelatedClaim().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_RelatedClaim | PlainMessage<Claim_RelatedClaim> | undefined, b: Claim_RelatedClaim | PlainMessage<Claim_RelatedClaim> | undefined): boolean {
    return proto3.util.equals(Claim_RelatedClaim, a, b);
  }
}

/**
 * Recipient of benefits payable
 *
 * @generated from message google.fhir.r4.core.Claim.Payee
 */
export class Claim_Payee extends Message<Claim_Payee> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Category of recipient
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Recipient reference
   *
   * @generated from field: google.fhir.r4.core.Reference party = 5;
   */
  party?: Reference;

  constructor(data?: PartialMessage<Claim_Payee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Payee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "party", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Payee {
    return new Claim_Payee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Payee {
    return new Claim_Payee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Payee {
    return new Claim_Payee().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Payee | PlainMessage<Claim_Payee> | undefined, b: Claim_Payee | PlainMessage<Claim_Payee> | undefined): boolean {
    return proto3.util.equals(Claim_Payee, a, b);
  }
}

/**
 * Members of the care team
 *
 * @generated from message google.fhir.r4.core.Claim.CareTeam
 */
export class Claim_CareTeam extends Message<Claim_CareTeam> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Order of care team
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Practitioner or organization
   *
   * @generated from field: google.fhir.r4.core.Reference provider = 5;
   */
  provider?: Reference;

  /**
   * Indicator of the lead practitioner
   *
   * @generated from field: google.fhir.r4.core.Boolean responsible = 6;
   */
  responsible?: Boolean;

  /**
   * Function within the team
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 7;
   */
  role?: CodeableConcept;

  /**
   * Practitioner credential or specialization
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept qualification = 8;
   */
  qualification?: CodeableConcept;

  constructor(data?: PartialMessage<Claim_CareTeam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.CareTeam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "provider", kind: "message", T: Reference },
    { no: 6, name: "responsible", kind: "message", T: Boolean },
    { no: 7, name: "role", kind: "message", T: CodeableConcept },
    { no: 8, name: "qualification", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_CareTeam {
    return new Claim_CareTeam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_CareTeam {
    return new Claim_CareTeam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_CareTeam {
    return new Claim_CareTeam().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_CareTeam | PlainMessage<Claim_CareTeam> | undefined, b: Claim_CareTeam | PlainMessage<Claim_CareTeam> | undefined): boolean {
    return proto3.util.equals(Claim_CareTeam, a, b);
  }
}

/**
 * Supporting information
 *
 * @generated from message google.fhir.r4.core.Claim.SupportingInformation
 */
export class Claim_SupportingInformation extends Message<Claim_SupportingInformation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Information instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Classification of the supplied information
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 5;
   */
  category?: CodeableConcept;

  /**
   * Type of information
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 6;
   */
  code?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Claim.SupportingInformation.TimingX timing = 7;
   */
  timing?: Claim_SupportingInformation_TimingX;

  /**
   * @generated from field: google.fhir.r4.core.Claim.SupportingInformation.ValueX value = 8;
   */
  value?: Claim_SupportingInformation_ValueX;

  /**
   * Explanation for the information
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept reason = 9;
   */
  reason?: CodeableConcept;

  constructor(data?: PartialMessage<Claim_SupportingInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.SupportingInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "category", kind: "message", T: CodeableConcept },
    { no: 6, name: "code", kind: "message", T: CodeableConcept },
    { no: 7, name: "timing", kind: "message", T: Claim_SupportingInformation_TimingX },
    { no: 8, name: "value", kind: "message", T: Claim_SupportingInformation_ValueX },
    { no: 9, name: "reason", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_SupportingInformation {
    return new Claim_SupportingInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_SupportingInformation {
    return new Claim_SupportingInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_SupportingInformation {
    return new Claim_SupportingInformation().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_SupportingInformation | PlainMessage<Claim_SupportingInformation> | undefined, b: Claim_SupportingInformation | PlainMessage<Claim_SupportingInformation> | undefined): boolean {
    return proto3.util.equals(Claim_SupportingInformation, a, b);
  }
}

/**
 * When it occurred
 *
 * @generated from message google.fhir.r4.core.Claim.SupportingInformation.TimingX
 */
export class Claim_SupportingInformation_TimingX extends Message<Claim_SupportingInformation_TimingX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.SupportingInformation.TimingX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_SupportingInformation_TimingX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.SupportingInformation.TimingX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_SupportingInformation_TimingX {
    return new Claim_SupportingInformation_TimingX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_SupportingInformation_TimingX {
    return new Claim_SupportingInformation_TimingX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_SupportingInformation_TimingX {
    return new Claim_SupportingInformation_TimingX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_SupportingInformation_TimingX | PlainMessage<Claim_SupportingInformation_TimingX> | undefined, b: Claim_SupportingInformation_TimingX | PlainMessage<Claim_SupportingInformation_TimingX> | undefined): boolean {
    return proto3.util.equals(Claim_SupportingInformation_TimingX, a, b);
  }
}

/**
 * Data to be provided
 *
 * @generated from message google.fhir.r4.core.Claim.SupportingInformation.ValueX
 */
export class Claim_SupportingInformation_ValueX extends Message<Claim_SupportingInformation_ValueX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.SupportingInformation.ValueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 1;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 3;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 4;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 5;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_SupportingInformation_ValueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.SupportingInformation.ValueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 2, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 3, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 4, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 5, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_SupportingInformation_ValueX {
    return new Claim_SupportingInformation_ValueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_SupportingInformation_ValueX {
    return new Claim_SupportingInformation_ValueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_SupportingInformation_ValueX {
    return new Claim_SupportingInformation_ValueX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_SupportingInformation_ValueX | PlainMessage<Claim_SupportingInformation_ValueX> | undefined, b: Claim_SupportingInformation_ValueX | PlainMessage<Claim_SupportingInformation_ValueX> | undefined): boolean {
    return proto3.util.equals(Claim_SupportingInformation_ValueX, a, b);
  }
}

/**
 * Pertinent diagnosis information
 *
 * @generated from message google.fhir.r4.core.Claim.Diagnosis
 */
export class Claim_Diagnosis extends Message<Claim_Diagnosis> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Diagnosis instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * @generated from field: google.fhir.r4.core.Claim.Diagnosis.DiagnosisX diagnosis = 5;
   */
  diagnosis?: Claim_Diagnosis_DiagnosisX;

  /**
   * Timing or nature of the diagnosis
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 6;
   */
  type: CodeableConcept[] = [];

  /**
   * Present on admission
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept on_admission = 7;
   */
  onAdmission?: CodeableConcept;

  /**
   * Package billing code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept package_code = 8;
   */
  packageCode?: CodeableConcept;

  constructor(data?: PartialMessage<Claim_Diagnosis>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Diagnosis";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "diagnosis", kind: "message", T: Claim_Diagnosis_DiagnosisX },
    { no: 6, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 7, name: "on_admission", kind: "message", T: CodeableConcept },
    { no: 8, name: "package_code", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Diagnosis {
    return new Claim_Diagnosis().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Diagnosis {
    return new Claim_Diagnosis().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Diagnosis {
    return new Claim_Diagnosis().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Diagnosis | PlainMessage<Claim_Diagnosis> | undefined, b: Claim_Diagnosis | PlainMessage<Claim_Diagnosis> | undefined): boolean {
    return proto3.util.equals(Claim_Diagnosis, a, b);
  }
}

/**
 * Nature of illness or problem
 *
 * @generated from message google.fhir.r4.core.Claim.Diagnosis.DiagnosisX
 */
export class Claim_Diagnosis_DiagnosisX extends Message<Claim_Diagnosis_DiagnosisX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.Diagnosis.DiagnosisX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_Diagnosis_DiagnosisX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Diagnosis.DiagnosisX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Diagnosis_DiagnosisX {
    return new Claim_Diagnosis_DiagnosisX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Diagnosis_DiagnosisX {
    return new Claim_Diagnosis_DiagnosisX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Diagnosis_DiagnosisX {
    return new Claim_Diagnosis_DiagnosisX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Diagnosis_DiagnosisX | PlainMessage<Claim_Diagnosis_DiagnosisX> | undefined, b: Claim_Diagnosis_DiagnosisX | PlainMessage<Claim_Diagnosis_DiagnosisX> | undefined): boolean {
    return proto3.util.equals(Claim_Diagnosis_DiagnosisX, a, b);
  }
}

/**
 * Clinical procedures performed
 *
 * @generated from message google.fhir.r4.core.Claim.Procedure
 */
export class Claim_Procedure extends Message<Claim_Procedure> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Procedure instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Category of Procedure
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 5;
   */
  type: CodeableConcept[] = [];

  /**
   * When the procedure was performed
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 6;
   */
  date?: DateTime;

  /**
   * @generated from field: google.fhir.r4.core.Claim.Procedure.ProcedureX procedure = 7;
   */
  procedure?: Claim_Procedure_ProcedureX;

  /**
   * Unique device identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Reference udi = 8;
   */
  udi: Reference[] = [];

  constructor(data?: PartialMessage<Claim_Procedure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Procedure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "date", kind: "message", T: DateTime },
    { no: 7, name: "procedure", kind: "message", T: Claim_Procedure_ProcedureX },
    { no: 8, name: "udi", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Procedure {
    return new Claim_Procedure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Procedure {
    return new Claim_Procedure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Procedure {
    return new Claim_Procedure().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Procedure | PlainMessage<Claim_Procedure> | undefined, b: Claim_Procedure | PlainMessage<Claim_Procedure> | undefined): boolean {
    return proto3.util.equals(Claim_Procedure, a, b);
  }
}

/**
 * Specific clinical procedure
 *
 * @generated from message google.fhir.r4.core.Claim.Procedure.ProcedureX
 */
export class Claim_Procedure_ProcedureX extends Message<Claim_Procedure_ProcedureX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.Procedure.ProcedureX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_Procedure_ProcedureX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Procedure.ProcedureX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Procedure_ProcedureX {
    return new Claim_Procedure_ProcedureX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Procedure_ProcedureX {
    return new Claim_Procedure_ProcedureX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Procedure_ProcedureX {
    return new Claim_Procedure_ProcedureX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Procedure_ProcedureX | PlainMessage<Claim_Procedure_ProcedureX> | undefined, b: Claim_Procedure_ProcedureX | PlainMessage<Claim_Procedure_ProcedureX> | undefined): boolean {
    return proto3.util.equals(Claim_Procedure_ProcedureX, a, b);
  }
}

/**
 * Patient insurance information
 *
 * @generated from message google.fhir.r4.core.Claim.Insurance
 */
export class Claim_Insurance extends Message<Claim_Insurance> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Insurance instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Coverage to be used for adjudication
   *
   * @generated from field: google.fhir.r4.core.Boolean focal = 5;
   */
  focal?: Boolean;

  /**
   * Pre-assigned Claim number
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 6;
   */
  identifier?: Identifier;

  /**
   * Insurance information
   *
   * @generated from field: google.fhir.r4.core.Reference coverage = 7;
   */
  coverage?: Reference;

  /**
   * Additional provider contract number
   *
   * @generated from field: google.fhir.r4.core.String business_arrangement = 8;
   */
  businessArrangement?: String;

  /**
   * Prior authorization reference number
   *
   * @generated from field: repeated google.fhir.r4.core.String pre_auth_ref = 9;
   */
  preAuthRef: String[] = [];

  /**
   * Adjudication results
   *
   * @generated from field: google.fhir.r4.core.Reference claim_response = 10;
   */
  claimResponse?: Reference;

  constructor(data?: PartialMessage<Claim_Insurance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Insurance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "focal", kind: "message", T: Boolean },
    { no: 6, name: "identifier", kind: "message", T: Identifier },
    { no: 7, name: "coverage", kind: "message", T: Reference },
    { no: 8, name: "business_arrangement", kind: "message", T: String },
    { no: 9, name: "pre_auth_ref", kind: "message", T: String, repeated: true },
    { no: 10, name: "claim_response", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Insurance {
    return new Claim_Insurance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Insurance {
    return new Claim_Insurance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Insurance {
    return new Claim_Insurance().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Insurance | PlainMessage<Claim_Insurance> | undefined, b: Claim_Insurance | PlainMessage<Claim_Insurance> | undefined): boolean {
    return proto3.util.equals(Claim_Insurance, a, b);
  }
}

/**
 * Details of the event
 *
 * @generated from message google.fhir.r4.core.Claim.Accident
 */
export class Claim_Accident extends Message<Claim_Accident> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * When the incident occurred
   *
   * @generated from field: google.fhir.r4.core.Date date = 4;
   */
  date?: Date;

  /**
   * The nature of the accident
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Claim.Accident.LocationX location = 6;
   */
  location?: Claim_Accident_LocationX;

  constructor(data?: PartialMessage<Claim_Accident>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Accident";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "date", kind: "message", T: Date },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "location", kind: "message", T: Claim_Accident_LocationX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Accident {
    return new Claim_Accident().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Accident {
    return new Claim_Accident().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Accident {
    return new Claim_Accident().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Accident | PlainMessage<Claim_Accident> | undefined, b: Claim_Accident | PlainMessage<Claim_Accident> | undefined): boolean {
    return proto3.util.equals(Claim_Accident, a, b);
  }
}

/**
 * Where the event occurred
 *
 * @generated from message google.fhir.r4.core.Claim.Accident.LocationX
 */
export class Claim_Accident_LocationX extends Message<Claim_Accident_LocationX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.Accident.LocationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Address address = 1;
     */
    value: Address;
    case: "address";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_Accident_LocationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Accident.LocationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "message", T: Address, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Accident_LocationX {
    return new Claim_Accident_LocationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Accident_LocationX {
    return new Claim_Accident_LocationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Accident_LocationX {
    return new Claim_Accident_LocationX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Accident_LocationX | PlainMessage<Claim_Accident_LocationX> | undefined, b: Claim_Accident_LocationX | PlainMessage<Claim_Accident_LocationX> | undefined): boolean {
    return proto3.util.equals(Claim_Accident_LocationX, a, b);
  }
}

/**
 * Product or service provided
 *
 * @generated from message google.fhir.r4.core.Claim.Item
 */
export class Claim_Item extends Message<Claim_Item> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Item instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Applicable careTeam members
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt care_team_sequence = 5;
   */
  careTeamSequence: PositiveInt[] = [];

  /**
   * Applicable diagnoses
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt diagnosis_sequence = 6;
   */
  diagnosisSequence: PositiveInt[] = [];

  /**
   * Applicable procedures
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt procedure_sequence = 7;
   */
  procedureSequence: PositiveInt[] = [];

  /**
   * Applicable exception and supporting information
   *
   * @generated from field: repeated google.fhir.r4.core.PositiveInt information_sequence = 8;
   */
  informationSequence: PositiveInt[] = [];

  /**
   * Revenue or cost center code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept revenue = 9;
   */
  revenue?: CodeableConcept;

  /**
   * Benefit classification
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 10;
   */
  category?: CodeableConcept;

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 11;
   */
  productOrService?: CodeableConcept;

  /**
   * Product or service billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 12;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Program the product or service is provided under
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept program_code = 13;
   */
  programCode: CodeableConcept[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Claim.Item.ServicedX serviced = 14;
   */
  serviced?: Claim_Item_ServicedX;

  /**
   * @generated from field: google.fhir.r4.core.Claim.Item.LocationX location = 15;
   */
  location?: Claim_Item_LocationX;

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 16;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 17;
   */
  unitPrice?: Money;

  /**
   * Price scaling factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 18;
   */
  factor?: Decimal;

  /**
   * Total item cost
   *
   * @generated from field: google.fhir.r4.core.Money net = 19;
   */
  net?: Money;

  /**
   * Unique device identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Reference udi = 20;
   */
  udi: Reference[] = [];

  /**
   * Anatomical location
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept body_site = 21;
   */
  bodySite?: CodeableConcept;

  /**
   * Anatomical sub-location
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept sub_site = 22;
   */
  subSite: CodeableConcept[] = [];

  /**
   * Encounters related to this billed item
   *
   * @generated from field: repeated google.fhir.r4.core.Reference encounter = 23;
   */
  encounter: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.Item.Detail detail = 24;
   */
  detail: Claim_Item_Detail[] = [];

  constructor(data?: PartialMessage<Claim_Item>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Item";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "care_team_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 6, name: "diagnosis_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 7, name: "procedure_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 8, name: "information_sequence", kind: "message", T: PositiveInt, repeated: true },
    { no: 9, name: "revenue", kind: "message", T: CodeableConcept },
    { no: 10, name: "category", kind: "message", T: CodeableConcept },
    { no: 11, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 12, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 13, name: "program_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "serviced", kind: "message", T: Claim_Item_ServicedX },
    { no: 15, name: "location", kind: "message", T: Claim_Item_LocationX },
    { no: 16, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 17, name: "unit_price", kind: "message", T: Money },
    { no: 18, name: "factor", kind: "message", T: Decimal },
    { no: 19, name: "net", kind: "message", T: Money },
    { no: 20, name: "udi", kind: "message", T: Reference, repeated: true },
    { no: 21, name: "body_site", kind: "message", T: CodeableConcept },
    { no: 22, name: "sub_site", kind: "message", T: CodeableConcept, repeated: true },
    { no: 23, name: "encounter", kind: "message", T: Reference, repeated: true },
    { no: 24, name: "detail", kind: "message", T: Claim_Item_Detail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Item {
    return new Claim_Item().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Item {
    return new Claim_Item().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Item {
    return new Claim_Item().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Item | PlainMessage<Claim_Item> | undefined, b: Claim_Item | PlainMessage<Claim_Item> | undefined): boolean {
    return proto3.util.equals(Claim_Item, a, b);
  }
}

/**
 * Date or dates of service or product delivery
 *
 * @generated from message google.fhir.r4.core.Claim.Item.ServicedX
 */
export class Claim_Item_ServicedX extends Message<Claim_Item_ServicedX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.Item.ServicedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_Item_ServicedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Item.ServicedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Item_ServicedX {
    return new Claim_Item_ServicedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Item_ServicedX {
    return new Claim_Item_ServicedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Item_ServicedX {
    return new Claim_Item_ServicedX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Item_ServicedX | PlainMessage<Claim_Item_ServicedX> | undefined, b: Claim_Item_ServicedX | PlainMessage<Claim_Item_ServicedX> | undefined): boolean {
    return proto3.util.equals(Claim_Item_ServicedX, a, b);
  }
}

/**
 * Place of service or where product was supplied
 *
 * @generated from message google.fhir.r4.core.Claim.Item.LocationX
 */
export class Claim_Item_LocationX extends Message<Claim_Item_LocationX> {
  /**
   * @generated from oneof google.fhir.r4.core.Claim.Item.LocationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Address address = 2;
     */
    value: Address;
    case: "address";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 3;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Claim_Item_LocationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Item.LocationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "address", kind: "message", T: Address, oneof: "choice" },
    { no: 3, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Item_LocationX {
    return new Claim_Item_LocationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Item_LocationX {
    return new Claim_Item_LocationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Item_LocationX {
    return new Claim_Item_LocationX().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Item_LocationX | PlainMessage<Claim_Item_LocationX> | undefined, b: Claim_Item_LocationX | PlainMessage<Claim_Item_LocationX> | undefined): boolean {
    return proto3.util.equals(Claim_Item_LocationX, a, b);
  }
}

/**
 * Product or service provided
 *
 * @generated from message google.fhir.r4.core.Claim.Item.Detail
 */
export class Claim_Item_Detail extends Message<Claim_Item_Detail> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Item instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Revenue or cost center code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept revenue = 5;
   */
  revenue?: CodeableConcept;

  /**
   * Benefit classification
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 6;
   */
  category?: CodeableConcept;

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 7;
   */
  productOrService?: CodeableConcept;

  /**
   * Service/Product billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 8;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Program the product or service is provided under
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept program_code = 9;
   */
  programCode: CodeableConcept[] = [];

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 10;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 11;
   */
  unitPrice?: Money;

  /**
   * Price scaling factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 12;
   */
  factor?: Decimal;

  /**
   * Total item cost
   *
   * @generated from field: google.fhir.r4.core.Money net = 13;
   */
  net?: Money;

  /**
   * Unique device identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Reference udi = 14;
   */
  udi: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Claim.Item.Detail.SubDetail sub_detail = 15;
   */
  subDetail: Claim_Item_Detail_SubDetail[] = [];

  constructor(data?: PartialMessage<Claim_Item_Detail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Item.Detail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "revenue", kind: "message", T: CodeableConcept },
    { no: 6, name: "category", kind: "message", T: CodeableConcept },
    { no: 7, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 8, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 9, name: "program_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 11, name: "unit_price", kind: "message", T: Money },
    { no: 12, name: "factor", kind: "message", T: Decimal },
    { no: 13, name: "net", kind: "message", T: Money },
    { no: 14, name: "udi", kind: "message", T: Reference, repeated: true },
    { no: 15, name: "sub_detail", kind: "message", T: Claim_Item_Detail_SubDetail, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Item_Detail {
    return new Claim_Item_Detail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Item_Detail {
    return new Claim_Item_Detail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Item_Detail {
    return new Claim_Item_Detail().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Item_Detail | PlainMessage<Claim_Item_Detail> | undefined, b: Claim_Item_Detail | PlainMessage<Claim_Item_Detail> | undefined): boolean {
    return proto3.util.equals(Claim_Item_Detail, a, b);
  }
}

/**
 * Product or service provided
 *
 * @generated from message google.fhir.r4.core.Claim.Item.Detail.SubDetail
 */
export class Claim_Item_Detail_SubDetail extends Message<Claim_Item_Detail_SubDetail> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Item instance identifier
   *
   * @generated from field: google.fhir.r4.core.PositiveInt sequence = 4;
   */
  sequence?: PositiveInt;

  /**
   * Revenue or cost center code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept revenue = 5;
   */
  revenue?: CodeableConcept;

  /**
   * Benefit classification
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 6;
   */
  category?: CodeableConcept;

  /**
   * Billing, service, product, or drug code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product_or_service = 7;
   */
  productOrService?: CodeableConcept;

  /**
   * Service/Product billing modifiers
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept modifier = 8;
   */
  modifier: CodeableConcept[] = [];

  /**
   * Program the product or service is provided under
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept program_code = 9;
   */
  programCode: CodeableConcept[] = [];

  /**
   * Count of products or services
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 10;
   */
  quantity?: SimpleQuantity;

  /**
   * Fee, charge or cost per item
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 11;
   */
  unitPrice?: Money;

  /**
   * Price scaling factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 12;
   */
  factor?: Decimal;

  /**
   * Total item cost
   *
   * @generated from field: google.fhir.r4.core.Money net = 13;
   */
  net?: Money;

  /**
   * Unique device identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Reference udi = 14;
   */
  udi: Reference[] = [];

  constructor(data?: PartialMessage<Claim_Item_Detail_SubDetail>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Claim.Item.Detail.SubDetail";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "sequence", kind: "message", T: PositiveInt },
    { no: 5, name: "revenue", kind: "message", T: CodeableConcept },
    { no: 6, name: "category", kind: "message", T: CodeableConcept },
    { no: 7, name: "product_or_service", kind: "message", T: CodeableConcept },
    { no: 8, name: "modifier", kind: "message", T: CodeableConcept, repeated: true },
    { no: 9, name: "program_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 11, name: "unit_price", kind: "message", T: Money },
    { no: 12, name: "factor", kind: "message", T: Decimal },
    { no: 13, name: "net", kind: "message", T: Money },
    { no: 14, name: "udi", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim_Item_Detail_SubDetail {
    return new Claim_Item_Detail_SubDetail().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim_Item_Detail_SubDetail {
    return new Claim_Item_Detail_SubDetail().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim_Item_Detail_SubDetail {
    return new Claim_Item_Detail_SubDetail().fromJsonString(jsonString, options);
  }

  static equals(a: Claim_Item_Detail_SubDetail | PlainMessage<Claim_Item_Detail_SubDetail> | undefined, b: Claim_Item_Detail_SubDetail | PlainMessage<Claim_Item_Detail_SubDetail> | undefined): boolean {
    return proto3.util.equals(Claim_Item_Detail_SubDetail, a, b);
  }
}

