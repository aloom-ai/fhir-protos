//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medicinal_product_packaged.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Extension, Id, Identifier, MarketingStatus, Meta, Narrative, ProdCharacteristic, ProductShelfLife, Quantity, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicinalProductPackaged.
 * A medicinal product in a container or package.
 * See http://hl7.org/fhir/StructureDefinition/MedicinalProductPackaged
 *
 * @generated from message google.fhir.r4.core.MedicinalProductPackaged
 */
export class MedicinalProductPackaged extends Message<MedicinalProductPackaged> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Unique identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * The product with this is a pack for
   *
   * @generated from field: repeated google.fhir.r4.core.Reference subject = 11;
   */
  subject: Reference[] = [];

  /**
   * Textual description
   *
   * @generated from field: google.fhir.r4.core.String description = 12;
   */
  description?: String;

  /**
   * The legal status of supply of the medicinal product as classified by the
   * regulator
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept legal_status_of_supply = 13;
   */
  legalStatusOfSupply?: CodeableConcept;

  /**
   * Marketing information
   *
   * @generated from field: repeated google.fhir.r4.core.MarketingStatus marketing_status = 14;
   */
  marketingStatus: MarketingStatus[] = [];

  /**
   * Manufacturer of this Package Item
   *
   * @generated from field: google.fhir.r4.core.Reference marketing_authorization = 15;
   */
  marketingAuthorization?: Reference;

  /**
   * Manufacturer of this Package Item
   *
   * @generated from field: repeated google.fhir.r4.core.Reference manufacturer = 16;
   */
  manufacturer: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier batch_identifier = 17;
   */
  batchIdentifier: MedicinalProductPackaged_BatchIdentifier[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductPackaged.PackageItem package_item = 18;
   */
  packageItem: MedicinalProductPackaged_PackageItem[] = [];

  constructor(data?: PartialMessage<MedicinalProductPackaged>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductPackaged";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "subject", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "description", kind: "message", T: String },
    { no: 13, name: "legal_status_of_supply", kind: "message", T: CodeableConcept },
    { no: 14, name: "marketing_status", kind: "message", T: MarketingStatus, repeated: true },
    { no: 15, name: "marketing_authorization", kind: "message", T: Reference },
    { no: 16, name: "manufacturer", kind: "message", T: Reference, repeated: true },
    { no: 17, name: "batch_identifier", kind: "message", T: MedicinalProductPackaged_BatchIdentifier, repeated: true },
    { no: 18, name: "package_item", kind: "message", T: MedicinalProductPackaged_PackageItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductPackaged {
    return new MedicinalProductPackaged().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductPackaged {
    return new MedicinalProductPackaged().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductPackaged {
    return new MedicinalProductPackaged().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductPackaged | PlainMessage<MedicinalProductPackaged> | undefined, b: MedicinalProductPackaged | PlainMessage<MedicinalProductPackaged> | undefined): boolean {
    return proto3.util.equals(MedicinalProductPackaged, a, b);
  }
}

/**
 * Batch numbering
 *
 * @generated from message google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier
 */
export class MedicinalProductPackaged_BatchIdentifier extends Message<MedicinalProductPackaged_BatchIdentifier> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * A number appearing on the outer packaging of a specific batch
   *
   * @generated from field: google.fhir.r4.core.Identifier outer_packaging = 4;
   */
  outerPackaging?: Identifier;

  /**
   * A number appearing on the immediate packaging (and not the outer
   * packaging)
   *
   * @generated from field: google.fhir.r4.core.Identifier immediate_packaging = 5;
   */
  immediatePackaging?: Identifier;

  constructor(data?: PartialMessage<MedicinalProductPackaged_BatchIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductPackaged.BatchIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "outer_packaging", kind: "message", T: Identifier },
    { no: 5, name: "immediate_packaging", kind: "message", T: Identifier },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductPackaged_BatchIdentifier {
    return new MedicinalProductPackaged_BatchIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductPackaged_BatchIdentifier {
    return new MedicinalProductPackaged_BatchIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductPackaged_BatchIdentifier {
    return new MedicinalProductPackaged_BatchIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductPackaged_BatchIdentifier | PlainMessage<MedicinalProductPackaged_BatchIdentifier> | undefined, b: MedicinalProductPackaged_BatchIdentifier | PlainMessage<MedicinalProductPackaged_BatchIdentifier> | undefined): boolean {
    return proto3.util.equals(MedicinalProductPackaged_BatchIdentifier, a, b);
  }
}

/**
 * A packaging item, as a contained for medicine, possibly with other
 * packaging items within
 *
 * @generated from message google.fhir.r4.core.MedicinalProductPackaged.PackageItem
 */
export class MedicinalProductPackaged_PackageItem extends Message<MedicinalProductPackaged_PackageItem> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Including possibly Data Carrier Identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier: Identifier[] = [];

  /**
   * The physical type of the container of the medicine
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * The quantity of this package in the medicinal product, at the current
   * level of packaging. The outermost is always 1
   *
   * @generated from field: google.fhir.r4.core.Quantity quantity = 6;
   */
  quantity?: Quantity;

  /**
   * Material type of the package item
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept material = 7;
   */
  material: CodeableConcept[] = [];

  /**
   * A possible alternate material for the packaging
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept alternate_material = 8;
   */
  alternateMaterial: CodeableConcept[] = [];

  /**
   * A device accompanying a medicinal product
   *
   * @generated from field: repeated google.fhir.r4.core.Reference device = 9;
   */
  device: Reference[] = [];

  /**
   * The manufactured item as contained in the packaged medicinal product
   *
   * @generated from field: repeated google.fhir.r4.core.Reference manufactured_item = 10;
   */
  manufacturedItem: Reference[] = [];

  /**
   * Allows containers within containers
   *
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductPackaged.PackageItem package_item = 11;
   */
  packageItem: MedicinalProductPackaged_PackageItem[] = [];

  /**
   * Dimensions, color etc.
   *
   * @generated from field: google.fhir.r4.core.ProdCharacteristic physical_characteristics = 12;
   */
  physicalCharacteristics?: ProdCharacteristic;

  /**
   * Other codeable characteristics
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept other_characteristics = 13;
   */
  otherCharacteristics: CodeableConcept[] = [];

  /**
   * Shelf Life and storage information
   *
   * @generated from field: repeated google.fhir.r4.core.ProductShelfLife shelf_life_storage = 14;
   */
  shelfLifeStorage: ProductShelfLife[] = [];

  /**
   * Manufacturer of this Package Item
   *
   * @generated from field: repeated google.fhir.r4.core.Reference manufacturer = 15;
   */
  manufacturer: Reference[] = [];

  constructor(data?: PartialMessage<MedicinalProductPackaged_PackageItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductPackaged.PackageItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "quantity", kind: "message", T: Quantity },
    { no: 7, name: "material", kind: "message", T: CodeableConcept, repeated: true },
    { no: 8, name: "alternate_material", kind: "message", T: CodeableConcept, repeated: true },
    { no: 9, name: "device", kind: "message", T: Reference, repeated: true },
    { no: 10, name: "manufactured_item", kind: "message", T: Reference, repeated: true },
    { no: 11, name: "package_item", kind: "message", T: MedicinalProductPackaged_PackageItem, repeated: true },
    { no: 12, name: "physical_characteristics", kind: "message", T: ProdCharacteristic },
    { no: 13, name: "other_characteristics", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "shelf_life_storage", kind: "message", T: ProductShelfLife, repeated: true },
    { no: 15, name: "manufacturer", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductPackaged_PackageItem {
    return new MedicinalProductPackaged_PackageItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductPackaged_PackageItem {
    return new MedicinalProductPackaged_PackageItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductPackaged_PackageItem {
    return new MedicinalProductPackaged_PackageItem().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductPackaged_PackageItem | PlainMessage<MedicinalProductPackaged_PackageItem> | undefined, b: MedicinalProductPackaged_PackageItem | PlainMessage<MedicinalProductPackaged_PackageItem> | undefined): boolean {
    return proto3.util.equals(MedicinalProductPackaged_PackageItem, a, b);
  }
}

