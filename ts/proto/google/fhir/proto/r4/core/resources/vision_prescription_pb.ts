//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/vision_prescription.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, DateTime, Decimal, Extension, Id, Identifier, Integer, Meta, Narrative, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { FinancialResourceStatusCode_Value, VisionBaseCode_Value, VisionEyesCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for VisionPrescription.
 * Prescription for vision correction products for a patient.
 * See http://hl7.org/fhir/StructureDefinition/VisionPrescription
 *
 * @generated from message google.fhir.r4.core.VisionPrescription
 */
export class VisionPrescription extends Message<VisionPrescription> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for vision prescription
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.VisionPrescription.StatusCode status = 11;
   */
  status?: VisionPrescription_StatusCode;

  /**
   * Response creation date
   *
   * @generated from field: google.fhir.r4.core.DateTime created = 12;
   */
  created?: DateTime;

  /**
   * Who prescription is for
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 13;
   */
  patient?: Reference;

  /**
   * Created during encounter / admission / stay
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 14;
   */
  encounter?: Reference;

  /**
   * When prescription was authorized
   *
   * @generated from field: google.fhir.r4.core.DateTime date_written = 15;
   */
  dateWritten?: DateTime;

  /**
   * Who authorized the vision prescription
   *
   * @generated from field: google.fhir.r4.core.Reference prescriber = 16;
   */
  prescriber?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.VisionPrescription.LensSpecification lens_specification = 17;
   */
  lensSpecification: VisionPrescription_LensSpecification[] = [];

  constructor(data?: PartialMessage<VisionPrescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.VisionPrescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: VisionPrescription_StatusCode },
    { no: 12, name: "created", kind: "message", T: DateTime },
    { no: 13, name: "patient", kind: "message", T: Reference },
    { no: 14, name: "encounter", kind: "message", T: Reference },
    { no: 15, name: "date_written", kind: "message", T: DateTime },
    { no: 16, name: "prescriber", kind: "message", T: Reference },
    { no: 17, name: "lens_specification", kind: "message", T: VisionPrescription_LensSpecification, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisionPrescription {
    return new VisionPrescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisionPrescription {
    return new VisionPrescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisionPrescription {
    return new VisionPrescription().fromJsonString(jsonString, options);
  }

  static equals(a: VisionPrescription | PlainMessage<VisionPrescription> | undefined, b: VisionPrescription | PlainMessage<VisionPrescription> | undefined): boolean {
    return proto3.util.equals(VisionPrescription, a, b);
  }
}

/**
 * active | cancelled | draft | entered-in-error
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.StatusCode
 */
export class VisionPrescription_StatusCode extends Message<VisionPrescription_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FinancialResourceStatusCode.Value value = 1;
   */
  value = FinancialResourceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<VisionPrescription_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.VisionPrescription.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FinancialResourceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisionPrescription_StatusCode {
    return new VisionPrescription_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisionPrescription_StatusCode {
    return new VisionPrescription_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisionPrescription_StatusCode {
    return new VisionPrescription_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: VisionPrescription_StatusCode | PlainMessage<VisionPrescription_StatusCode> | undefined, b: VisionPrescription_StatusCode | PlainMessage<VisionPrescription_StatusCode> | undefined): boolean {
    return proto3.util.equals(VisionPrescription_StatusCode, a, b);
  }
}

/**
 * Vision lens authorization
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification
 */
export class VisionPrescription_LensSpecification extends Message<VisionPrescription_LensSpecification> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Product to be supplied
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept product = 4;
   */
  product?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode eye = 5;
   */
  eye?: VisionPrescription_LensSpecification_EyeCode;

  /**
   * Power of the lens
   *
   * @generated from field: google.fhir.r4.core.Decimal sphere = 6;
   */
  sphere?: Decimal;

  /**
   * Lens power for astigmatism
   *
   * @generated from field: google.fhir.r4.core.Decimal cylinder = 7;
   */
  cylinder?: Decimal;

  /**
   * Lens meridian which contain no power for astigmatism
   *
   * @generated from field: google.fhir.r4.core.Integer axis = 8;
   */
  axis?: Integer;

  /**
   * @generated from field: repeated google.fhir.r4.core.VisionPrescription.LensSpecification.Prism prism = 9;
   */
  prism: VisionPrescription_LensSpecification_Prism[] = [];

  /**
   * Added power for multifocal levels
   *
   * @generated from field: google.fhir.r4.core.Decimal add = 10;
   */
  add?: Decimal;

  /**
   * Contact lens power
   *
   * @generated from field: google.fhir.r4.core.Decimal power = 11;
   */
  power?: Decimal;

  /**
   * Contact lens back curvature
   *
   * @generated from field: google.fhir.r4.core.Decimal back_curve = 12;
   */
  backCurve?: Decimal;

  /**
   * Contact lens diameter
   *
   * @generated from field: google.fhir.r4.core.Decimal diameter = 13;
   */
  diameter?: Decimal;

  /**
   * Lens wear duration
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity duration = 14;
   */
  duration?: SimpleQuantity;

  /**
   * Color required
   *
   * @generated from field: google.fhir.r4.core.String color = 15;
   */
  color?: String;

  /**
   * Brand required
   *
   * @generated from field: google.fhir.r4.core.String brand = 16;
   */
  brand?: String;

  /**
   * Notes for coatings
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 17;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<VisionPrescription_LensSpecification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.VisionPrescription.LensSpecification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "product", kind: "message", T: CodeableConcept },
    { no: 5, name: "eye", kind: "message", T: VisionPrescription_LensSpecification_EyeCode },
    { no: 6, name: "sphere", kind: "message", T: Decimal },
    { no: 7, name: "cylinder", kind: "message", T: Decimal },
    { no: 8, name: "axis", kind: "message", T: Integer },
    { no: 9, name: "prism", kind: "message", T: VisionPrescription_LensSpecification_Prism, repeated: true },
    { no: 10, name: "add", kind: "message", T: Decimal },
    { no: 11, name: "power", kind: "message", T: Decimal },
    { no: 12, name: "back_curve", kind: "message", T: Decimal },
    { no: 13, name: "diameter", kind: "message", T: Decimal },
    { no: 14, name: "duration", kind: "message", T: SimpleQuantity },
    { no: 15, name: "color", kind: "message", T: String },
    { no: 16, name: "brand", kind: "message", T: String },
    { no: 17, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisionPrescription_LensSpecification {
    return new VisionPrescription_LensSpecification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification {
    return new VisionPrescription_LensSpecification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification {
    return new VisionPrescription_LensSpecification().fromJsonString(jsonString, options);
  }

  static equals(a: VisionPrescription_LensSpecification | PlainMessage<VisionPrescription_LensSpecification> | undefined, b: VisionPrescription_LensSpecification | PlainMessage<VisionPrescription_LensSpecification> | undefined): boolean {
    return proto3.util.equals(VisionPrescription_LensSpecification, a, b);
  }
}

/**
 * right | left
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode
 */
export class VisionPrescription_LensSpecification_EyeCode extends Message<VisionPrescription_LensSpecification_EyeCode> {
  /**
   * @generated from field: google.fhir.r4.core.VisionEyesCode.Value value = 1;
   */
  value = VisionEyesCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<VisionPrescription_LensSpecification_EyeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.VisionPrescription.LensSpecification.EyeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(VisionEyesCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisionPrescription_LensSpecification_EyeCode {
    return new VisionPrescription_LensSpecification_EyeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification_EyeCode {
    return new VisionPrescription_LensSpecification_EyeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification_EyeCode {
    return new VisionPrescription_LensSpecification_EyeCode().fromJsonString(jsonString, options);
  }

  static equals(a: VisionPrescription_LensSpecification_EyeCode | PlainMessage<VisionPrescription_LensSpecification_EyeCode> | undefined, b: VisionPrescription_LensSpecification_EyeCode | PlainMessage<VisionPrescription_LensSpecification_EyeCode> | undefined): boolean {
    return proto3.util.equals(VisionPrescription_LensSpecification_EyeCode, a, b);
  }
}

/**
 * Eye alignment compensation
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification.Prism
 */
export class VisionPrescription_LensSpecification_Prism extends Message<VisionPrescription_LensSpecification_Prism> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Amount of adjustment
   *
   * @generated from field: google.fhir.r4.core.Decimal amount = 4;
   */
  amount?: Decimal;

  /**
   * @generated from field: google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode base = 5;
   */
  base?: VisionPrescription_LensSpecification_Prism_BaseCode;

  constructor(data?: PartialMessage<VisionPrescription_LensSpecification_Prism>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.VisionPrescription.LensSpecification.Prism";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "amount", kind: "message", T: Decimal },
    { no: 5, name: "base", kind: "message", T: VisionPrescription_LensSpecification_Prism_BaseCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisionPrescription_LensSpecification_Prism {
    return new VisionPrescription_LensSpecification_Prism().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification_Prism {
    return new VisionPrescription_LensSpecification_Prism().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification_Prism {
    return new VisionPrescription_LensSpecification_Prism().fromJsonString(jsonString, options);
  }

  static equals(a: VisionPrescription_LensSpecification_Prism | PlainMessage<VisionPrescription_LensSpecification_Prism> | undefined, b: VisionPrescription_LensSpecification_Prism | PlainMessage<VisionPrescription_LensSpecification_Prism> | undefined): boolean {
    return proto3.util.equals(VisionPrescription_LensSpecification_Prism, a, b);
  }
}

/**
 * up | down | in | out
 *
 * @generated from message google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode
 */
export class VisionPrescription_LensSpecification_Prism_BaseCode extends Message<VisionPrescription_LensSpecification_Prism_BaseCode> {
  /**
   * @generated from field: google.fhir.r4.core.VisionBaseCode.Value value = 1;
   */
  value = VisionBaseCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<VisionPrescription_LensSpecification_Prism_BaseCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.VisionPrescription.LensSpecification.Prism.BaseCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(VisionBaseCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VisionPrescription_LensSpecification_Prism_BaseCode {
    return new VisionPrescription_LensSpecification_Prism_BaseCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification_Prism_BaseCode {
    return new VisionPrescription_LensSpecification_Prism_BaseCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VisionPrescription_LensSpecification_Prism_BaseCode {
    return new VisionPrescription_LensSpecification_Prism_BaseCode().fromJsonString(jsonString, options);
  }

  static equals(a: VisionPrescription_LensSpecification_Prism_BaseCode | PlainMessage<VisionPrescription_LensSpecification_Prism_BaseCode> | undefined, b: VisionPrescription_LensSpecification_Prism_BaseCode | PlainMessage<VisionPrescription_LensSpecification_Prism_BaseCode> | undefined): boolean {
    return proto3.util.equals(VisionPrescription_LensSpecification_Prism_BaseCode, a, b);
  }
}

