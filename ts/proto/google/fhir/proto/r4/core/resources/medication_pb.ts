//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medication.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Ratio, Reference, String, Uri } from "../datatypes_pb.js";
import { MedicationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Medication.
 * Definition of a Medication.
 * See http://hl7.org/fhir/StructureDefinition/Medication
 *
 * @generated from message google.fhir.r4.core.Medication
 */
export class Medication extends Message<Medication> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier for this medication
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Codes that identify this medication
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 11;
   */
  code?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Medication.StatusCode status = 12;
   */
  status?: Medication_StatusCode;

  /**
   * Manufacturer of the item
   *
   * @generated from field: google.fhir.r4.core.Reference manufacturer = 13;
   */
  manufacturer?: Reference;

  /**
   * powder | tablets | capsule +
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept form = 14;
   */
  form?: CodeableConcept;

  /**
   * Amount of drug in package
   *
   * @generated from field: google.fhir.r4.core.Ratio amount = 15;
   */
  amount?: Ratio;

  /**
   * @generated from field: repeated google.fhir.r4.core.Medication.Ingredient ingredient = 16;
   */
  ingredient: Medication_Ingredient[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Medication.Batch batch = 17;
   */
  batch?: Medication_Batch;

  constructor(data?: PartialMessage<Medication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Medication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "code", kind: "message", T: CodeableConcept },
    { no: 12, name: "status", kind: "message", T: Medication_StatusCode },
    { no: 13, name: "manufacturer", kind: "message", T: Reference },
    { no: 14, name: "form", kind: "message", T: CodeableConcept },
    { no: 15, name: "amount", kind: "message", T: Ratio },
    { no: 16, name: "ingredient", kind: "message", T: Medication_Ingredient, repeated: true },
    { no: 17, name: "batch", kind: "message", T: Medication_Batch },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Medication {
    return new Medication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Medication {
    return new Medication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Medication {
    return new Medication().fromJsonString(jsonString, options);
  }

  static equals(a: Medication | PlainMessage<Medication> | undefined, b: Medication | PlainMessage<Medication> | undefined): boolean {
    return proto3.util.equals(Medication, a, b);
  }
}

/**
 * active | inactive | entered-in-error
 *
 * @generated from message google.fhir.r4.core.Medication.StatusCode
 */
export class Medication_StatusCode extends Message<Medication_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.MedicationStatusCode.Value value = 1;
   */
  value = MedicationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Medication_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Medication.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(MedicationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Medication_StatusCode {
    return new Medication_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Medication_StatusCode {
    return new Medication_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Medication_StatusCode {
    return new Medication_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Medication_StatusCode | PlainMessage<Medication_StatusCode> | undefined, b: Medication_StatusCode | PlainMessage<Medication_StatusCode> | undefined): boolean {
    return proto3.util.equals(Medication_StatusCode, a, b);
  }
}

/**
 * Active or inactive ingredient
 *
 * @generated from message google.fhir.r4.core.Medication.Ingredient
 */
export class Medication_Ingredient extends Message<Medication_Ingredient> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Medication.Ingredient.ItemX item = 4;
   */
  item?: Medication_Ingredient_ItemX;

  /**
   * Active ingredient indicator
   *
   * @generated from field: google.fhir.r4.core.Boolean is_active = 5;
   */
  isActive?: Boolean;

  /**
   * Quantity of ingredient present
   *
   * @generated from field: google.fhir.r4.core.Ratio strength = 6;
   */
  strength?: Ratio;

  constructor(data?: PartialMessage<Medication_Ingredient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Medication.Ingredient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "item", kind: "message", T: Medication_Ingredient_ItemX },
    { no: 5, name: "is_active", kind: "message", T: Boolean },
    { no: 6, name: "strength", kind: "message", T: Ratio },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Medication_Ingredient {
    return new Medication_Ingredient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Medication_Ingredient {
    return new Medication_Ingredient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Medication_Ingredient {
    return new Medication_Ingredient().fromJsonString(jsonString, options);
  }

  static equals(a: Medication_Ingredient | PlainMessage<Medication_Ingredient> | undefined, b: Medication_Ingredient | PlainMessage<Medication_Ingredient> | undefined): boolean {
    return proto3.util.equals(Medication_Ingredient, a, b);
  }
}

/**
 * The actual ingredient or content
 *
 * @generated from message google.fhir.r4.core.Medication.Ingredient.ItemX
 */
export class Medication_Ingredient_ItemX extends Message<Medication_Ingredient_ItemX> {
  /**
   * @generated from oneof google.fhir.r4.core.Medication.Ingredient.ItemX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Medication_Ingredient_ItemX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Medication.Ingredient.ItemX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Medication_Ingredient_ItemX {
    return new Medication_Ingredient_ItemX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Medication_Ingredient_ItemX {
    return new Medication_Ingredient_ItemX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Medication_Ingredient_ItemX {
    return new Medication_Ingredient_ItemX().fromJsonString(jsonString, options);
  }

  static equals(a: Medication_Ingredient_ItemX | PlainMessage<Medication_Ingredient_ItemX> | undefined, b: Medication_Ingredient_ItemX | PlainMessage<Medication_Ingredient_ItemX> | undefined): boolean {
    return proto3.util.equals(Medication_Ingredient_ItemX, a, b);
  }
}

/**
 * Details about packaged medications
 *
 * @generated from message google.fhir.r4.core.Medication.Batch
 */
export class Medication_Batch extends Message<Medication_Batch> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier assigned to batch
   *
   * @generated from field: google.fhir.r4.core.String lot_number = 4;
   */
  lotNumber?: String;

  /**
   * When batch will expire
   *
   * @generated from field: google.fhir.r4.core.DateTime expiration_date = 5;
   */
  expirationDate?: DateTime;

  constructor(data?: PartialMessage<Medication_Batch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Medication.Batch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "lot_number", kind: "message", T: String },
    { no: 5, name: "expiration_date", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Medication_Batch {
    return new Medication_Batch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Medication_Batch {
    return new Medication_Batch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Medication_Batch {
    return new Medication_Batch().fromJsonString(jsonString, options);
  }

  static equals(a: Medication_Batch | PlainMessage<Medication_Batch> | undefined, b: Medication_Batch | PlainMessage<Medication_Batch> | undefined): boolean {
    return proto3.util.equals(Medication_Batch, a, b);
  }
}

