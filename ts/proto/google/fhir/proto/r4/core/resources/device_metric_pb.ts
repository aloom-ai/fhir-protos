//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/device_metric.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Extension, Id, Identifier, Instant, Meta, Narrative, Reference, String, Timing, Uri } from "../datatypes_pb.js";
import { DeviceMetricCalibrationStateCode_Value, DeviceMetricCalibrationTypeCode_Value, DeviceMetricCategoryCode_Value, DeviceMetricColorCode_Value, DeviceMetricOperationalStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for DeviceMetric.
 * Measurement, calculation or setting capability of a medical device.
 * See http://hl7.org/fhir/StructureDefinition/DeviceMetric
 *
 * @generated from message google.fhir.r4.core.DeviceMetric
 */
export class DeviceMetric extends Message<DeviceMetric> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Instance identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Identity of metric, for example Heart Rate or PEEP Setting
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 11;
   */
  type?: CodeableConcept;

  /**
   * Unit of Measure for the Metric
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept unit = 12;
   */
  unit?: CodeableConcept;

  /**
   * Describes the link to the source Device
   *
   * @generated from field: google.fhir.r4.core.Reference source = 13;
   */
  source?: Reference;

  /**
   * Describes the link to the parent Device
   *
   * @generated from field: google.fhir.r4.core.Reference parent = 14;
   */
  parent?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.DeviceMetric.OperationalStatusCode operational_status = 15;
   */
  operationalStatus?: DeviceMetric_OperationalStatusCode;

  /**
   * @generated from field: google.fhir.r4.core.DeviceMetric.ColorCode color = 16;
   */
  color?: DeviceMetric_ColorCode;

  /**
   * @generated from field: google.fhir.r4.core.DeviceMetric.CategoryCode category = 17;
   */
  category?: DeviceMetric_CategoryCode;

  /**
   * Describes the measurement repetition time
   *
   * @generated from field: google.fhir.r4.core.Timing measurement_period = 18;
   */
  measurementPeriod?: Timing;

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceMetric.Calibration calibration = 19;
   */
  calibration: DeviceMetric_Calibration[] = [];

  constructor(data?: PartialMessage<DeviceMetric>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "type", kind: "message", T: CodeableConcept },
    { no: 12, name: "unit", kind: "message", T: CodeableConcept },
    { no: 13, name: "source", kind: "message", T: Reference },
    { no: 14, name: "parent", kind: "message", T: Reference },
    { no: 15, name: "operational_status", kind: "message", T: DeviceMetric_OperationalStatusCode },
    { no: 16, name: "color", kind: "message", T: DeviceMetric_ColorCode },
    { no: 17, name: "category", kind: "message", T: DeviceMetric_CategoryCode },
    { no: 18, name: "measurement_period", kind: "message", T: Timing },
    { no: 19, name: "calibration", kind: "message", T: DeviceMetric_Calibration, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric {
    return new DeviceMetric().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric {
    return new DeviceMetric().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric {
    return new DeviceMetric().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric | PlainMessage<DeviceMetric> | undefined, b: DeviceMetric | PlainMessage<DeviceMetric> | undefined): boolean {
    return proto3.util.equals(DeviceMetric, a, b);
  }
}

/**
 * on | off | standby | entered-in-error
 *
 * @generated from message google.fhir.r4.core.DeviceMetric.OperationalStatusCode
 */
export class DeviceMetric_OperationalStatusCode extends Message<DeviceMetric_OperationalStatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceMetricOperationalStatusCode.Value value = 1;
   */
  value = DeviceMetricOperationalStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DeviceMetric_OperationalStatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric.OperationalStatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceMetricOperationalStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric_OperationalStatusCode {
    return new DeviceMetric_OperationalStatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric_OperationalStatusCode {
    return new DeviceMetric_OperationalStatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric_OperationalStatusCode {
    return new DeviceMetric_OperationalStatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric_OperationalStatusCode | PlainMessage<DeviceMetric_OperationalStatusCode> | undefined, b: DeviceMetric_OperationalStatusCode | PlainMessage<DeviceMetric_OperationalStatusCode> | undefined): boolean {
    return proto3.util.equals(DeviceMetric_OperationalStatusCode, a, b);
  }
}

/**
 * black | red | green | yellow | blue | magenta | cyan | white
 *
 * @generated from message google.fhir.r4.core.DeviceMetric.ColorCode
 */
export class DeviceMetric_ColorCode extends Message<DeviceMetric_ColorCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceMetricColorCode.Value value = 1;
   */
  value = DeviceMetricColorCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DeviceMetric_ColorCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric.ColorCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceMetricColorCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric_ColorCode {
    return new DeviceMetric_ColorCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric_ColorCode {
    return new DeviceMetric_ColorCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric_ColorCode {
    return new DeviceMetric_ColorCode().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric_ColorCode | PlainMessage<DeviceMetric_ColorCode> | undefined, b: DeviceMetric_ColorCode | PlainMessage<DeviceMetric_ColorCode> | undefined): boolean {
    return proto3.util.equals(DeviceMetric_ColorCode, a, b);
  }
}

/**
 * measurement | setting | calculation | unspecified
 *
 * @generated from message google.fhir.r4.core.DeviceMetric.CategoryCode
 */
export class DeviceMetric_CategoryCode extends Message<DeviceMetric_CategoryCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceMetricCategoryCode.Value value = 1;
   */
  value = DeviceMetricCategoryCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DeviceMetric_CategoryCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric.CategoryCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceMetricCategoryCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric_CategoryCode {
    return new DeviceMetric_CategoryCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric_CategoryCode {
    return new DeviceMetric_CategoryCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric_CategoryCode {
    return new DeviceMetric_CategoryCode().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric_CategoryCode | PlainMessage<DeviceMetric_CategoryCode> | undefined, b: DeviceMetric_CategoryCode | PlainMessage<DeviceMetric_CategoryCode> | undefined): boolean {
    return proto3.util.equals(DeviceMetric_CategoryCode, a, b);
  }
}

/**
 * Describes the calibrations that have been performed or that are required to
 * be performed
 *
 * @generated from message google.fhir.r4.core.DeviceMetric.Calibration
 */
export class DeviceMetric_Calibration extends Message<DeviceMetric_Calibration> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.DeviceMetric.Calibration.TypeCode type = 4;
   */
  type?: DeviceMetric_Calibration_TypeCode;

  /**
   * @generated from field: google.fhir.r4.core.DeviceMetric.Calibration.StateCode state = 5;
   */
  state?: DeviceMetric_Calibration_StateCode;

  /**
   * Describes the time last calibration has been performed
   *
   * @generated from field: google.fhir.r4.core.Instant time = 6;
   */
  time?: Instant;

  constructor(data?: PartialMessage<DeviceMetric_Calibration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric.Calibration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: DeviceMetric_Calibration_TypeCode },
    { no: 5, name: "state", kind: "message", T: DeviceMetric_Calibration_StateCode },
    { no: 6, name: "time", kind: "message", T: Instant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric_Calibration {
    return new DeviceMetric_Calibration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric_Calibration {
    return new DeviceMetric_Calibration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric_Calibration {
    return new DeviceMetric_Calibration().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric_Calibration | PlainMessage<DeviceMetric_Calibration> | undefined, b: DeviceMetric_Calibration | PlainMessage<DeviceMetric_Calibration> | undefined): boolean {
    return proto3.util.equals(DeviceMetric_Calibration, a, b);
  }
}

/**
 * unspecified | offset | gain | two-point
 *
 * @generated from message google.fhir.r4.core.DeviceMetric.Calibration.TypeCode
 */
export class DeviceMetric_Calibration_TypeCode extends Message<DeviceMetric_Calibration_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceMetricCalibrationTypeCode.Value value = 1;
   */
  value = DeviceMetricCalibrationTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DeviceMetric_Calibration_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric.Calibration.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceMetricCalibrationTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric_Calibration_TypeCode {
    return new DeviceMetric_Calibration_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric_Calibration_TypeCode {
    return new DeviceMetric_Calibration_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric_Calibration_TypeCode {
    return new DeviceMetric_Calibration_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric_Calibration_TypeCode | PlainMessage<DeviceMetric_Calibration_TypeCode> | undefined, b: DeviceMetric_Calibration_TypeCode | PlainMessage<DeviceMetric_Calibration_TypeCode> | undefined): boolean {
    return proto3.util.equals(DeviceMetric_Calibration_TypeCode, a, b);
  }
}

/**
 * not-calibrated | calibration-required | calibrated | unspecified
 *
 * @generated from message google.fhir.r4.core.DeviceMetric.Calibration.StateCode
 */
export class DeviceMetric_Calibration_StateCode extends Message<DeviceMetric_Calibration_StateCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceMetricCalibrationStateCode.Value value = 1;
   */
  value = DeviceMetricCalibrationStateCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DeviceMetric_Calibration_StateCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceMetric.Calibration.StateCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceMetricCalibrationStateCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceMetric_Calibration_StateCode {
    return new DeviceMetric_Calibration_StateCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceMetric_Calibration_StateCode {
    return new DeviceMetric_Calibration_StateCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceMetric_Calibration_StateCode {
    return new DeviceMetric_Calibration_StateCode().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceMetric_Calibration_StateCode | PlainMessage<DeviceMetric_Calibration_StateCode> | undefined, b: DeviceMetric_Calibration_StateCode | PlainMessage<DeviceMetric_Calibration_StateCode> | undefined): boolean {
    return proto3.util.equals(DeviceMetric_Calibration_StateCode, a, b);
  }
}

