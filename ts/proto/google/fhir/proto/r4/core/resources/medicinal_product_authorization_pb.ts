//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medicinal_product_authorization.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicinalProductAuthorization.
 * The regulatory authorization of a medicinal product.
 * See http://hl7.org/fhir/StructureDefinition/MedicinalProductAuthorization
 *
 * @generated from message google.fhir.r4.core.MedicinalProductAuthorization
 */
export class MedicinalProductAuthorization extends Message<MedicinalProductAuthorization> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier for the marketing authorization, as assigned by a
   * regulator
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * The medicinal product that is being authorized
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 11;
   */
  subject?: Reference;

  /**
   * The country in which the marketing authorization has been granted
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept country = 12;
   */
  country: CodeableConcept[] = [];

  /**
   * Jurisdiction within a country
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 13;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * The status of the marketing authorization
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 14;
   */
  status?: CodeableConcept;

  /**
   * The date at which the given status has become applicable
   *
   * @generated from field: google.fhir.r4.core.DateTime status_date = 15;
   */
  statusDate?: DateTime;

  /**
   * The date when a suspended the marketing or the marketing authorization of
   * the product is anticipated to be restored
   *
   * @generated from field: google.fhir.r4.core.DateTime restore_date = 16;
   */
  restoreDate?: DateTime;

  /**
   * The beginning of the time period in which the marketing authorization is in
   * the specific status shall be specified A complete date consisting of day,
   * month and year shall be specified using the ISO 8601 date format
   *
   * @generated from field: google.fhir.r4.core.Period validity_period = 17;
   */
  validityPeriod?: Period;

  /**
   * A period of time after authorization before generic product applicatiosn
   * can be submitted
   *
   * @generated from field: google.fhir.r4.core.Period data_exclusivity_period = 18;
   */
  dataExclusivityPeriod?: Period;

  /**
   * The date when the first authorization was granted by a Medicines Regulatory
   * Agency
   *
   * @generated from field: google.fhir.r4.core.DateTime date_of_first_authorization = 19;
   */
  dateOfFirstAuthorization?: DateTime;

  /**
   * Date of first marketing authorization for a company's new medicinal product
   * in any country in the World
   *
   * @generated from field: google.fhir.r4.core.DateTime international_birth_date = 20;
   */
  internationalBirthDate?: DateTime;

  /**
   * The legal framework against which this authorization is granted
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept legal_basis = 21;
   */
  legalBasis?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization jurisdictional_authorization = 22;
   */
  jurisdictionalAuthorization: MedicinalProductAuthorization_JurisdictionalAuthorization[] = [];

  /**
   * Marketing Authorization Holder
   *
   * @generated from field: google.fhir.r4.core.Reference holder = 23;
   */
  holder?: Reference;

  /**
   * Medicines Regulatory Agency
   *
   * @generated from field: google.fhir.r4.core.Reference regulator = 24;
   */
  regulator?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.MedicinalProductAuthorization.Procedure procedure = 25;
   */
  procedure?: MedicinalProductAuthorization_Procedure;

  constructor(data?: PartialMessage<MedicinalProductAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "subject", kind: "message", T: Reference },
    { no: 12, name: "country", kind: "message", T: CodeableConcept, repeated: true },
    { no: 13, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "status", kind: "message", T: CodeableConcept },
    { no: 15, name: "status_date", kind: "message", T: DateTime },
    { no: 16, name: "restore_date", kind: "message", T: DateTime },
    { no: 17, name: "validity_period", kind: "message", T: Period },
    { no: 18, name: "data_exclusivity_period", kind: "message", T: Period },
    { no: 19, name: "date_of_first_authorization", kind: "message", T: DateTime },
    { no: 20, name: "international_birth_date", kind: "message", T: DateTime },
    { no: 21, name: "legal_basis", kind: "message", T: CodeableConcept },
    { no: 22, name: "jurisdictional_authorization", kind: "message", T: MedicinalProductAuthorization_JurisdictionalAuthorization, repeated: true },
    { no: 23, name: "holder", kind: "message", T: Reference },
    { no: 24, name: "regulator", kind: "message", T: Reference },
    { no: 25, name: "procedure", kind: "message", T: MedicinalProductAuthorization_Procedure },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductAuthorization {
    return new MedicinalProductAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization {
    return new MedicinalProductAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization {
    return new MedicinalProductAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductAuthorization | PlainMessage<MedicinalProductAuthorization> | undefined, b: MedicinalProductAuthorization | PlainMessage<MedicinalProductAuthorization> | undefined): boolean {
    return proto3.util.equals(MedicinalProductAuthorization, a, b);
  }
}

/**
 * Authorization in areas within a country
 *
 * @generated from message google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization
 */
export class MedicinalProductAuthorization_JurisdictionalAuthorization extends Message<MedicinalProductAuthorization_JurisdictionalAuthorization> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The assigned number for the marketing authorization
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier: Identifier[] = [];

  /**
   * Country of authorization
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept country = 5;
   */
  country?: CodeableConcept;

  /**
   * Jurisdiction within a country
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 6;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * The legal status of supply in a jurisdiction or region
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept legal_status_of_supply = 7;
   */
  legalStatusOfSupply?: CodeableConcept;

  /**
   * The start and expected end date of the authorization
   *
   * @generated from field: google.fhir.r4.core.Period validity_period = 8;
   */
  validityPeriod?: Period;

  constructor(data?: PartialMessage<MedicinalProductAuthorization_JurisdictionalAuthorization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductAuthorization.JurisdictionalAuthorization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 5, name: "country", kind: "message", T: CodeableConcept },
    { no: 6, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 7, name: "legal_status_of_supply", kind: "message", T: CodeableConcept },
    { no: 8, name: "validity_period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductAuthorization_JurisdictionalAuthorization {
    return new MedicinalProductAuthorization_JurisdictionalAuthorization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization_JurisdictionalAuthorization {
    return new MedicinalProductAuthorization_JurisdictionalAuthorization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization_JurisdictionalAuthorization {
    return new MedicinalProductAuthorization_JurisdictionalAuthorization().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductAuthorization_JurisdictionalAuthorization | PlainMessage<MedicinalProductAuthorization_JurisdictionalAuthorization> | undefined, b: MedicinalProductAuthorization_JurisdictionalAuthorization | PlainMessage<MedicinalProductAuthorization_JurisdictionalAuthorization> | undefined): boolean {
    return proto3.util.equals(MedicinalProductAuthorization_JurisdictionalAuthorization, a, b);
  }
}

/**
 * The regulatory procedure for granting or amending a marketing authorization
 *
 * @generated from message google.fhir.r4.core.MedicinalProductAuthorization.Procedure
 */
export class MedicinalProductAuthorization_Procedure extends Message<MedicinalProductAuthorization_Procedure> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier for this procedure
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier?: Identifier;

  /**
   * Type of procedure
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX date = 6;
   */
  date?: MedicinalProductAuthorization_Procedure_DateX;

  /**
   * Applcations submitted to obtain a marketing authorization
   *
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductAuthorization.Procedure application = 7;
   */
  application: MedicinalProductAuthorization_Procedure[] = [];

  constructor(data?: PartialMessage<MedicinalProductAuthorization_Procedure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductAuthorization.Procedure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "date", kind: "message", T: MedicinalProductAuthorization_Procedure_DateX },
    { no: 7, name: "application", kind: "message", T: MedicinalProductAuthorization_Procedure, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductAuthorization_Procedure {
    return new MedicinalProductAuthorization_Procedure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization_Procedure {
    return new MedicinalProductAuthorization_Procedure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization_Procedure {
    return new MedicinalProductAuthorization_Procedure().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductAuthorization_Procedure | PlainMessage<MedicinalProductAuthorization_Procedure> | undefined, b: MedicinalProductAuthorization_Procedure | PlainMessage<MedicinalProductAuthorization_Procedure> | undefined): boolean {
    return proto3.util.equals(MedicinalProductAuthorization_Procedure, a, b);
  }
}

/**
 * Date of procedure
 *
 * @generated from message google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX
 */
export class MedicinalProductAuthorization_Procedure_DateX extends Message<MedicinalProductAuthorization_Procedure_DateX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 1;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 2;
     */
    value: DateTime;
    case: "dateTime";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicinalProductAuthorization_Procedure_DateX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductAuthorization.Procedure.DateX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 2, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductAuthorization_Procedure_DateX {
    return new MedicinalProductAuthorization_Procedure_DateX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization_Procedure_DateX {
    return new MedicinalProductAuthorization_Procedure_DateX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductAuthorization_Procedure_DateX {
    return new MedicinalProductAuthorization_Procedure_DateX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductAuthorization_Procedure_DateX | PlainMessage<MedicinalProductAuthorization_Procedure_DateX> | undefined, b: MedicinalProductAuthorization_Procedure_DateX | PlainMessage<MedicinalProductAuthorization_Procedure_DateX> | undefined): boolean {
    return proto3.util.equals(MedicinalProductAuthorization_Procedure_DateX, a, b);
  }
}

