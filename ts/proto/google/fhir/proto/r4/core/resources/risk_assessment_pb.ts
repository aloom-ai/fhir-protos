//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/risk_assessment.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, DateTime, Decimal, Extension, Id, Identifier, Meta, Narrative, Period, Range, Reference, String, Uri } from "../datatypes_pb.js";
import { ObservationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for RiskAssessment.
 * Potential outcomes for a subject with likelihood.
 * See http://hl7.org/fhir/StructureDefinition/RiskAssessment
 *
 * @generated from message google.fhir.r4.core.RiskAssessment
 */
export class RiskAssessment extends Message<RiskAssessment> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Unique identifier for the assessment
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Request fulfilled by this assessment
   *
   * @generated from field: google.fhir.r4.core.Reference based_on = 11;
   */
  basedOn?: Reference;

  /**
   * Part of this occurrence
   *
   * @generated from field: google.fhir.r4.core.Reference parent = 12;
   */
  parent?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.RiskAssessment.StatusCode status = 13;
   */
  status?: RiskAssessment_StatusCode;

  /**
   * Evaluation mechanism
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 14;
   */
  method?: CodeableConcept;

  /**
   * Type of assessment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 15;
   */
  code?: CodeableConcept;

  /**
   * Who/what does assessment apply to?
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 16;
   */
  subject?: Reference;

  /**
   * Where was assessment performed?
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 17;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.RiskAssessment.OccurrenceX occurrence = 18;
   */
  occurrence?: RiskAssessment_OccurrenceX;

  /**
   * Condition assessed
   *
   * @generated from field: google.fhir.r4.core.Reference condition = 19;
   */
  condition?: Reference;

  /**
   * Who did assessment?
   *
   * @generated from field: google.fhir.r4.core.Reference performer = 20;
   */
  performer?: Reference;

  /**
   * Why the assessment was necessary?
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 21;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * Why the assessment was necessary?
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reason_reference = 22;
   */
  reasonReference: Reference[] = [];

  /**
   * Information used in assessment
   *
   * @generated from field: repeated google.fhir.r4.core.Reference basis = 23;
   */
  basis: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.RiskAssessment.Prediction prediction = 24;
   */
  prediction: RiskAssessment_Prediction[] = [];

  /**
   * How to reduce risk
   *
   * @generated from field: google.fhir.r4.core.String mitigation = 25;
   */
  mitigation?: String;

  /**
   * Comments on the risk assessment
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 26;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<RiskAssessment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.RiskAssessment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "based_on", kind: "message", T: Reference },
    { no: 12, name: "parent", kind: "message", T: Reference },
    { no: 13, name: "status", kind: "message", T: RiskAssessment_StatusCode },
    { no: 14, name: "method", kind: "message", T: CodeableConcept },
    { no: 15, name: "code", kind: "message", T: CodeableConcept },
    { no: 16, name: "subject", kind: "message", T: Reference },
    { no: 17, name: "encounter", kind: "message", T: Reference },
    { no: 18, name: "occurrence", kind: "message", T: RiskAssessment_OccurrenceX },
    { no: 19, name: "condition", kind: "message", T: Reference },
    { no: 20, name: "performer", kind: "message", T: Reference },
    { no: 21, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 22, name: "reason_reference", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "basis", kind: "message", T: Reference, repeated: true },
    { no: 24, name: "prediction", kind: "message", T: RiskAssessment_Prediction, repeated: true },
    { no: 25, name: "mitigation", kind: "message", T: String },
    { no: 26, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskAssessment {
    return new RiskAssessment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskAssessment {
    return new RiskAssessment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskAssessment {
    return new RiskAssessment().fromJsonString(jsonString, options);
  }

  static equals(a: RiskAssessment | PlainMessage<RiskAssessment> | undefined, b: RiskAssessment | PlainMessage<RiskAssessment> | undefined): boolean {
    return proto3.util.equals(RiskAssessment, a, b);
  }
}

/**
 * registered | preliminary | final | amended +
 *
 * @generated from message google.fhir.r4.core.RiskAssessment.StatusCode
 */
export class RiskAssessment_StatusCode extends Message<RiskAssessment_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ObservationStatusCode.Value value = 1;
   */
  value = ObservationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<RiskAssessment_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.RiskAssessment.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ObservationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskAssessment_StatusCode {
    return new RiskAssessment_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskAssessment_StatusCode {
    return new RiskAssessment_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskAssessment_StatusCode {
    return new RiskAssessment_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: RiskAssessment_StatusCode | PlainMessage<RiskAssessment_StatusCode> | undefined, b: RiskAssessment_StatusCode | PlainMessage<RiskAssessment_StatusCode> | undefined): boolean {
    return proto3.util.equals(RiskAssessment_StatusCode, a, b);
  }
}

/**
 * When was assessment made?
 *
 * @generated from message google.fhir.r4.core.RiskAssessment.OccurrenceX
 */
export class RiskAssessment_OccurrenceX extends Message<RiskAssessment_OccurrenceX> {
  /**
   * @generated from oneof google.fhir.r4.core.RiskAssessment.OccurrenceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RiskAssessment_OccurrenceX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.RiskAssessment.OccurrenceX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskAssessment_OccurrenceX {
    return new RiskAssessment_OccurrenceX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskAssessment_OccurrenceX {
    return new RiskAssessment_OccurrenceX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskAssessment_OccurrenceX {
    return new RiskAssessment_OccurrenceX().fromJsonString(jsonString, options);
  }

  static equals(a: RiskAssessment_OccurrenceX | PlainMessage<RiskAssessment_OccurrenceX> | undefined, b: RiskAssessment_OccurrenceX | PlainMessage<RiskAssessment_OccurrenceX> | undefined): boolean {
    return proto3.util.equals(RiskAssessment_OccurrenceX, a, b);
  }
}

/**
 * Outcome predicted
 *
 * @generated from message google.fhir.r4.core.RiskAssessment.Prediction
 */
export class RiskAssessment_Prediction extends Message<RiskAssessment_Prediction> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Possible outcome for the subject
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept outcome = 4;
   */
  outcome?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.RiskAssessment.Prediction.ProbabilityX probability = 5;
   */
  probability?: RiskAssessment_Prediction_ProbabilityX;

  /**
   * Likelihood of specified outcome as a qualitative value
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept qualitative_risk = 6;
   */
  qualitativeRisk?: CodeableConcept;

  /**
   * Relative likelihood
   *
   * @generated from field: google.fhir.r4.core.Decimal relative_risk = 7;
   */
  relativeRisk?: Decimal;

  /**
   * @generated from field: google.fhir.r4.core.RiskAssessment.Prediction.WhenX when = 8;
   */
  when?: RiskAssessment_Prediction_WhenX;

  /**
   * Explanation of prediction
   *
   * @generated from field: google.fhir.r4.core.String rationale = 9;
   */
  rationale?: String;

  constructor(data?: PartialMessage<RiskAssessment_Prediction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.RiskAssessment.Prediction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "outcome", kind: "message", T: CodeableConcept },
    { no: 5, name: "probability", kind: "message", T: RiskAssessment_Prediction_ProbabilityX },
    { no: 6, name: "qualitative_risk", kind: "message", T: CodeableConcept },
    { no: 7, name: "relative_risk", kind: "message", T: Decimal },
    { no: 8, name: "when", kind: "message", T: RiskAssessment_Prediction_WhenX },
    { no: 9, name: "rationale", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskAssessment_Prediction {
    return new RiskAssessment_Prediction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskAssessment_Prediction {
    return new RiskAssessment_Prediction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskAssessment_Prediction {
    return new RiskAssessment_Prediction().fromJsonString(jsonString, options);
  }

  static equals(a: RiskAssessment_Prediction | PlainMessage<RiskAssessment_Prediction> | undefined, b: RiskAssessment_Prediction | PlainMessage<RiskAssessment_Prediction> | undefined): boolean {
    return proto3.util.equals(RiskAssessment_Prediction, a, b);
  }
}

/**
 * Likelihood of specified outcome
 *
 * @generated from message google.fhir.r4.core.RiskAssessment.Prediction.ProbabilityX
 */
export class RiskAssessment_Prediction_ProbabilityX extends Message<RiskAssessment_Prediction_ProbabilityX> {
  /**
   * @generated from oneof google.fhir.r4.core.RiskAssessment.Prediction.ProbabilityX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Decimal decimal = 1;
     */
    value: Decimal;
    case: "decimal";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 2;
     */
    value: Range;
    case: "range";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RiskAssessment_Prediction_ProbabilityX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.RiskAssessment.Prediction.ProbabilityX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "decimal", kind: "message", T: Decimal, oneof: "choice" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskAssessment_Prediction_ProbabilityX {
    return new RiskAssessment_Prediction_ProbabilityX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskAssessment_Prediction_ProbabilityX {
    return new RiskAssessment_Prediction_ProbabilityX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskAssessment_Prediction_ProbabilityX {
    return new RiskAssessment_Prediction_ProbabilityX().fromJsonString(jsonString, options);
  }

  static equals(a: RiskAssessment_Prediction_ProbabilityX | PlainMessage<RiskAssessment_Prediction_ProbabilityX> | undefined, b: RiskAssessment_Prediction_ProbabilityX | PlainMessage<RiskAssessment_Prediction_ProbabilityX> | undefined): boolean {
    return proto3.util.equals(RiskAssessment_Prediction_ProbabilityX, a, b);
  }
}

/**
 * Timeframe or age range
 *
 * @generated from message google.fhir.r4.core.RiskAssessment.Prediction.WhenX
 */
export class RiskAssessment_Prediction_WhenX extends Message<RiskAssessment_Prediction_WhenX> {
  /**
   * @generated from oneof google.fhir.r4.core.RiskAssessment.Prediction.WhenX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 1;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 2;
     */
    value: Range;
    case: "range";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RiskAssessment_Prediction_WhenX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.RiskAssessment.Prediction.WhenX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RiskAssessment_Prediction_WhenX {
    return new RiskAssessment_Prediction_WhenX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RiskAssessment_Prediction_WhenX {
    return new RiskAssessment_Prediction_WhenX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RiskAssessment_Prediction_WhenX {
    return new RiskAssessment_Prediction_WhenX().fromJsonString(jsonString, options);
  }

  static equals(a: RiskAssessment_Prediction_WhenX | PlainMessage<RiskAssessment_Prediction_WhenX> | undefined, b: RiskAssessment_Prediction_WhenX | PlainMessage<RiskAssessment_Prediction_WhenX> | undefined): boolean {
    return proto3.util.equals(RiskAssessment_Prediction_WhenX, a, b);
  }
}

