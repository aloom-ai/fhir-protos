//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance_reference_information.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Extension, Id, Identifier, Meta, Narrative, Quantity, Range, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for SubstanceReferenceInformation.
 * Todo.
 * See http://hl7.org/fhir/StructureDefinition/SubstanceReferenceInformation
 *
 * @generated from message google.fhir.r4.core.SubstanceReferenceInformation
 */
export class SubstanceReferenceInformation extends Message<SubstanceReferenceInformation> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.String comment = 10;
   */
  comment?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceReferenceInformation.Gene gene = 11;
   */
  gene: SubstanceReferenceInformation_Gene[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceReferenceInformation.GeneElement gene_element = 12;
   */
  geneElement: SubstanceReferenceInformation_GeneElement[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceReferenceInformation.Classification classification = 13;
   */
  classification: SubstanceReferenceInformation_Classification[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceReferenceInformation.Target target = 14;
   */
  target: SubstanceReferenceInformation_Target[] = [];

  constructor(data?: PartialMessage<SubstanceReferenceInformation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceReferenceInformation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "comment", kind: "message", T: String },
    { no: 11, name: "gene", kind: "message", T: SubstanceReferenceInformation_Gene, repeated: true },
    { no: 12, name: "gene_element", kind: "message", T: SubstanceReferenceInformation_GeneElement, repeated: true },
    { no: 13, name: "classification", kind: "message", T: SubstanceReferenceInformation_Classification, repeated: true },
    { no: 14, name: "target", kind: "message", T: SubstanceReferenceInformation_Target, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceReferenceInformation {
    return new SubstanceReferenceInformation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation {
    return new SubstanceReferenceInformation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation {
    return new SubstanceReferenceInformation().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceReferenceInformation | PlainMessage<SubstanceReferenceInformation> | undefined, b: SubstanceReferenceInformation | PlainMessage<SubstanceReferenceInformation> | undefined): boolean {
    return proto3.util.equals(SubstanceReferenceInformation, a, b);
  }
}

/**
 * Todo
 *
 * @generated from message google.fhir.r4.core.SubstanceReferenceInformation.Gene
 */
export class SubstanceReferenceInformation_Gene extends Message<SubstanceReferenceInformation_Gene> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept gene_sequence_origin = 4;
   */
  geneSequenceOrigin?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept gene = 5;
   */
  gene?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 6;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceReferenceInformation_Gene>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceReferenceInformation.Gene";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "gene_sequence_origin", kind: "message", T: CodeableConcept },
    { no: 5, name: "gene", kind: "message", T: CodeableConcept },
    { no: 6, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceReferenceInformation_Gene {
    return new SubstanceReferenceInformation_Gene().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Gene {
    return new SubstanceReferenceInformation_Gene().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Gene {
    return new SubstanceReferenceInformation_Gene().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceReferenceInformation_Gene | PlainMessage<SubstanceReferenceInformation_Gene> | undefined, b: SubstanceReferenceInformation_Gene | PlainMessage<SubstanceReferenceInformation_Gene> | undefined): boolean {
    return proto3.util.equals(SubstanceReferenceInformation_Gene, a, b);
  }
}

/**
 * Todo
 *
 * @generated from message google.fhir.r4.core.SubstanceReferenceInformation.GeneElement
 */
export class SubstanceReferenceInformation_GeneElement extends Message<SubstanceReferenceInformation_GeneElement> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.Identifier element = 5;
   */
  element?: Identifier;

  /**
   * Todo
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 6;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceReferenceInformation_GeneElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceReferenceInformation.GeneElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "element", kind: "message", T: Identifier },
    { no: 6, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceReferenceInformation_GeneElement {
    return new SubstanceReferenceInformation_GeneElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_GeneElement {
    return new SubstanceReferenceInformation_GeneElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_GeneElement {
    return new SubstanceReferenceInformation_GeneElement().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceReferenceInformation_GeneElement | PlainMessage<SubstanceReferenceInformation_GeneElement> | undefined, b: SubstanceReferenceInformation_GeneElement | PlainMessage<SubstanceReferenceInformation_GeneElement> | undefined): boolean {
    return proto3.util.equals(SubstanceReferenceInformation_GeneElement, a, b);
  }
}

/**
 * Todo
 *
 * @generated from message google.fhir.r4.core.SubstanceReferenceInformation.Classification
 */
export class SubstanceReferenceInformation_Classification extends Message<SubstanceReferenceInformation_Classification> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept domain = 4;
   */
  domain?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept classification = 5;
   */
  classification?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept subtype = 6;
   */
  subtype: CodeableConcept[] = [];

  /**
   * Todo
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 7;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceReferenceInformation_Classification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceReferenceInformation.Classification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "domain", kind: "message", T: CodeableConcept },
    { no: 5, name: "classification", kind: "message", T: CodeableConcept },
    { no: 6, name: "subtype", kind: "message", T: CodeableConcept, repeated: true },
    { no: 7, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceReferenceInformation_Classification {
    return new SubstanceReferenceInformation_Classification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Classification {
    return new SubstanceReferenceInformation_Classification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Classification {
    return new SubstanceReferenceInformation_Classification().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceReferenceInformation_Classification | PlainMessage<SubstanceReferenceInformation_Classification> | undefined, b: SubstanceReferenceInformation_Classification | PlainMessage<SubstanceReferenceInformation_Classification> | undefined): boolean {
    return proto3.util.equals(SubstanceReferenceInformation_Classification, a, b);
  }
}

/**
 * Todo
 *
 * @generated from message google.fhir.r4.core.SubstanceReferenceInformation.Target
 */
export class SubstanceReferenceInformation_Target extends Message<SubstanceReferenceInformation_Target> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.Identifier target = 4;
   */
  target?: Identifier;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept interaction = 6;
   */
  interaction?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept organism = 7;
   */
  organism?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept organism_type = 8;
   */
  organismType?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceReferenceInformation.Target.AmountX amount = 9;
   */
  amount?: SubstanceReferenceInformation_Target_AmountX;

  /**
   * Todo
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept amount_type = 10;
   */
  amountType?: CodeableConcept;

  /**
   * Todo
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 11;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceReferenceInformation_Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceReferenceInformation.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "target", kind: "message", T: Identifier },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "interaction", kind: "message", T: CodeableConcept },
    { no: 7, name: "organism", kind: "message", T: CodeableConcept },
    { no: 8, name: "organism_type", kind: "message", T: CodeableConcept },
    { no: 9, name: "amount", kind: "message", T: SubstanceReferenceInformation_Target_AmountX },
    { no: 10, name: "amount_type", kind: "message", T: CodeableConcept },
    { no: 11, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceReferenceInformation_Target {
    return new SubstanceReferenceInformation_Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Target {
    return new SubstanceReferenceInformation_Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Target {
    return new SubstanceReferenceInformation_Target().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceReferenceInformation_Target | PlainMessage<SubstanceReferenceInformation_Target> | undefined, b: SubstanceReferenceInformation_Target | PlainMessage<SubstanceReferenceInformation_Target> | undefined): boolean {
    return proto3.util.equals(SubstanceReferenceInformation_Target, a, b);
  }
}

/**
 * Todo
 *
 * @generated from message google.fhir.r4.core.SubstanceReferenceInformation.Target.AmountX
 */
export class SubstanceReferenceInformation_Target_AmountX extends Message<SubstanceReferenceInformation_Target_AmountX> {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceReferenceInformation.Target.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 2;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 3 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubstanceReferenceInformation_Target_AmountX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceReferenceInformation.Target.AmountX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 3, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceReferenceInformation_Target_AmountX {
    return new SubstanceReferenceInformation_Target_AmountX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Target_AmountX {
    return new SubstanceReferenceInformation_Target_AmountX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceReferenceInformation_Target_AmountX {
    return new SubstanceReferenceInformation_Target_AmountX().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceReferenceInformation_Target_AmountX | PlainMessage<SubstanceReferenceInformation_Target_AmountX> | undefined, b: SubstanceReferenceInformation_Target_AmountX | PlainMessage<SubstanceReferenceInformation_Target_AmountX> | undefined): boolean {
    return proto3.util.equals(SubstanceReferenceInformation_Target_AmountX, a, b);
  }
}

