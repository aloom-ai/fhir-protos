//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medicinal_product_indication.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Extension, Id, Meta, Narrative, Population, Quantity, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicinalProductIndication.
 * MedicinalProductIndication.
 * See http://hl7.org/fhir/StructureDefinition/MedicinalProductIndication
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIndication
 */
export class MedicinalProductIndication extends Message<MedicinalProductIndication> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * The medication for which this is an indication
   *
   * @generated from field: repeated google.fhir.r4.core.Reference subject = 10;
   */
  subject: Reference[] = [];

  /**
   * The disease, symptom or procedure that is the indication for treatment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept disease_symptom_procedure = 11;
   */
  diseaseSymptomProcedure?: CodeableConcept;

  /**
   * The status of the disease or symptom for which the indication applies
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept disease_status = 12;
   */
  diseaseStatus?: CodeableConcept;

  /**
   * Comorbidity (concurrent condition) or co-infection as part of the
   * indication
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept comorbidity = 13;
   */
  comorbidity: CodeableConcept[] = [];

  /**
   * The intended effect, aim or strategy to be achieved by the indication
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept intended_effect = 14;
   */
  intendedEffect?: CodeableConcept;

  /**
   * Timing or duration information as part of the indication
   *
   * @generated from field: google.fhir.r4.core.Quantity duration = 15;
   */
  duration?: Quantity;

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductIndication.OtherTherapy other_therapy = 16;
   */
  otherTherapy: MedicinalProductIndication_OtherTherapy[] = [];

  /**
   * Describe the undesirable effects of the medicinal product
   *
   * @generated from field: repeated google.fhir.r4.core.Reference undesirable_effect = 17;
   */
  undesirableEffect: Reference[] = [];

  /**
   * The population group to which this applies
   *
   * @generated from field: repeated google.fhir.r4.core.Population population = 18;
   */
  population: Population[] = [];

  constructor(data?: PartialMessage<MedicinalProductIndication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIndication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "subject", kind: "message", T: Reference, repeated: true },
    { no: 11, name: "disease_symptom_procedure", kind: "message", T: CodeableConcept },
    { no: 12, name: "disease_status", kind: "message", T: CodeableConcept },
    { no: 13, name: "comorbidity", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "intended_effect", kind: "message", T: CodeableConcept },
    { no: 15, name: "duration", kind: "message", T: Quantity },
    { no: 16, name: "other_therapy", kind: "message", T: MedicinalProductIndication_OtherTherapy, repeated: true },
    { no: 17, name: "undesirable_effect", kind: "message", T: Reference, repeated: true },
    { no: 18, name: "population", kind: "message", T: Population, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIndication {
    return new MedicinalProductIndication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIndication {
    return new MedicinalProductIndication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIndication {
    return new MedicinalProductIndication().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIndication | PlainMessage<MedicinalProductIndication> | undefined, b: MedicinalProductIndication | PlainMessage<MedicinalProductIndication> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIndication, a, b);
  }
}

/**
 * Information about the use of the medicinal product in relation to other
 * therapies described as part of the indication
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIndication.OtherTherapy
 */
export class MedicinalProductIndication_OtherTherapy extends Message<MedicinalProductIndication_OtherTherapy> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of relationship between the medicinal product indication or
   * contraindication and another therapy
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept therapy_relationship_type = 4;
   */
  therapyRelationshipType?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX medication = 5;
   */
  medication?: MedicinalProductIndication_OtherTherapy_MedicationX;

  constructor(data?: PartialMessage<MedicinalProductIndication_OtherTherapy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIndication.OtherTherapy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "therapy_relationship_type", kind: "message", T: CodeableConcept },
    { no: 5, name: "medication", kind: "message", T: MedicinalProductIndication_OtherTherapy_MedicationX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIndication_OtherTherapy {
    return new MedicinalProductIndication_OtherTherapy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIndication_OtherTherapy {
    return new MedicinalProductIndication_OtherTherapy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIndication_OtherTherapy {
    return new MedicinalProductIndication_OtherTherapy().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIndication_OtherTherapy | PlainMessage<MedicinalProductIndication_OtherTherapy> | undefined, b: MedicinalProductIndication_OtherTherapy | PlainMessage<MedicinalProductIndication_OtherTherapy> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIndication_OtherTherapy, a, b);
  }
}

/**
 * Reference to a specific medication (active substance, medicinal product
 * or class of products) as part of an indication or contraindication
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX
 */
export class MedicinalProductIndication_OtherTherapy_MedicationX extends Message<MedicinalProductIndication_OtherTherapy_MedicationX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicinalProductIndication_OtherTherapy_MedicationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIndication.OtherTherapy.MedicationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIndication_OtherTherapy_MedicationX {
    return new MedicinalProductIndication_OtherTherapy_MedicationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIndication_OtherTherapy_MedicationX {
    return new MedicinalProductIndication_OtherTherapy_MedicationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIndication_OtherTherapy_MedicationX {
    return new MedicinalProductIndication_OtherTherapy_MedicationX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIndication_OtherTherapy_MedicationX | PlainMessage<MedicinalProductIndication_OtherTherapy_MedicationX> | undefined, b: MedicinalProductIndication_OtherTherapy_MedicationX | PlainMessage<MedicinalProductIndication_OtherTherapy_MedicationX> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIndication_OtherTherapy_MedicationX, a, b);
  }
}

