//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/device_definition.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Boolean, Code, CodeableConcept, ContactPoint, Extension, Id, Identifier, Meta, Narrative, ProdCharacteristic, ProductShelfLife, Quantity, Reference, String, Uri } from "../datatypes_pb.js";
import { DeviceNameTypeCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for DeviceDefinition.
 * An instance of a medical-related component of a medical device.
 * See http://hl7.org/fhir/StructureDefinition/DeviceDefinition
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition
 */
export class DeviceDefinition extends Message<DeviceDefinition> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Instance identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceDefinition.UdiDeviceIdentifier udi_device_identifier = 11;
   */
  udiDeviceIdentifier: DeviceDefinition_UdiDeviceIdentifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.DeviceDefinition.ManufacturerX manufacturer = 12;
   */
  manufacturer?: DeviceDefinition_ManufacturerX;

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceDefinition.DeviceName device_name = 13;
   */
  deviceName: DeviceDefinition_DeviceName[] = [];

  /**
   * The model number for the device
   *
   * @generated from field: google.fhir.r4.core.String model_number = 14;
   */
  modelNumber?: String;

  /**
   * What kind of device or device system this is
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 15;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceDefinition.Specialization specialization = 16;
   */
  specialization: DeviceDefinition_Specialization[] = [];

  /**
   * Available versions
   *
   * @generated from field: repeated google.fhir.r4.core.String version = 17;
   */
  version: String[] = [];

  /**
   * Safety characteristics of the device
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept safety = 18;
   */
  safety: CodeableConcept[] = [];

  /**
   * Shelf Life and storage information
   *
   * @generated from field: repeated google.fhir.r4.core.ProductShelfLife shelf_life_storage = 19;
   */
  shelfLifeStorage: ProductShelfLife[] = [];

  /**
   * Dimensions, color etc.
   *
   * @generated from field: google.fhir.r4.core.ProdCharacteristic physical_characteristics = 20;
   */
  physicalCharacteristics?: ProdCharacteristic;

  /**
   * Language code for the human-readable text strings produced by the device
   * (all supported)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept language_code = 21;
   */
  languageCode: CodeableConcept[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceDefinition.Capability capability = 22;
   */
  capability: DeviceDefinition_Capability[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceDefinition.Property property = 23;
   */
  property: DeviceDefinition_Property[] = [];

  /**
   * Organization responsible for device
   *
   * @generated from field: google.fhir.r4.core.Reference owner = 24;
   */
  owner?: Reference;

  /**
   * Details for human/organization for support
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint contact = 25;
   */
  contact: ContactPoint[] = [];

  /**
   * Network address to contact device
   *
   * @generated from field: google.fhir.r4.core.Uri url = 26;
   */
  url?: Uri;

  /**
   * Access to on-line information
   *
   * @generated from field: google.fhir.r4.core.Uri online_information = 27;
   */
  onlineInformation?: Uri;

  /**
   * Device notes and comments
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 28;
   */
  note: Annotation[] = [];

  /**
   * The quantity of the device present in the packaging (e.g. the number of
   * devices present in a pack, or the number of devices in the same package of
   * the medicinal product)
   *
   * @generated from field: google.fhir.r4.core.Quantity quantity = 29;
   */
  quantity?: Quantity;

  /**
   * The parent device it can be part of
   *
   * @generated from field: google.fhir.r4.core.Reference parent_device = 30;
   */
  parentDevice?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.DeviceDefinition.Material material = 31;
   */
  material: DeviceDefinition_Material[] = [];

  constructor(data?: PartialMessage<DeviceDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "udi_device_identifier", kind: "message", T: DeviceDefinition_UdiDeviceIdentifier, repeated: true },
    { no: 12, name: "manufacturer", kind: "message", T: DeviceDefinition_ManufacturerX },
    { no: 13, name: "device_name", kind: "message", T: DeviceDefinition_DeviceName, repeated: true },
    { no: 14, name: "model_number", kind: "message", T: String },
    { no: 15, name: "type", kind: "message", T: CodeableConcept },
    { no: 16, name: "specialization", kind: "message", T: DeviceDefinition_Specialization, repeated: true },
    { no: 17, name: "version", kind: "message", T: String, repeated: true },
    { no: 18, name: "safety", kind: "message", T: CodeableConcept, repeated: true },
    { no: 19, name: "shelf_life_storage", kind: "message", T: ProductShelfLife, repeated: true },
    { no: 20, name: "physical_characteristics", kind: "message", T: ProdCharacteristic },
    { no: 21, name: "language_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 22, name: "capability", kind: "message", T: DeviceDefinition_Capability, repeated: true },
    { no: 23, name: "property", kind: "message", T: DeviceDefinition_Property, repeated: true },
    { no: 24, name: "owner", kind: "message", T: Reference },
    { no: 25, name: "contact", kind: "message", T: ContactPoint, repeated: true },
    { no: 26, name: "url", kind: "message", T: Uri },
    { no: 27, name: "online_information", kind: "message", T: Uri },
    { no: 28, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 29, name: "quantity", kind: "message", T: Quantity },
    { no: 30, name: "parent_device", kind: "message", T: Reference },
    { no: 31, name: "material", kind: "message", T: DeviceDefinition_Material, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition {
    return new DeviceDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition {
    return new DeviceDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition {
    return new DeviceDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition | PlainMessage<DeviceDefinition> | undefined, b: DeviceDefinition | PlainMessage<DeviceDefinition> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition, a, b);
  }
}

/**
 * Unique Device Identifier (UDI) Barcode string
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.UdiDeviceIdentifier
 */
export class DeviceDefinition_UdiDeviceIdentifier extends Message<DeviceDefinition_UdiDeviceIdentifier> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The identifier that is to be associated with every Device that references
   * this DeviceDefintiion for the issuer and jurisdication porvided in the
   * DeviceDefinition.udiDeviceIdentifier
   *
   * @generated from field: google.fhir.r4.core.String device_identifier = 4;
   */
  deviceIdentifier?: String;

  /**
   * The organization that assigns the identifier algorithm
   *
   * @generated from field: google.fhir.r4.core.Uri issuer = 5;
   */
  issuer?: Uri;

  /**
   * The jurisdiction to which the deviceIdentifier applies
   *
   * @generated from field: google.fhir.r4.core.Uri jurisdiction = 6;
   */
  jurisdiction?: Uri;

  constructor(data?: PartialMessage<DeviceDefinition_UdiDeviceIdentifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.UdiDeviceIdentifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "device_identifier", kind: "message", T: String },
    { no: 5, name: "issuer", kind: "message", T: Uri },
    { no: 6, name: "jurisdiction", kind: "message", T: Uri },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_UdiDeviceIdentifier {
    return new DeviceDefinition_UdiDeviceIdentifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_UdiDeviceIdentifier {
    return new DeviceDefinition_UdiDeviceIdentifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_UdiDeviceIdentifier {
    return new DeviceDefinition_UdiDeviceIdentifier().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_UdiDeviceIdentifier | PlainMessage<DeviceDefinition_UdiDeviceIdentifier> | undefined, b: DeviceDefinition_UdiDeviceIdentifier | PlainMessage<DeviceDefinition_UdiDeviceIdentifier> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_UdiDeviceIdentifier, a, b);
  }
}

/**
 * Name of device manufacturer
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.ManufacturerX
 */
export class DeviceDefinition_ManufacturerX extends Message<DeviceDefinition_ManufacturerX> {
  /**
   * @generated from oneof google.fhir.r4.core.DeviceDefinition.ManufacturerX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 1 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<DeviceDefinition_ManufacturerX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.ManufacturerX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_ManufacturerX {
    return new DeviceDefinition_ManufacturerX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_ManufacturerX {
    return new DeviceDefinition_ManufacturerX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_ManufacturerX {
    return new DeviceDefinition_ManufacturerX().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_ManufacturerX | PlainMessage<DeviceDefinition_ManufacturerX> | undefined, b: DeviceDefinition_ManufacturerX | PlainMessage<DeviceDefinition_ManufacturerX> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_ManufacturerX, a, b);
  }
}

/**
 * A name given to the device to identify it
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.DeviceName
 */
export class DeviceDefinition_DeviceName extends Message<DeviceDefinition_DeviceName> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The name of the device
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * @generated from field: google.fhir.r4.core.DeviceDefinition.DeviceName.TypeCode type = 5;
   */
  type?: DeviceDefinition_DeviceName_TypeCode;

  constructor(data?: PartialMessage<DeviceDefinition_DeviceName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.DeviceName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: DeviceDefinition_DeviceName_TypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_DeviceName {
    return new DeviceDefinition_DeviceName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_DeviceName {
    return new DeviceDefinition_DeviceName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_DeviceName {
    return new DeviceDefinition_DeviceName().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_DeviceName | PlainMessage<DeviceDefinition_DeviceName> | undefined, b: DeviceDefinition_DeviceName | PlainMessage<DeviceDefinition_DeviceName> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_DeviceName, a, b);
  }
}

/**
 * udi-label-name | user-friendly-name | patient-reported-name |
 * manufacturer-name | model-name | other
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.DeviceName.TypeCode
 */
export class DeviceDefinition_DeviceName_TypeCode extends Message<DeviceDefinition_DeviceName_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.DeviceNameTypeCode.Value value = 1;
   */
  value = DeviceNameTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<DeviceDefinition_DeviceName_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.DeviceName.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DeviceNameTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_DeviceName_TypeCode {
    return new DeviceDefinition_DeviceName_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_DeviceName_TypeCode {
    return new DeviceDefinition_DeviceName_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_DeviceName_TypeCode {
    return new DeviceDefinition_DeviceName_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_DeviceName_TypeCode | PlainMessage<DeviceDefinition_DeviceName_TypeCode> | undefined, b: DeviceDefinition_DeviceName_TypeCode | PlainMessage<DeviceDefinition_DeviceName_TypeCode> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_DeviceName_TypeCode, a, b);
  }
}

/**
 * The capabilities supported on a  device, the standards to which the device
 * conforms for a particular purpose, and used for the communication
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.Specialization
 */
export class DeviceDefinition_Specialization extends Message<DeviceDefinition_Specialization> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The standard that is used to operate and communicate
   *
   * @generated from field: google.fhir.r4.core.String system_type = 4;
   */
  systemType?: String;

  /**
   * The version of the standard that is used to operate and communicate
   *
   * @generated from field: google.fhir.r4.core.String version = 5;
   */
  version?: String;

  constructor(data?: PartialMessage<DeviceDefinition_Specialization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.Specialization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "system_type", kind: "message", T: String },
    { no: 5, name: "version", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_Specialization {
    return new DeviceDefinition_Specialization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_Specialization {
    return new DeviceDefinition_Specialization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_Specialization {
    return new DeviceDefinition_Specialization().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_Specialization | PlainMessage<DeviceDefinition_Specialization> | undefined, b: DeviceDefinition_Specialization | PlainMessage<DeviceDefinition_Specialization> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_Specialization, a, b);
  }
}

/**
 * Device capabilities
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.Capability
 */
export class DeviceDefinition_Capability extends Message<DeviceDefinition_Capability> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of capability
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Description of capability
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept description = 5;
   */
  description: CodeableConcept[] = [];

  constructor(data?: PartialMessage<DeviceDefinition_Capability>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.Capability";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "description", kind: "message", T: CodeableConcept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_Capability {
    return new DeviceDefinition_Capability().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_Capability {
    return new DeviceDefinition_Capability().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_Capability {
    return new DeviceDefinition_Capability().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_Capability | PlainMessage<DeviceDefinition_Capability> | undefined, b: DeviceDefinition_Capability | PlainMessage<DeviceDefinition_Capability> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_Capability, a, b);
  }
}

/**
 * The actual configuration settings of a device as it actually operates,
 * e.g., regulation status, time properties
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.Property
 */
export class DeviceDefinition_Property extends Message<DeviceDefinition_Property> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Code that specifies the property DeviceDefinitionPropetyCode (Extensible)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Property value as a quantity
   *
   * @generated from field: repeated google.fhir.r4.core.Quantity value_quantity = 5;
   */
  valueQuantity: Quantity[] = [];

  /**
   * Property value as a code, e.g., NTP4 (synced to NTP)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept value_code = 6;
   */
  valueCode: CodeableConcept[] = [];

  constructor(data?: PartialMessage<DeviceDefinition_Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "value_quantity", kind: "message", T: Quantity, repeated: true },
    { no: 6, name: "value_code", kind: "message", T: CodeableConcept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_Property {
    return new DeviceDefinition_Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_Property {
    return new DeviceDefinition_Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_Property {
    return new DeviceDefinition_Property().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_Property | PlainMessage<DeviceDefinition_Property> | undefined, b: DeviceDefinition_Property | PlainMessage<DeviceDefinition_Property> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_Property, a, b);
  }
}

/**
 * A substance used to create the material(s) of which the device is made
 *
 * @generated from message google.fhir.r4.core.DeviceDefinition.Material
 */
export class DeviceDefinition_Material extends Message<DeviceDefinition_Material> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept substance = 4;
   */
  substance?: CodeableConcept;

  /**
   * Indicates an alternative material of the device
   *
   * @generated from field: google.fhir.r4.core.Boolean alternate = 5;
   */
  alternate?: Boolean;

  /**
   * Whether the substance is a known or suspected allergen
   *
   * @generated from field: google.fhir.r4.core.Boolean allergenic_indicator = 6;
   */
  allergenicIndicator?: Boolean;

  constructor(data?: PartialMessage<DeviceDefinition_Material>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.DeviceDefinition.Material";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "substance", kind: "message", T: CodeableConcept },
    { no: 5, name: "alternate", kind: "message", T: Boolean },
    { no: 6, name: "allergenic_indicator", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeviceDefinition_Material {
    return new DeviceDefinition_Material().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeviceDefinition_Material {
    return new DeviceDefinition_Material().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeviceDefinition_Material {
    return new DeviceDefinition_Material().fromJsonString(jsonString, options);
  }

  static equals(a: DeviceDefinition_Material | PlainMessage<DeviceDefinition_Material> | undefined, b: DeviceDefinition_Material | PlainMessage<DeviceDefinition_Material> | undefined): boolean {
    return proto3.util.equals(DeviceDefinition_Material, a, b);
  }
}

