//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/appointment.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, DateTime, Extension, Id, Identifier, Instant, Meta, Narrative, Period, PositiveInt, Reference, String, UnsignedInt, Uri } from "../datatypes_pb.js";
import { AppointmentStatusCode_Value, ParticipantRequiredCode_Value, ParticipationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Appointment.
 * A booking of a healthcare event among patient(s), practitioner(s), related
 * person(s) and/or device(s) for a specific date/time. This may result in one
 * or more Encounter(s). See http://hl7.org/fhir/StructureDefinition/Appointment
 *
 * @generated from message google.fhir.r4.core.Appointment
 */
export class Appointment extends Message<Appointment> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External Ids for this item
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Appointment.StatusCode status = 11;
   */
  status?: Appointment_StatusCode;

  /**
   * The coded reason for the appointment being cancelled
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept cancelation_reason = 12;
   */
  cancelationReason?: CodeableConcept;

  /**
   * A broad categorization of the service that is to be performed during this
   * appointment
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept service_category = 13;
   */
  serviceCategory: CodeableConcept[] = [];

  /**
   * The specific service that is to be performed during this appointment
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept service_type = 14;
   */
  serviceType: CodeableConcept[] = [];

  /**
   * The specialty of a practitioner that would be required to perform the
   * service requested in this appointment
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept specialty = 15;
   */
  specialty: CodeableConcept[] = [];

  /**
   * The style of appointment or patient that has been booked in the slot (not
   * service type)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept appointment_type = 16;
   */
  appointmentType?: CodeableConcept;

  /**
   * Coded reason this appointment is scheduled
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 17;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * Reason the appointment is to take place (resource)
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reason_reference = 18;
   */
  reasonReference: Reference[] = [];

  /**
   * Used to make informed decisions if needing to re-prioritize
   *
   * @generated from field: google.fhir.r4.core.UnsignedInt priority = 19;
   */
  priority?: UnsignedInt;

  /**
   * Shown on a subject line in a meeting request, or appointment list
   *
   * @generated from field: google.fhir.r4.core.String description = 20;
   */
  description?: String;

  /**
   * Additional information to support the appointment
   *
   * @generated from field: repeated google.fhir.r4.core.Reference supporting_information = 21;
   */
  supportingInformation: Reference[] = [];

  /**
   * When appointment is to take place
   *
   * @generated from field: google.fhir.r4.core.Instant start = 22;
   */
  start?: Instant;

  /**
   * When appointment is to conclude
   *
   * @generated from field: google.fhir.r4.core.Instant end = 23;
   */
  end?: Instant;

  /**
   * Can be less than start/end (e.g. estimate)
   *
   * @generated from field: google.fhir.r4.core.PositiveInt minutes_duration = 24;
   */
  minutesDuration?: PositiveInt;

  /**
   * The slots that this appointment is filling
   *
   * @generated from field: repeated google.fhir.r4.core.Reference slot = 25;
   */
  slot: Reference[] = [];

  /**
   * The date that this appointment was initially created
   *
   * @generated from field: google.fhir.r4.core.DateTime created = 26;
   */
  created?: DateTime;

  /**
   * Additional comments
   *
   * @generated from field: google.fhir.r4.core.String comment = 27;
   */
  comment?: String;

  /**
   * Detailed information and instructions for the patient
   *
   * @generated from field: google.fhir.r4.core.String patient_instruction = 28;
   */
  patientInstruction?: String;

  /**
   * The service request this appointment is allocated to assess
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 29;
   */
  basedOn: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Appointment.Participant participant = 30;
   */
  participant: Appointment_Participant[] = [];

  /**
   * Potential date/time interval(s) requested to allocate the appointment
   * within
   *
   * @generated from field: repeated google.fhir.r4.core.Period requested_period = 31;
   */
  requestedPeriod: Period[] = [];

  constructor(data?: PartialMessage<Appointment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Appointment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: Appointment_StatusCode },
    { no: 12, name: "cancelation_reason", kind: "message", T: CodeableConcept },
    { no: 13, name: "service_category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "service_type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 15, name: "specialty", kind: "message", T: CodeableConcept, repeated: true },
    { no: 16, name: "appointment_type", kind: "message", T: CodeableConcept },
    { no: 17, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 18, name: "reason_reference", kind: "message", T: Reference, repeated: true },
    { no: 19, name: "priority", kind: "message", T: UnsignedInt },
    { no: 20, name: "description", kind: "message", T: String },
    { no: 21, name: "supporting_information", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "start", kind: "message", T: Instant },
    { no: 23, name: "end", kind: "message", T: Instant },
    { no: 24, name: "minutes_duration", kind: "message", T: PositiveInt },
    { no: 25, name: "slot", kind: "message", T: Reference, repeated: true },
    { no: 26, name: "created", kind: "message", T: DateTime },
    { no: 27, name: "comment", kind: "message", T: String },
    { no: 28, name: "patient_instruction", kind: "message", T: String },
    { no: 29, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 30, name: "participant", kind: "message", T: Appointment_Participant, repeated: true },
    { no: 31, name: "requested_period", kind: "message", T: Period, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Appointment {
    return new Appointment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Appointment {
    return new Appointment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Appointment {
    return new Appointment().fromJsonString(jsonString, options);
  }

  static equals(a: Appointment | PlainMessage<Appointment> | undefined, b: Appointment | PlainMessage<Appointment> | undefined): boolean {
    return proto3.util.equals(Appointment, a, b);
  }
}

/**
 * proposed | pending | booked | arrived | fulfilled | cancelled | noshow |
 * entered-in-error | checked-in | waitlist
 *
 * @generated from message google.fhir.r4.core.Appointment.StatusCode
 */
export class Appointment_StatusCode extends Message<Appointment_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.AppointmentStatusCode.Value value = 1;
   */
  value = AppointmentStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Appointment_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Appointment.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AppointmentStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Appointment_StatusCode {
    return new Appointment_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Appointment_StatusCode {
    return new Appointment_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Appointment_StatusCode {
    return new Appointment_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Appointment_StatusCode | PlainMessage<Appointment_StatusCode> | undefined, b: Appointment_StatusCode | PlainMessage<Appointment_StatusCode> | undefined): boolean {
    return proto3.util.equals(Appointment_StatusCode, a, b);
  }
}

/**
 * Participants involved in appointment
 *
 * @generated from message google.fhir.r4.core.Appointment.Participant
 */
export class Appointment_Participant extends Message<Appointment_Participant> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Role of participant in the appointment
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 4;
   */
  type: CodeableConcept[] = [];

  /**
   * Person, Location/HealthcareService or Device
   *
   * @generated from field: google.fhir.r4.core.Reference actor = 5;
   */
  actor?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Appointment.Participant.RequiredCode required = 6;
   */
  required?: Appointment_Participant_RequiredCode;

  /**
   * @generated from field: google.fhir.r4.core.Appointment.Participant.StatusCode status = 7;
   */
  status?: Appointment_Participant_StatusCode;

  /**
   * Participation period of the actor
   *
   * @generated from field: google.fhir.r4.core.Period period = 8;
   */
  period?: Period;

  constructor(data?: PartialMessage<Appointment_Participant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Appointment.Participant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 5, name: "actor", kind: "message", T: Reference },
    { no: 6, name: "required", kind: "message", T: Appointment_Participant_RequiredCode },
    { no: 7, name: "status", kind: "message", T: Appointment_Participant_StatusCode },
    { no: 8, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Appointment_Participant {
    return new Appointment_Participant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Appointment_Participant {
    return new Appointment_Participant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Appointment_Participant {
    return new Appointment_Participant().fromJsonString(jsonString, options);
  }

  static equals(a: Appointment_Participant | PlainMessage<Appointment_Participant> | undefined, b: Appointment_Participant | PlainMessage<Appointment_Participant> | undefined): boolean {
    return proto3.util.equals(Appointment_Participant, a, b);
  }
}

/**
 * required | optional | information-only
 *
 * @generated from message google.fhir.r4.core.Appointment.Participant.RequiredCode
 */
export class Appointment_Participant_RequiredCode extends Message<Appointment_Participant_RequiredCode> {
  /**
   * @generated from field: google.fhir.r4.core.ParticipantRequiredCode.Value value = 1;
   */
  value = ParticipantRequiredCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Appointment_Participant_RequiredCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Appointment.Participant.RequiredCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ParticipantRequiredCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Appointment_Participant_RequiredCode {
    return new Appointment_Participant_RequiredCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Appointment_Participant_RequiredCode {
    return new Appointment_Participant_RequiredCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Appointment_Participant_RequiredCode {
    return new Appointment_Participant_RequiredCode().fromJsonString(jsonString, options);
  }

  static equals(a: Appointment_Participant_RequiredCode | PlainMessage<Appointment_Participant_RequiredCode> | undefined, b: Appointment_Participant_RequiredCode | PlainMessage<Appointment_Participant_RequiredCode> | undefined): boolean {
    return proto3.util.equals(Appointment_Participant_RequiredCode, a, b);
  }
}

/**
 * accepted | declined | tentative | needs-action
 *
 * @generated from message google.fhir.r4.core.Appointment.Participant.StatusCode
 */
export class Appointment_Participant_StatusCode extends Message<Appointment_Participant_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ParticipationStatusCode.Value value = 1;
   */
  value = ParticipationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Appointment_Participant_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Appointment.Participant.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ParticipationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Appointment_Participant_StatusCode {
    return new Appointment_Participant_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Appointment_Participant_StatusCode {
    return new Appointment_Participant_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Appointment_Participant_StatusCode {
    return new Appointment_Participant_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Appointment_Participant_StatusCode | PlainMessage<Appointment_Participant_StatusCode> | undefined, b: Appointment_Participant_StatusCode | PlainMessage<Appointment_Participant_StatusCode> | undefined): boolean {
    return proto3.util.equals(Appointment_Participant_StatusCode, a, b);
  }
}

