//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/patient.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Address, Attachment, Boolean, Code, CodeableConcept, ContactPoint, Date, DateTime, Extension, HumanName, Id, Identifier, Integer, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";
import { AdministrativeGenderCode_Value, LinkTypeCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Patient.
 * Information about an individual or animal receiving health care services.
 * See http://hl7.org/fhir/StructureDefinition/Patient
 *
 * @generated from message google.fhir.r4.core.Patient
 */
export class Patient extends Message<Patient> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * An identifier for this patient
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Whether this patient's record is in active use
   *
   * @generated from field: google.fhir.r4.core.Boolean active = 11;
   */
  active?: Boolean;

  /**
   * A name associated with the patient
   *
   * @generated from field: repeated google.fhir.r4.core.HumanName name = 12;
   */
  name: HumanName[] = [];

  /**
   * A contact detail for the individual
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint telecom = 13;
   */
  telecom: ContactPoint[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Patient.GenderCode gender = 14;
   */
  gender?: Patient_GenderCode;

  /**
   * The date of birth for the individual
   *
   * @generated from field: google.fhir.r4.core.Date birth_date = 15;
   */
  birthDate?: Date;

  /**
   * @generated from field: google.fhir.r4.core.Patient.DeceasedX deceased = 16;
   */
  deceased?: Patient_DeceasedX;

  /**
   * An address for the individual
   *
   * @generated from field: repeated google.fhir.r4.core.Address address = 17;
   */
  address: Address[] = [];

  /**
   * Marital (civil) status of a patient
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept marital_status = 18;
   */
  maritalStatus?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Patient.MultipleBirthX multiple_birth = 19;
   */
  multipleBirth?: Patient_MultipleBirthX;

  /**
   * Image of the patient
   *
   * @generated from field: repeated google.fhir.r4.core.Attachment photo = 20;
   */
  photo: Attachment[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Patient.Contact contact = 21;
   */
  contact: Patient_Contact[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Patient.Communication communication = 22;
   */
  communication: Patient_Communication[] = [];

  /**
   * Patient's nominated primary care provider
   *
   * @generated from field: repeated google.fhir.r4.core.Reference general_practitioner = 23;
   */
  generalPractitioner: Reference[] = [];

  /**
   * Organization that is the custodian of the patient record
   *
   * @generated from field: google.fhir.r4.core.Reference managing_organization = 24;
   */
  managingOrganization?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.Patient.Link link = 25;
   */
  link: Patient_Link[] = [];

  constructor(data?: PartialMessage<Patient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "active", kind: "message", T: Boolean },
    { no: 12, name: "name", kind: "message", T: HumanName, repeated: true },
    { no: 13, name: "telecom", kind: "message", T: ContactPoint, repeated: true },
    { no: 14, name: "gender", kind: "message", T: Patient_GenderCode },
    { no: 15, name: "birth_date", kind: "message", T: Date },
    { no: 16, name: "deceased", kind: "message", T: Patient_DeceasedX },
    { no: 17, name: "address", kind: "message", T: Address, repeated: true },
    { no: 18, name: "marital_status", kind: "message", T: CodeableConcept },
    { no: 19, name: "multiple_birth", kind: "message", T: Patient_MultipleBirthX },
    { no: 20, name: "photo", kind: "message", T: Attachment, repeated: true },
    { no: 21, name: "contact", kind: "message", T: Patient_Contact, repeated: true },
    { no: 22, name: "communication", kind: "message", T: Patient_Communication, repeated: true },
    { no: 23, name: "general_practitioner", kind: "message", T: Reference, repeated: true },
    { no: 24, name: "managing_organization", kind: "message", T: Reference },
    { no: 25, name: "link", kind: "message", T: Patient_Link, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient {
    return new Patient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient {
    return new Patient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient {
    return new Patient().fromJsonString(jsonString, options);
  }

  static equals(a: Patient | PlainMessage<Patient> | undefined, b: Patient | PlainMessage<Patient> | undefined): boolean {
    return proto3.util.equals(Patient, a, b);
  }
}

/**
 * male | female | other | unknown
 *
 * @generated from message google.fhir.r4.core.Patient.GenderCode
 */
export class Patient_GenderCode extends Message<Patient_GenderCode> {
  /**
   * @generated from field: google.fhir.r4.core.AdministrativeGenderCode.Value value = 1;
   */
  value = AdministrativeGenderCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Patient_GenderCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.GenderCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AdministrativeGenderCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_GenderCode {
    return new Patient_GenderCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_GenderCode {
    return new Patient_GenderCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_GenderCode {
    return new Patient_GenderCode().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_GenderCode | PlainMessage<Patient_GenderCode> | undefined, b: Patient_GenderCode | PlainMessage<Patient_GenderCode> | undefined): boolean {
    return proto3.util.equals(Patient_GenderCode, a, b);
  }
}

/**
 * Indicates if the individual is deceased or not
 *
 * @generated from message google.fhir.r4.core.Patient.DeceasedX
 */
export class Patient_DeceasedX extends Message<Patient_DeceasedX> {
  /**
   * @generated from oneof google.fhir.r4.core.Patient.DeceasedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 1;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 2;
     */
    value: DateTime;
    case: "dateTime";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Patient_DeceasedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.DeceasedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 2, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_DeceasedX {
    return new Patient_DeceasedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_DeceasedX {
    return new Patient_DeceasedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_DeceasedX {
    return new Patient_DeceasedX().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_DeceasedX | PlainMessage<Patient_DeceasedX> | undefined, b: Patient_DeceasedX | PlainMessage<Patient_DeceasedX> | undefined): boolean {
    return proto3.util.equals(Patient_DeceasedX, a, b);
  }
}

/**
 * Whether patient is part of a multiple birth
 *
 * @generated from message google.fhir.r4.core.Patient.MultipleBirthX
 */
export class Patient_MultipleBirthX extends Message<Patient_MultipleBirthX> {
  /**
   * @generated from oneof google.fhir.r4.core.Patient.MultipleBirthX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 1;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Integer integer = 2;
     */
    value: Integer;
    case: "integer";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Patient_MultipleBirthX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.MultipleBirthX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 2, name: "integer", kind: "message", T: Integer, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_MultipleBirthX {
    return new Patient_MultipleBirthX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_MultipleBirthX {
    return new Patient_MultipleBirthX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_MultipleBirthX {
    return new Patient_MultipleBirthX().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_MultipleBirthX | PlainMessage<Patient_MultipleBirthX> | undefined, b: Patient_MultipleBirthX | PlainMessage<Patient_MultipleBirthX> | undefined): boolean {
    return proto3.util.equals(Patient_MultipleBirthX, a, b);
  }
}

/**
 * A contact party (e.g. guardian, partner, friend) for the patient
 *
 * @generated from message google.fhir.r4.core.Patient.Contact
 */
export class Patient_Contact extends Message<Patient_Contact> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The kind of relationship
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept relationship = 4;
   */
  relationship: CodeableConcept[] = [];

  /**
   * A name associated with the contact person
   *
   * @generated from field: google.fhir.r4.core.HumanName name = 5;
   */
  name?: HumanName;

  /**
   * A contact detail for the person
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint telecom = 6;
   */
  telecom: ContactPoint[] = [];

  /**
   * Address for the contact person
   *
   * @generated from field: google.fhir.r4.core.Address address = 7;
   */
  address?: Address;

  /**
   * @generated from field: google.fhir.r4.core.Patient.Contact.GenderCode gender = 8;
   */
  gender?: Patient_Contact_GenderCode;

  /**
   * Organization that is associated with the contact
   *
   * @generated from field: google.fhir.r4.core.Reference organization = 9;
   */
  organization?: Reference;

  /**
   * The period during which this contact person or organization is valid to
   * be contacted relating to this patient
   *
   * @generated from field: google.fhir.r4.core.Period period = 10;
   */
  period?: Period;

  constructor(data?: PartialMessage<Patient_Contact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.Contact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "relationship", kind: "message", T: CodeableConcept, repeated: true },
    { no: 5, name: "name", kind: "message", T: HumanName },
    { no: 6, name: "telecom", kind: "message", T: ContactPoint, repeated: true },
    { no: 7, name: "address", kind: "message", T: Address },
    { no: 8, name: "gender", kind: "message", T: Patient_Contact_GenderCode },
    { no: 9, name: "organization", kind: "message", T: Reference },
    { no: 10, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_Contact {
    return new Patient_Contact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_Contact {
    return new Patient_Contact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_Contact {
    return new Patient_Contact().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_Contact | PlainMessage<Patient_Contact> | undefined, b: Patient_Contact | PlainMessage<Patient_Contact> | undefined): boolean {
    return proto3.util.equals(Patient_Contact, a, b);
  }
}

/**
 * male | female | other | unknown
 *
 * @generated from message google.fhir.r4.core.Patient.Contact.GenderCode
 */
export class Patient_Contact_GenderCode extends Message<Patient_Contact_GenderCode> {
  /**
   * @generated from field: google.fhir.r4.core.AdministrativeGenderCode.Value value = 1;
   */
  value = AdministrativeGenderCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Patient_Contact_GenderCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.Contact.GenderCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AdministrativeGenderCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_Contact_GenderCode {
    return new Patient_Contact_GenderCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_Contact_GenderCode {
    return new Patient_Contact_GenderCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_Contact_GenderCode {
    return new Patient_Contact_GenderCode().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_Contact_GenderCode | PlainMessage<Patient_Contact_GenderCode> | undefined, b: Patient_Contact_GenderCode | PlainMessage<Patient_Contact_GenderCode> | undefined): boolean {
    return proto3.util.equals(Patient_Contact_GenderCode, a, b);
  }
}

/**
 * A language which may be used to communicate with the patient about his or
 * her health
 *
 * @generated from message google.fhir.r4.core.Patient.Communication
 */
export class Patient_Communication extends Message<Patient_Communication> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The language which can be used to communicate with the patient about his
   * or her health
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept language = 4;
   */
  language?: CodeableConcept;

  /**
   * Language preference indicator
   *
   * @generated from field: google.fhir.r4.core.Boolean preferred = 5;
   */
  preferred?: Boolean;

  constructor(data?: PartialMessage<Patient_Communication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.Communication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "language", kind: "message", T: CodeableConcept },
    { no: 5, name: "preferred", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_Communication {
    return new Patient_Communication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_Communication {
    return new Patient_Communication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_Communication {
    return new Patient_Communication().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_Communication | PlainMessage<Patient_Communication> | undefined, b: Patient_Communication | PlainMessage<Patient_Communication> | undefined): boolean {
    return proto3.util.equals(Patient_Communication, a, b);
  }
}

/**
 * Link to another patient resource that concerns the same actual person
 *
 * @generated from message google.fhir.r4.core.Patient.Link
 */
export class Patient_Link extends Message<Patient_Link> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The other patient or related person resource that the link refers to
   *
   * @generated from field: google.fhir.r4.core.Reference other = 4;
   */
  other?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Patient.Link.TypeCode type = 5;
   */
  type?: Patient_Link_TypeCode;

  constructor(data?: PartialMessage<Patient_Link>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.Link";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "other", kind: "message", T: Reference },
    { no: 5, name: "type", kind: "message", T: Patient_Link_TypeCode },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_Link {
    return new Patient_Link().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_Link {
    return new Patient_Link().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_Link {
    return new Patient_Link().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_Link | PlainMessage<Patient_Link> | undefined, b: Patient_Link | PlainMessage<Patient_Link> | undefined): boolean {
    return proto3.util.equals(Patient_Link, a, b);
  }
}

/**
 * replaced-by | replaces | refer | seealso
 *
 * @generated from message google.fhir.r4.core.Patient.Link.TypeCode
 */
export class Patient_Link_TypeCode extends Message<Patient_Link_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.LinkTypeCode.Value value = 1;
   */
  value = LinkTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Patient_Link_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Patient.Link.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(LinkTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Patient_Link_TypeCode {
    return new Patient_Link_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Patient_Link_TypeCode {
    return new Patient_Link_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Patient_Link_TypeCode {
    return new Patient_Link_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: Patient_Link_TypeCode | PlainMessage<Patient_Link_TypeCode> | undefined, b: Patient_Link_TypeCode | PlainMessage<Patient_Link_TypeCode> | undefined): boolean {
    return proto3.util.equals(Patient_Link_TypeCode, a, b);
  }
}

