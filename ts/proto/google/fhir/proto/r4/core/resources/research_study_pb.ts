//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/research_study.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, ContactDetail, Extension, Id, Identifier, Markdown, Meta, Narrative, Period, Reference, RelatedArtifact, String, Uri } from "../datatypes_pb.js";
import { ResearchStudyStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for ResearchStudy.
 * Investigation to increase healthcare-related patient-independent knowledge.
 * See http://hl7.org/fhir/StructureDefinition/ResearchStudy
 *
 * @generated from message google.fhir.r4.core.ResearchStudy
 */
export class ResearchStudy extends Message<ResearchStudy> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for study
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Name for this study
   *
   * @generated from field: google.fhir.r4.core.String title = 11;
   */
  title?: String;

  /**
   * Steps followed in executing study
   *
   * @generated from field: repeated google.fhir.r4.core.Reference protocol = 12;
   */
  protocol: Reference[] = [];

  /**
   * Part of larger study
   *
   * @generated from field: repeated google.fhir.r4.core.Reference part_of = 13;
   */
  partOf: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ResearchStudy.StatusCode status = 14;
   */
  status?: ResearchStudy_StatusCode;

  /**
   * treatment | prevention | diagnostic | supportive-care | screening |
   * health-services-research | basic-science | device-feasibility
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept primary_purpose_type = 15;
   */
  primaryPurposeType?: CodeableConcept;

  /**
   * n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3
   * | phase-3 | phase-4
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept phase = 16;
   */
  phase?: CodeableConcept;

  /**
   * Classifications for the study
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 17;
   */
  category: CodeableConcept[] = [];

  /**
   * Drugs, devices, etc. under study
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept focus = 18;
   */
  focus: CodeableConcept[] = [];

  /**
   * Condition being studied
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept condition = 19;
   */
  condition: CodeableConcept[] = [];

  /**
   * Contact details for the study
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail contact = 20;
   */
  contact: ContactDetail[] = [];

  /**
   * References and dependencies
   *
   * @generated from field: repeated google.fhir.r4.core.RelatedArtifact related_artifact = 21;
   */
  relatedArtifact: RelatedArtifact[] = [];

  /**
   * Used to search for the study
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept keyword = 22;
   */
  keyword: CodeableConcept[] = [];

  /**
   * Geographic region(s) for study
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept location = 23;
   */
  location: CodeableConcept[] = [];

  /**
   * What this is study doing
   *
   * @generated from field: google.fhir.r4.core.Markdown description = 24;
   */
  description?: Markdown;

  /**
   * Inclusion & exclusion criteria
   *
   * @generated from field: repeated google.fhir.r4.core.Reference enrollment = 25;
   */
  enrollment: Reference[] = [];

  /**
   * When the study began and ended
   *
   * @generated from field: google.fhir.r4.core.Period period = 26;
   */
  period?: Period;

  /**
   * Organization that initiates and is legally responsible for the study
   *
   * @generated from field: google.fhir.r4.core.Reference sponsor = 27;
   */
  sponsor?: Reference;

  /**
   * Researcher who oversees multiple aspects of the study
   *
   * @generated from field: google.fhir.r4.core.Reference principal_investigator = 28;
   */
  principalInvestigator?: Reference;

  /**
   * Facility where study activities are conducted
   *
   * @generated from field: repeated google.fhir.r4.core.Reference site = 29;
   */
  site: Reference[] = [];

  /**
   * accrual-goal-met | closed-due-to-toxicity |
   * closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept reason_stopped = 30;
   */
  reasonStopped?: CodeableConcept;

  /**
   * Comments made about the study
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 31;
   */
  note: Annotation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ResearchStudy.Arm arm = 32;
   */
  arm: ResearchStudy_Arm[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ResearchStudy.Objective objective = 33;
   */
  objective: ResearchStudy_Objective[] = [];

  constructor(data?: PartialMessage<ResearchStudy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ResearchStudy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "title", kind: "message", T: String },
    { no: 12, name: "protocol", kind: "message", T: Reference, repeated: true },
    { no: 13, name: "part_of", kind: "message", T: Reference, repeated: true },
    { no: 14, name: "status", kind: "message", T: ResearchStudy_StatusCode },
    { no: 15, name: "primary_purpose_type", kind: "message", T: CodeableConcept },
    { no: 16, name: "phase", kind: "message", T: CodeableConcept },
    { no: 17, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 18, name: "focus", kind: "message", T: CodeableConcept, repeated: true },
    { no: 19, name: "condition", kind: "message", T: CodeableConcept, repeated: true },
    { no: 20, name: "contact", kind: "message", T: ContactDetail, repeated: true },
    { no: 21, name: "related_artifact", kind: "message", T: RelatedArtifact, repeated: true },
    { no: 22, name: "keyword", kind: "message", T: CodeableConcept, repeated: true },
    { no: 23, name: "location", kind: "message", T: CodeableConcept, repeated: true },
    { no: 24, name: "description", kind: "message", T: Markdown },
    { no: 25, name: "enrollment", kind: "message", T: Reference, repeated: true },
    { no: 26, name: "period", kind: "message", T: Period },
    { no: 27, name: "sponsor", kind: "message", T: Reference },
    { no: 28, name: "principal_investigator", kind: "message", T: Reference },
    { no: 29, name: "site", kind: "message", T: Reference, repeated: true },
    { no: 30, name: "reason_stopped", kind: "message", T: CodeableConcept },
    { no: 31, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 32, name: "arm", kind: "message", T: ResearchStudy_Arm, repeated: true },
    { no: 33, name: "objective", kind: "message", T: ResearchStudy_Objective, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResearchStudy {
    return new ResearchStudy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResearchStudy {
    return new ResearchStudy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResearchStudy {
    return new ResearchStudy().fromJsonString(jsonString, options);
  }

  static equals(a: ResearchStudy | PlainMessage<ResearchStudy> | undefined, b: ResearchStudy | PlainMessage<ResearchStudy> | undefined): boolean {
    return proto3.util.equals(ResearchStudy, a, b);
  }
}

/**
 * active | administratively-completed | approved | closed-to-accrual |
 * closed-to-accrual-and-intervention | completed | disapproved | in-review |
 * temporarily-closed-to-accrual |
 * temporarily-closed-to-accrual-and-intervention | withdrawn
 *
 * @generated from message google.fhir.r4.core.ResearchStudy.StatusCode
 */
export class ResearchStudy_StatusCode extends Message<ResearchStudy_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ResearchStudyStatusCode.Value value = 1;
   */
  value = ResearchStudyStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ResearchStudy_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ResearchStudy.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ResearchStudyStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResearchStudy_StatusCode {
    return new ResearchStudy_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResearchStudy_StatusCode {
    return new ResearchStudy_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResearchStudy_StatusCode {
    return new ResearchStudy_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: ResearchStudy_StatusCode | PlainMessage<ResearchStudy_StatusCode> | undefined, b: ResearchStudy_StatusCode | PlainMessage<ResearchStudy_StatusCode> | undefined): boolean {
    return proto3.util.equals(ResearchStudy_StatusCode, a, b);
  }
}

/**
 * Defined path through the study for a subject
 *
 * @generated from message google.fhir.r4.core.ResearchStudy.Arm
 */
export class ResearchStudy_Arm extends Message<ResearchStudy_Arm> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Label for study arm
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * Categorization of study arm
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Short explanation of study path
   *
   * @generated from field: google.fhir.r4.core.String description = 6;
   */
  description?: String;

  constructor(data?: PartialMessage<ResearchStudy_Arm>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ResearchStudy.Arm";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "description", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResearchStudy_Arm {
    return new ResearchStudy_Arm().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResearchStudy_Arm {
    return new ResearchStudy_Arm().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResearchStudy_Arm {
    return new ResearchStudy_Arm().fromJsonString(jsonString, options);
  }

  static equals(a: ResearchStudy_Arm | PlainMessage<ResearchStudy_Arm> | undefined, b: ResearchStudy_Arm | PlainMessage<ResearchStudy_Arm> | undefined): boolean {
    return proto3.util.equals(ResearchStudy_Arm, a, b);
  }
}

/**
 * A goal for the study
 *
 * @generated from message google.fhir.r4.core.ResearchStudy.Objective
 */
export class ResearchStudy_Objective extends Message<ResearchStudy_Objective> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Label for the objective
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * primary | secondary | exploratory
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  constructor(data?: PartialMessage<ResearchStudy_Objective>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ResearchStudy.Objective";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResearchStudy_Objective {
    return new ResearchStudy_Objective().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResearchStudy_Objective {
    return new ResearchStudy_Objective().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResearchStudy_Objective {
    return new ResearchStudy_Objective().fromJsonString(jsonString, options);
  }

  static equals(a: ResearchStudy_Objective | PlainMessage<ResearchStudy_Objective> | undefined, b: ResearchStudy_Objective | PlainMessage<ResearchStudy_Objective> | undefined): boolean {
    return proto3.util.equals(ResearchStudy_Objective, a, b);
  }
}

