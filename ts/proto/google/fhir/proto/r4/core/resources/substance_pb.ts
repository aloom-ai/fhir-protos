//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Ratio, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { FHIRSubstanceStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Substance.
 * A homogeneous material with a definite composition.
 * See http://hl7.org/fhir/StructureDefinition/Substance
 *
 * @generated from message google.fhir.r4.core.Substance
 */
export class Substance extends Message<Substance> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Unique identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Substance.StatusCode status = 11;
   */
  status?: Substance_StatusCode;

  /**
   * What class/type of substance this is
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 12;
   */
  category: CodeableConcept[] = [];

  /**
   * What substance this is
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 13;
   */
  code?: CodeableConcept;

  /**
   * Textual description of the substance, comments
   *
   * @generated from field: google.fhir.r4.core.String description = 14;
   */
  description?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Substance.Instance instance = 15;
   */
  instance: Substance_Instance[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Substance.Ingredient ingredient = 16;
   */
  ingredient: Substance_Ingredient[] = [];

  constructor(data?: PartialMessage<Substance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Substance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: Substance_StatusCode },
    { no: 12, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 13, name: "code", kind: "message", T: CodeableConcept },
    { no: 14, name: "description", kind: "message", T: String },
    { no: 15, name: "instance", kind: "message", T: Substance_Instance, repeated: true },
    { no: 16, name: "ingredient", kind: "message", T: Substance_Ingredient, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Substance {
    return new Substance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Substance {
    return new Substance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Substance {
    return new Substance().fromJsonString(jsonString, options);
  }

  static equals(a: Substance | PlainMessage<Substance> | undefined, b: Substance | PlainMessage<Substance> | undefined): boolean {
    return proto3.util.equals(Substance, a, b);
  }
}

/**
 * active | inactive | entered-in-error
 *
 * @generated from message google.fhir.r4.core.Substance.StatusCode
 */
export class Substance_StatusCode extends Message<Substance_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FHIRSubstanceStatusCode.Value value = 1;
   */
  value = FHIRSubstanceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Substance_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Substance.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FHIRSubstanceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Substance_StatusCode {
    return new Substance_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Substance_StatusCode {
    return new Substance_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Substance_StatusCode {
    return new Substance_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Substance_StatusCode | PlainMessage<Substance_StatusCode> | undefined, b: Substance_StatusCode | PlainMessage<Substance_StatusCode> | undefined): boolean {
    return proto3.util.equals(Substance_StatusCode, a, b);
  }
}

/**
 * If this describes a specific package/container of the substance
 *
 * @generated from message google.fhir.r4.core.Substance.Instance
 */
export class Substance_Instance extends Message<Substance_Instance> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier of the package/container
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier?: Identifier;

  /**
   * When no longer valid to use
   *
   * @generated from field: google.fhir.r4.core.DateTime expiry = 5;
   */
  expiry?: DateTime;

  /**
   * Amount of substance in the package
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 6;
   */
  quantity?: SimpleQuantity;

  constructor(data?: PartialMessage<Substance_Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Substance.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier },
    { no: 5, name: "expiry", kind: "message", T: DateTime },
    { no: 6, name: "quantity", kind: "message", T: SimpleQuantity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Substance_Instance {
    return new Substance_Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Substance_Instance {
    return new Substance_Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Substance_Instance {
    return new Substance_Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Substance_Instance | PlainMessage<Substance_Instance> | undefined, b: Substance_Instance | PlainMessage<Substance_Instance> | undefined): boolean {
    return proto3.util.equals(Substance_Instance, a, b);
  }
}

/**
 * Composition information about the substance
 *
 * @generated from message google.fhir.r4.core.Substance.Ingredient
 */
export class Substance_Ingredient extends Message<Substance_Ingredient> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Optional amount (concentration)
   *
   * @generated from field: google.fhir.r4.core.Ratio quantity = 4;
   */
  quantity?: Ratio;

  /**
   * @generated from field: google.fhir.r4.core.Substance.Ingredient.SubstanceX substance = 5;
   */
  substance?: Substance_Ingredient_SubstanceX;

  constructor(data?: PartialMessage<Substance_Ingredient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Substance.Ingredient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "quantity", kind: "message", T: Ratio },
    { no: 5, name: "substance", kind: "message", T: Substance_Ingredient_SubstanceX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Substance_Ingredient {
    return new Substance_Ingredient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Substance_Ingredient {
    return new Substance_Ingredient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Substance_Ingredient {
    return new Substance_Ingredient().fromJsonString(jsonString, options);
  }

  static equals(a: Substance_Ingredient | PlainMessage<Substance_Ingredient> | undefined, b: Substance_Ingredient | PlainMessage<Substance_Ingredient> | undefined): boolean {
    return proto3.util.equals(Substance_Ingredient, a, b);
  }
}

/**
 * A component of the substance
 *
 * @generated from message google.fhir.r4.core.Substance.Ingredient.SubstanceX
 */
export class Substance_Ingredient_SubstanceX extends Message<Substance_Ingredient_SubstanceX> {
  /**
   * @generated from oneof google.fhir.r4.core.Substance.Ingredient.SubstanceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Substance_Ingredient_SubstanceX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Substance.Ingredient.SubstanceX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Substance_Ingredient_SubstanceX {
    return new Substance_Ingredient_SubstanceX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Substance_Ingredient_SubstanceX {
    return new Substance_Ingredient_SubstanceX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Substance_Ingredient_SubstanceX {
    return new Substance_Ingredient_SubstanceX().fromJsonString(jsonString, options);
  }

  static equals(a: Substance_Ingredient_SubstanceX | PlainMessage<Substance_Ingredient_SubstanceX> | undefined, b: Substance_Ingredient_SubstanceX | PlainMessage<Substance_Ingredient_SubstanceX> | undefined): boolean {
    return proto3.util.equals(Substance_Ingredient_SubstanceX, a, b);
  }
}

