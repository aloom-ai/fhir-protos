//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/list.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Boolean, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Reference, String, Uri } from "../datatypes_pb.js";
import { ListModeCode_Value, ListStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for List.
 * A list is a curated collection of resources.
 * See http://hl7.org/fhir/StructureDefinition/List
 *
 * @generated from message google.fhir.r4.core.List
 */
export class List extends Message<List> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.List.StatusCode status = 11;
   */
  status?: List_StatusCode;

  /**
   * @generated from field: google.fhir.r4.core.List.ModeCode mode = 12;
   */
  mode?: List_ModeCode;

  /**
   * Descriptive name for the list
   *
   * @generated from field: google.fhir.r4.core.String title = 13;
   */
  title?: String;

  /**
   * What the purpose of this list is
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 14;
   */
  code?: CodeableConcept;

  /**
   * If all resources have the same subject
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 15;
   */
  subject?: Reference;

  /**
   * Context in which list created
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 16;
   */
  encounter?: Reference;

  /**
   * When the list was prepared
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 17;
   */
  date?: DateTime;

  /**
   * Who and/or what defined the list contents (aka Author)
   *
   * @generated from field: google.fhir.r4.core.Reference source = 18;
   */
  source?: Reference;

  /**
   * What order the list has
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept ordered_by = 19;
   */
  orderedBy?: CodeableConcept;

  /**
   * Comments about the list
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 20;
   */
  note: Annotation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.List.Entry entry = 21;
   */
  entry: List_Entry[] = [];

  /**
   * Why list is empty
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept empty_reason = 22;
   */
  emptyReason?: CodeableConcept;

  constructor(data?: PartialMessage<List>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.List";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: List_StatusCode },
    { no: 12, name: "mode", kind: "message", T: List_ModeCode },
    { no: 13, name: "title", kind: "message", T: String },
    { no: 14, name: "code", kind: "message", T: CodeableConcept },
    { no: 15, name: "subject", kind: "message", T: Reference },
    { no: 16, name: "encounter", kind: "message", T: Reference },
    { no: 17, name: "date", kind: "message", T: DateTime },
    { no: 18, name: "source", kind: "message", T: Reference },
    { no: 19, name: "ordered_by", kind: "message", T: CodeableConcept },
    { no: 20, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 21, name: "entry", kind: "message", T: List_Entry, repeated: true },
    { no: 22, name: "empty_reason", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List {
    return new List().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List {
    return new List().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List {
    return new List().fromJsonString(jsonString, options);
  }

  static equals(a: List | PlainMessage<List> | undefined, b: List | PlainMessage<List> | undefined): boolean {
    return proto3.util.equals(List, a, b);
  }
}

/**
 * current | retired | entered-in-error
 *
 * @generated from message google.fhir.r4.core.List.StatusCode
 */
export class List_StatusCode extends Message<List_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ListStatusCode.Value value = 1;
   */
  value = ListStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<List_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.List.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ListStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List_StatusCode {
    return new List_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List_StatusCode {
    return new List_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List_StatusCode {
    return new List_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: List_StatusCode | PlainMessage<List_StatusCode> | undefined, b: List_StatusCode | PlainMessage<List_StatusCode> | undefined): boolean {
    return proto3.util.equals(List_StatusCode, a, b);
  }
}

/**
 * working | snapshot | changes
 *
 * @generated from message google.fhir.r4.core.List.ModeCode
 */
export class List_ModeCode extends Message<List_ModeCode> {
  /**
   * @generated from field: google.fhir.r4.core.ListModeCode.Value value = 1;
   */
  value = ListModeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<List_ModeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.List.ModeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ListModeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List_ModeCode {
    return new List_ModeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List_ModeCode {
    return new List_ModeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List_ModeCode {
    return new List_ModeCode().fromJsonString(jsonString, options);
  }

  static equals(a: List_ModeCode | PlainMessage<List_ModeCode> | undefined, b: List_ModeCode | PlainMessage<List_ModeCode> | undefined): boolean {
    return proto3.util.equals(List_ModeCode, a, b);
  }
}

/**
 * Entries in the list
 *
 * @generated from message google.fhir.r4.core.List.Entry
 */
export class List_Entry extends Message<List_Entry> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Status/Workflow information about this item
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept flag = 4;
   */
  flag?: CodeableConcept;

  /**
   * If this item is actually marked as deleted
   *
   * @generated from field: google.fhir.r4.core.Boolean deleted = 5;
   */
  deleted?: Boolean;

  /**
   * When item added to list
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 6;
   */
  date?: DateTime;

  /**
   * Actual entry
   *
   * @generated from field: google.fhir.r4.core.Reference item = 7;
   */
  item?: Reference;

  constructor(data?: PartialMessage<List_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.List.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "flag", kind: "message", T: CodeableConcept },
    { no: 5, name: "deleted", kind: "message", T: Boolean },
    { no: 6, name: "date", kind: "message", T: DateTime },
    { no: 7, name: "item", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): List_Entry {
    return new List_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): List_Entry {
    return new List_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): List_Entry {
    return new List_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: List_Entry | PlainMessage<List_Entry> | undefined, b: List_Entry | PlainMessage<List_Entry> | undefined): boolean {
    return proto3.util.equals(List_Entry, a, b);
  }
}

