//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/allergy_intolerance.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Age, Annotation, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Range, Reference, String, Uri } from "../datatypes_pb.js";
import { AllergyIntoleranceCategoryCode_Value, AllergyIntoleranceCriticalityCode_Value, AllergyIntoleranceSeverityCode_Value, AllergyIntoleranceTypeCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for AllergyIntolerance.
 * Allergy or Intolerance (generally: Risk of adverse reaction to a substance).
 * See http://hl7.org/fhir/StructureDefinition/AllergyIntolerance
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance
 */
export class AllergyIntolerance extends Message<AllergyIntolerance> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External ids for this item
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * active | inactive | resolved
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept clinical_status = 11;
   */
  clinicalStatus?: CodeableConcept;

  /**
   * unconfirmed | confirmed | refuted | entered-in-error
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept verification_status = 12;
   */
  verificationStatus?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.AllergyIntolerance.TypeCode type = 13;
   */
  type?: AllergyIntolerance_TypeCode;

  /**
   * @generated from field: repeated google.fhir.r4.core.AllergyIntolerance.CategoryCode category = 14;
   */
  category: AllergyIntolerance_CategoryCode[] = [];

  /**
   * @generated from field: google.fhir.r4.core.AllergyIntolerance.CriticalityCode criticality = 15;
   */
  criticality?: AllergyIntolerance_CriticalityCode;

  /**
   * Code that identifies the allergy or intolerance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 16;
   */
  code?: CodeableConcept;

  /**
   * Who the sensitivity is for
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 17;
   */
  patient?: Reference;

  /**
   * Encounter when the allergy or intolerance was asserted
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 18;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.AllergyIntolerance.OnsetX onset = 19;
   */
  onset?: AllergyIntolerance_OnsetX;

  /**
   * Date first version of the resource instance was recorded
   *
   * @generated from field: google.fhir.r4.core.DateTime recorded_date = 20;
   */
  recordedDate?: DateTime;

  /**
   * Who recorded the sensitivity
   *
   * @generated from field: google.fhir.r4.core.Reference recorder = 21;
   */
  recorder?: Reference;

  /**
   * Source of the information about the allergy
   *
   * @generated from field: google.fhir.r4.core.Reference asserter = 22;
   */
  asserter?: Reference;

  /**
   * Date(/time) of last known occurrence of a reaction
   *
   * @generated from field: google.fhir.r4.core.DateTime last_occurrence = 23;
   */
  lastOccurrence?: DateTime;

  /**
   * Additional text not captured in other fields
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 24;
   */
  note: Annotation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.AllergyIntolerance.Reaction reaction = 25;
   */
  reaction: AllergyIntolerance_Reaction[] = [];

  constructor(data?: PartialMessage<AllergyIntolerance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "clinical_status", kind: "message", T: CodeableConcept },
    { no: 12, name: "verification_status", kind: "message", T: CodeableConcept },
    { no: 13, name: "type", kind: "message", T: AllergyIntolerance_TypeCode },
    { no: 14, name: "category", kind: "message", T: AllergyIntolerance_CategoryCode, repeated: true },
    { no: 15, name: "criticality", kind: "message", T: AllergyIntolerance_CriticalityCode },
    { no: 16, name: "code", kind: "message", T: CodeableConcept },
    { no: 17, name: "patient", kind: "message", T: Reference },
    { no: 18, name: "encounter", kind: "message", T: Reference },
    { no: 19, name: "onset", kind: "message", T: AllergyIntolerance_OnsetX },
    { no: 20, name: "recorded_date", kind: "message", T: DateTime },
    { no: 21, name: "recorder", kind: "message", T: Reference },
    { no: 22, name: "asserter", kind: "message", T: Reference },
    { no: 23, name: "last_occurrence", kind: "message", T: DateTime },
    { no: 24, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 25, name: "reaction", kind: "message", T: AllergyIntolerance_Reaction, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance {
    return new AllergyIntolerance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance {
    return new AllergyIntolerance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance {
    return new AllergyIntolerance().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance | PlainMessage<AllergyIntolerance> | undefined, b: AllergyIntolerance | PlainMessage<AllergyIntolerance> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance, a, b);
  }
}

/**
 * allergy | intolerance - Underlying mechanism (if known)
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance.TypeCode
 */
export class AllergyIntolerance_TypeCode extends Message<AllergyIntolerance_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.AllergyIntoleranceTypeCode.Value value = 1;
   */
  value = AllergyIntoleranceTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AllergyIntolerance_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AllergyIntoleranceTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance_TypeCode {
    return new AllergyIntolerance_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance_TypeCode {
    return new AllergyIntolerance_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance_TypeCode {
    return new AllergyIntolerance_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance_TypeCode | PlainMessage<AllergyIntolerance_TypeCode> | undefined, b: AllergyIntolerance_TypeCode | PlainMessage<AllergyIntolerance_TypeCode> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance_TypeCode, a, b);
  }
}

/**
 * food | medication | environment | biologic
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance.CategoryCode
 */
export class AllergyIntolerance_CategoryCode extends Message<AllergyIntolerance_CategoryCode> {
  /**
   * @generated from field: google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value value = 1;
   */
  value = AllergyIntoleranceCategoryCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AllergyIntolerance_CategoryCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance.CategoryCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AllergyIntoleranceCategoryCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance_CategoryCode {
    return new AllergyIntolerance_CategoryCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance_CategoryCode {
    return new AllergyIntolerance_CategoryCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance_CategoryCode {
    return new AllergyIntolerance_CategoryCode().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance_CategoryCode | PlainMessage<AllergyIntolerance_CategoryCode> | undefined, b: AllergyIntolerance_CategoryCode | PlainMessage<AllergyIntolerance_CategoryCode> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance_CategoryCode, a, b);
  }
}

/**
 * low | high | unable-to-assess
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance.CriticalityCode
 */
export class AllergyIntolerance_CriticalityCode extends Message<AllergyIntolerance_CriticalityCode> {
  /**
   * @generated from field: google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value value = 1;
   */
  value = AllergyIntoleranceCriticalityCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AllergyIntolerance_CriticalityCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance.CriticalityCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AllergyIntoleranceCriticalityCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance_CriticalityCode {
    return new AllergyIntolerance_CriticalityCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance_CriticalityCode {
    return new AllergyIntolerance_CriticalityCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance_CriticalityCode {
    return new AllergyIntolerance_CriticalityCode().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance_CriticalityCode | PlainMessage<AllergyIntolerance_CriticalityCode> | undefined, b: AllergyIntolerance_CriticalityCode | PlainMessage<AllergyIntolerance_CriticalityCode> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance_CriticalityCode, a, b);
  }
}

/**
 * When allergy or intolerance was identified
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance.OnsetX
 */
export class AllergyIntolerance_OnsetX extends Message<AllergyIntolerance_OnsetX> {
  /**
   * @generated from oneof google.fhir.r4.core.AllergyIntolerance.OnsetX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Age age = 2;
     */
    value: Age;
    case: "age";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 3;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 4;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 5 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<AllergyIntolerance_OnsetX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance.OnsetX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "age", kind: "message", T: Age, oneof: "choice" },
    { no: 3, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 4, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 5, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance_OnsetX {
    return new AllergyIntolerance_OnsetX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance_OnsetX {
    return new AllergyIntolerance_OnsetX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance_OnsetX {
    return new AllergyIntolerance_OnsetX().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance_OnsetX | PlainMessage<AllergyIntolerance_OnsetX> | undefined, b: AllergyIntolerance_OnsetX | PlainMessage<AllergyIntolerance_OnsetX> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance_OnsetX, a, b);
  }
}

/**
 * Adverse Reaction Events linked to exposure to substance
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance.Reaction
 */
export class AllergyIntolerance_Reaction extends Message<AllergyIntolerance_Reaction> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Specific substance or pharmaceutical product considered to be responsible
   * for event
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept substance = 4;
   */
  substance?: CodeableConcept;

  /**
   * Clinical symptoms/signs associated with the Event
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept manifestation = 5;
   */
  manifestation: CodeableConcept[] = [];

  /**
   * Description of the event as a whole
   *
   * @generated from field: google.fhir.r4.core.String description = 6;
   */
  description?: String;

  /**
   * Date(/time) when manifestations showed
   *
   * @generated from field: google.fhir.r4.core.DateTime onset = 7;
   */
  onset?: DateTime;

  /**
   * @generated from field: google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode severity = 8;
   */
  severity?: AllergyIntolerance_Reaction_SeverityCode;

  /**
   * How the subject was exposed to the substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept exposure_route = 9;
   */
  exposureRoute?: CodeableConcept;

  /**
   * Text about event not captured in other fields
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 10;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<AllergyIntolerance_Reaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance.Reaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "substance", kind: "message", T: CodeableConcept },
    { no: 5, name: "manifestation", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "description", kind: "message", T: String },
    { no: 7, name: "onset", kind: "message", T: DateTime },
    { no: 8, name: "severity", kind: "message", T: AllergyIntolerance_Reaction_SeverityCode },
    { no: 9, name: "exposure_route", kind: "message", T: CodeableConcept },
    { no: 10, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance_Reaction {
    return new AllergyIntolerance_Reaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance_Reaction {
    return new AllergyIntolerance_Reaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance_Reaction {
    return new AllergyIntolerance_Reaction().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance_Reaction | PlainMessage<AllergyIntolerance_Reaction> | undefined, b: AllergyIntolerance_Reaction | PlainMessage<AllergyIntolerance_Reaction> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance_Reaction, a, b);
  }
}

/**
 * mild | moderate | severe (of event as a whole)
 *
 * @generated from message google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode
 */
export class AllergyIntolerance_Reaction_SeverityCode extends Message<AllergyIntolerance_Reaction_SeverityCode> {
  /**
   * @generated from field: google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value value = 1;
   */
  value = AllergyIntoleranceSeverityCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<AllergyIntolerance_Reaction_SeverityCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.AllergyIntolerance.Reaction.SeverityCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AllergyIntoleranceSeverityCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AllergyIntolerance_Reaction_SeverityCode {
    return new AllergyIntolerance_Reaction_SeverityCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AllergyIntolerance_Reaction_SeverityCode {
    return new AllergyIntolerance_Reaction_SeverityCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AllergyIntolerance_Reaction_SeverityCode {
    return new AllergyIntolerance_Reaction_SeverityCode().fromJsonString(jsonString, options);
  }

  static equals(a: AllergyIntolerance_Reaction_SeverityCode | PlainMessage<AllergyIntolerance_Reaction_SeverityCode> | undefined, b: AllergyIntolerance_Reaction_SeverityCode | PlainMessage<AllergyIntolerance_Reaction_SeverityCode> | undefined): boolean {
    return proto3.util.equals(AllergyIntolerance_Reaction_SeverityCode, a, b);
  }
}

