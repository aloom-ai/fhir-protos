//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance_source_material.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Extension, Id, Identifier, Meta, Narrative, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for SubstanceSourceMaterial.
 * Source material shall capture information on the taxonomic and anatomical
 * origins as well as the fraction of a material that can result in or can be
 * modified to form a substance. This set of data elements shall be used to
 * define polymer substances isolated from biological matrices. Taxonomic and
 * anatomical origins shall be described using a controlled vocabulary as
 * required. This information is captured for naturally derived polymers ( .
 * starch) and structurally diverse substances. For Organisms belonging to the
 * Kingdom Plantae the Substance level defines the fresh material of a single
 * species or infraspecies, the Herbal Drug and the Herbal preparation. For
 * Herbal preparations, the fraction information will be captured at the
 * Substance information level and additional information for herbal extracts
 * will be captured at the Specified Substance Group 1 information level. See
 * for further explanation the Substance Class: Structurally Diverse and the
 * herbal annex. See
 * http://hl7.org/fhir/StructureDefinition/SubstanceSourceMaterial
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial
 */
export class SubstanceSourceMaterial extends Message<SubstanceSourceMaterial> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * General high level classification of the source material specific to the
   * origin of the material
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept source_material_class = 10;
   */
  sourceMaterialClass?: CodeableConcept;

  /**
   * The type of the source material shall be specified based on a controlled
   * vocabulary. For vaccines, this subclause refers to the class of infectious
   * agent
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept source_material_type = 11;
   */
  sourceMaterialType?: CodeableConcept;

  /**
   * The state of the source material when extracted
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept source_material_state = 12;
   */
  sourceMaterialState?: CodeableConcept;

  /**
   * The unique identifier associated with the source material parent organism
   * shall be specified
   *
   * @generated from field: google.fhir.r4.core.Identifier organism_id = 13;
   */
  organismId?: Identifier;

  /**
   * The organism accepted Scientific name shall be provided based on the
   * organism taxonomy
   *
   * @generated from field: google.fhir.r4.core.String organism_name = 14;
   */
  organismName?: String;

  /**
   * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of
   * the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant)
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier parent_substance_id = 15;
   */
  parentSubstanceId: Identifier[] = [];

  /**
   * The parent substance of the Herbal Drug, or Herbal preparation
   *
   * @generated from field: repeated google.fhir.r4.core.String parent_substance_name = 16;
   */
  parentSubstanceName: String[] = [];

  /**
   * The country where the plant material is harvested or the countries where
   * the plasma is sourced from as laid down in accordance with the Plasma
   * Master File. For “Plasma-derived substances” the attribute country of
   * origin provides information about the countries used for the manufacturing
   * of the Cryopoor plama or Crioprecipitate
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept country_of_origin = 17;
   */
  countryOfOrigin: CodeableConcept[] = [];

  /**
   * The place/region where the plant is harvested or the places/regions where
   * the animal source material has its habitat
   *
   * @generated from field: repeated google.fhir.r4.core.String geographical_location = 18;
   */
  geographicalLocation: String[] = [];

  /**
   * Stage of life for animals, plants, insects and microorganisms. This
   * information shall be provided only when the substance is significantly
   * different in these stages (e.g. foetal bovine serum)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept development_stage = 19;
   */
  developmentStage?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription fraction_description = 20;
   */
  fractionDescription: SubstanceSourceMaterial_FractionDescription[] = [];

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSourceMaterial.Organism organism = 21;
   */
  organism?: SubstanceSourceMaterial_Organism;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSourceMaterial.PartDescription part_description = 22;
   */
  partDescription: SubstanceSourceMaterial_PartDescription[] = [];

  constructor(data?: PartialMessage<SubstanceSourceMaterial>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "source_material_class", kind: "message", T: CodeableConcept },
    { no: 11, name: "source_material_type", kind: "message", T: CodeableConcept },
    { no: 12, name: "source_material_state", kind: "message", T: CodeableConcept },
    { no: 13, name: "organism_id", kind: "message", T: Identifier },
    { no: 14, name: "organism_name", kind: "message", T: String },
    { no: 15, name: "parent_substance_id", kind: "message", T: Identifier, repeated: true },
    { no: 16, name: "parent_substance_name", kind: "message", T: String, repeated: true },
    { no: 17, name: "country_of_origin", kind: "message", T: CodeableConcept, repeated: true },
    { no: 18, name: "geographical_location", kind: "message", T: String, repeated: true },
    { no: 19, name: "development_stage", kind: "message", T: CodeableConcept },
    { no: 20, name: "fraction_description", kind: "message", T: SubstanceSourceMaterial_FractionDescription, repeated: true },
    { no: 21, name: "organism", kind: "message", T: SubstanceSourceMaterial_Organism },
    { no: 22, name: "part_description", kind: "message", T: SubstanceSourceMaterial_PartDescription, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial {
    return new SubstanceSourceMaterial().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial {
    return new SubstanceSourceMaterial().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial {
    return new SubstanceSourceMaterial().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial | PlainMessage<SubstanceSourceMaterial> | undefined, b: SubstanceSourceMaterial | PlainMessage<SubstanceSourceMaterial> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial, a, b);
  }
}

/**
 * Many complex materials are fractions of parts of plants, animals, or
 * minerals. Fraction elements are often necessary to define both Substances
 * and Specified Group 1 Substances. For substances derived from Plants,
 * fraction information will be captured at the Substance information level (
 * . Oils, Juices and Exudates). Additional information for Extracts, such as
 * extraction solvent composition, will be captured at the Specified Substance
 * Group 1 information level. For plasma-derived products fraction information
 * will be captured at the Substance and the Specified Substance Group 1
 * levels
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription
 */
export class SubstanceSourceMaterial_FractionDescription extends Message<SubstanceSourceMaterial_FractionDescription> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * This element is capturing information about the fraction of a plant part,
   * or human plasma for fractionation
   *
   * @generated from field: google.fhir.r4.core.String fraction = 4;
   */
  fraction?: String;

  /**
   * The specific type of the material constituting the component. For Herbal
   * preparations the particulars of the extracts (liquid/dry) is described in
   * Specified Substance Group 1
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept material_type = 5;
   */
  materialType?: CodeableConcept;

  constructor(data?: PartialMessage<SubstanceSourceMaterial_FractionDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial.FractionDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "fraction", kind: "message", T: String },
    { no: 5, name: "material_type", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial_FractionDescription {
    return new SubstanceSourceMaterial_FractionDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_FractionDescription {
    return new SubstanceSourceMaterial_FractionDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_FractionDescription {
    return new SubstanceSourceMaterial_FractionDescription().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial_FractionDescription | PlainMessage<SubstanceSourceMaterial_FractionDescription> | undefined, b: SubstanceSourceMaterial_FractionDescription | PlainMessage<SubstanceSourceMaterial_FractionDescription> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial_FractionDescription, a, b);
  }
}

/**
 * This subclause describes the organism which the substance is derived from.
 * For vaccines, the parent organism shall be specified based on these
 * subclause elements. As an example, full taxonomy will be described for the
 * Substance Name: ., Leaf
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial.Organism
 */
export class SubstanceSourceMaterial_Organism extends Message<SubstanceSourceMaterial_Organism> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The family of an organism shall be specified
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept family = 4;
   */
  family?: CodeableConcept;

  /**
   * The genus of an organism shall be specified; refers to the Latin epithet
   * of the genus element of the plant/animal scientific name; it is present
   * in names for genera, species and infraspecies
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept genus = 5;
   */
  genus?: CodeableConcept;

  /**
   * The species of an organism shall be specified; refers to the Latin
   * epithet of the species of the plant/animal; it is present in names for
   * species and infraspecies
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept species = 6;
   */
  species?: CodeableConcept;

  /**
   * The Intraspecific type of an organism shall be specified
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept intraspecific_type = 7;
   */
  intraspecificType?: CodeableConcept;

  /**
   * The intraspecific description of an organism shall be specified based on
   * a controlled vocabulary. For Influenza Vaccine, the intraspecific
   * description shall contain the syntax of the antigen in line with the WHO
   * convention
   *
   * @generated from field: google.fhir.r4.core.String intraspecific_description = 8;
   */
  intraspecificDescription?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author author = 9;
   */
  author: SubstanceSourceMaterial_Organism_Author[] = [];

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid hybrid = 10;
   */
  hybrid?: SubstanceSourceMaterial_Organism_Hybrid;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral organism_general = 11;
   */
  organismGeneral?: SubstanceSourceMaterial_Organism_OrganismGeneral;

  constructor(data?: PartialMessage<SubstanceSourceMaterial_Organism>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial.Organism";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "family", kind: "message", T: CodeableConcept },
    { no: 5, name: "genus", kind: "message", T: CodeableConcept },
    { no: 6, name: "species", kind: "message", T: CodeableConcept },
    { no: 7, name: "intraspecific_type", kind: "message", T: CodeableConcept },
    { no: 8, name: "intraspecific_description", kind: "message", T: String },
    { no: 9, name: "author", kind: "message", T: SubstanceSourceMaterial_Organism_Author, repeated: true },
    { no: 10, name: "hybrid", kind: "message", T: SubstanceSourceMaterial_Organism_Hybrid },
    { no: 11, name: "organism_general", kind: "message", T: SubstanceSourceMaterial_Organism_OrganismGeneral },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial_Organism {
    return new SubstanceSourceMaterial_Organism().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism {
    return new SubstanceSourceMaterial_Organism().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism {
    return new SubstanceSourceMaterial_Organism().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial_Organism | PlainMessage<SubstanceSourceMaterial_Organism> | undefined, b: SubstanceSourceMaterial_Organism | PlainMessage<SubstanceSourceMaterial_Organism> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial_Organism, a, b);
  }
}

/**
 * 4.9.13.6.1 Author type (Conditional)
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author
 */
export class SubstanceSourceMaterial_Organism_Author extends Message<SubstanceSourceMaterial_Organism_Author> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of author of an organism species shall be specified. The
   * parenthetical author of an organism species refers to the first author
   * who published the plant/animal name (of any rank). The primary author
   * of an organism species refers to the first author(s), who validly
   * published the plant/animal name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept author_type = 4;
   */
  authorType?: CodeableConcept;

  /**
   * The author of an organism species shall be specified. The author year
   * of an organism shall also be specified when applicable; refers to the
   * year in which the first author(s) published the infraspecific
   * plant/animal name (of any rank)
   *
   * @generated from field: google.fhir.r4.core.String author_description = 5;
   */
  authorDescription?: String;

  constructor(data?: PartialMessage<SubstanceSourceMaterial_Organism_Author>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial.Organism.Author";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "author_type", kind: "message", T: CodeableConcept },
    { no: 5, name: "author_description", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial_Organism_Author {
    return new SubstanceSourceMaterial_Organism_Author().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism_Author {
    return new SubstanceSourceMaterial_Organism_Author().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism_Author {
    return new SubstanceSourceMaterial_Organism_Author().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial_Organism_Author | PlainMessage<SubstanceSourceMaterial_Organism_Author> | undefined, b: SubstanceSourceMaterial_Organism_Author | PlainMessage<SubstanceSourceMaterial_Organism_Author> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial_Organism_Author, a, b);
  }
}

/**
 * 4.9.13.8.1 Hybrid species maternal organism ID (Optional)
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid
 */
export class SubstanceSourceMaterial_Organism_Hybrid extends Message<SubstanceSourceMaterial_Organism_Hybrid> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The identifier of the maternal species constituting the hybrid organism
   * shall be specified based on a controlled vocabulary. For plants, the
   * parents aren’t always known, and it is unlikely that it will be known
   * which is maternal and which is paternal
   *
   * @generated from field: google.fhir.r4.core.String maternal_organism_id = 4;
   */
  maternalOrganismId?: String;

  /**
   * The name of the maternal species constituting the hybrid organism shall
   * be specified. For plants, the parents aren’t always known, and it is
   * unlikely that it will be known which is maternal and which is paternal
   *
   * @generated from field: google.fhir.r4.core.String maternal_organism_name = 5;
   */
  maternalOrganismName?: String;

  /**
   * The identifier of the paternal species constituting the hybrid organism
   * shall be specified based on a controlled vocabulary
   *
   * @generated from field: google.fhir.r4.core.String paternal_organism_id = 6;
   */
  paternalOrganismId?: String;

  /**
   * The name of the paternal species constituting the hybrid organism shall
   * be specified
   *
   * @generated from field: google.fhir.r4.core.String paternal_organism_name = 7;
   */
  paternalOrganismName?: String;

  /**
   * The hybrid type of an organism shall be specified
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept hybrid_type = 8;
   */
  hybridType?: CodeableConcept;

  constructor(data?: PartialMessage<SubstanceSourceMaterial_Organism_Hybrid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial.Organism.Hybrid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "maternal_organism_id", kind: "message", T: String },
    { no: 5, name: "maternal_organism_name", kind: "message", T: String },
    { no: 6, name: "paternal_organism_id", kind: "message", T: String },
    { no: 7, name: "paternal_organism_name", kind: "message", T: String },
    { no: 8, name: "hybrid_type", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial_Organism_Hybrid {
    return new SubstanceSourceMaterial_Organism_Hybrid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism_Hybrid {
    return new SubstanceSourceMaterial_Organism_Hybrid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism_Hybrid {
    return new SubstanceSourceMaterial_Organism_Hybrid().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial_Organism_Hybrid | PlainMessage<SubstanceSourceMaterial_Organism_Hybrid> | undefined, b: SubstanceSourceMaterial_Organism_Hybrid | PlainMessage<SubstanceSourceMaterial_Organism_Hybrid> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial_Organism_Hybrid, a, b);
  }
}

/**
 * 4.9.13.7.1 Kingdom (Conditional)
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral
 */
export class SubstanceSourceMaterial_Organism_OrganismGeneral extends Message<SubstanceSourceMaterial_Organism_OrganismGeneral> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The kingdom of an organism shall be specified
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept kingdom = 4;
   */
  kingdom?: CodeableConcept;

  /**
   * The phylum of an organism shall be specified
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept phylum = 5;
   */
  phylum?: CodeableConcept;

  /**
   * The class of an organism shall be specified
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept class_value = 6 [json_name = "class"];
   */
  classValue?: CodeableConcept;

  /**
   * The order of an organism shall be specified,
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept order = 7;
   */
  order?: CodeableConcept;

  constructor(data?: PartialMessage<SubstanceSourceMaterial_Organism_OrganismGeneral>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial.Organism.OrganismGeneral";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "kingdom", kind: "message", T: CodeableConcept },
    { no: 5, name: "phylum", kind: "message", T: CodeableConcept },
    { no: 6, name: "class_value", jsonName: "class", kind: "message", T: CodeableConcept },
    { no: 7, name: "order", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial_Organism_OrganismGeneral {
    return new SubstanceSourceMaterial_Organism_OrganismGeneral().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism_OrganismGeneral {
    return new SubstanceSourceMaterial_Organism_OrganismGeneral().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_Organism_OrganismGeneral {
    return new SubstanceSourceMaterial_Organism_OrganismGeneral().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial_Organism_OrganismGeneral | PlainMessage<SubstanceSourceMaterial_Organism_OrganismGeneral> | undefined, b: SubstanceSourceMaterial_Organism_OrganismGeneral | PlainMessage<SubstanceSourceMaterial_Organism_OrganismGeneral> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial_Organism_OrganismGeneral, a, b);
  }
}

/**
 * To do
 *
 * @generated from message google.fhir.r4.core.SubstanceSourceMaterial.PartDescription
 */
export class SubstanceSourceMaterial_PartDescription extends Message<SubstanceSourceMaterial_PartDescription> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Entity of anatomical origin of source material within an organism
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept part = 4;
   */
  part?: CodeableConcept;

  /**
   * The detailed anatomic location when the part can be extracted from
   * different anatomical locations of the organism. Multiple alternative
   * locations may apply
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept part_location = 5;
   */
  partLocation?: CodeableConcept;

  constructor(data?: PartialMessage<SubstanceSourceMaterial_PartDescription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSourceMaterial.PartDescription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "part", kind: "message", T: CodeableConcept },
    { no: 5, name: "part_location", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSourceMaterial_PartDescription {
    return new SubstanceSourceMaterial_PartDescription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_PartDescription {
    return new SubstanceSourceMaterial_PartDescription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSourceMaterial_PartDescription {
    return new SubstanceSourceMaterial_PartDescription().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSourceMaterial_PartDescription | PlainMessage<SubstanceSourceMaterial_PartDescription> | undefined, b: SubstanceSourceMaterial_PartDescription | PlainMessage<SubstanceSourceMaterial_PartDescription> | undefined): boolean {
    return proto3.util.equals(SubstanceSourceMaterial_PartDescription, a, b);
  }
}

