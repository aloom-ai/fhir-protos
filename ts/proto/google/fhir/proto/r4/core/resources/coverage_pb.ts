//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/coverage.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, Extension, Id, Identifier, Meta, Money, Narrative, Period, PositiveInt, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { FinancialResourceStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Coverage.
 * Insurance or medical plan or a payment agreement.
 * See http://hl7.org/fhir/StructureDefinition/Coverage
 *
 * @generated from message google.fhir.r4.core.Coverage
 */
export class Coverage extends Message<Coverage> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business Identifier for the coverage
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Coverage.StatusCode status = 11;
   */
  status?: Coverage_StatusCode;

  /**
   * Coverage category such as medical or accident
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 12;
   */
  type?: CodeableConcept;

  /**
   * Owner of the policy
   *
   * @generated from field: google.fhir.r4.core.Reference policy_holder = 13;
   */
  policyHolder?: Reference;

  /**
   * Subscriber to the policy
   *
   * @generated from field: google.fhir.r4.core.Reference subscriber = 14;
   */
  subscriber?: Reference;

  /**
   * ID assigned to the subscriber
   *
   * @generated from field: google.fhir.r4.core.String subscriber_id = 15;
   */
  subscriberId?: String;

  /**
   * Plan beneficiary
   *
   * @generated from field: google.fhir.r4.core.Reference beneficiary = 16;
   */
  beneficiary?: Reference;

  /**
   * Dependent number
   *
   * @generated from field: google.fhir.r4.core.String dependent = 17;
   */
  dependent?: String;

  /**
   * Beneficiary relationship to the subscriber
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept relationship = 18;
   */
  relationship?: CodeableConcept;

  /**
   * Coverage start and end dates
   *
   * @generated from field: google.fhir.r4.core.Period period = 19;
   */
  period?: Period;

  /**
   * Issuer of the policy
   *
   * @generated from field: repeated google.fhir.r4.core.Reference payor = 20;
   */
  payor: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Coverage.Class class_value = 21 [json_name = "class"];
   */
  classValue: Coverage_Class[] = [];

  /**
   * Relative order of the coverage
   *
   * @generated from field: google.fhir.r4.core.PositiveInt order = 22;
   */
  order?: PositiveInt;

  /**
   * Insurer network
   *
   * @generated from field: google.fhir.r4.core.String network = 23;
   */
  network?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Coverage.CostToBeneficiary cost_to_beneficiary = 24;
   */
  costToBeneficiary: Coverage_CostToBeneficiary[] = [];

  /**
   * Reimbursement to insurer
   *
   * @generated from field: google.fhir.r4.core.Boolean subrogation = 25;
   */
  subrogation?: Boolean;

  /**
   * Contract details
   *
   * @generated from field: repeated google.fhir.r4.core.Reference contract = 26;
   */
  contract: Reference[] = [];

  constructor(data?: PartialMessage<Coverage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Coverage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: Coverage_StatusCode },
    { no: 12, name: "type", kind: "message", T: CodeableConcept },
    { no: 13, name: "policy_holder", kind: "message", T: Reference },
    { no: 14, name: "subscriber", kind: "message", T: Reference },
    { no: 15, name: "subscriber_id", kind: "message", T: String },
    { no: 16, name: "beneficiary", kind: "message", T: Reference },
    { no: 17, name: "dependent", kind: "message", T: String },
    { no: 18, name: "relationship", kind: "message", T: CodeableConcept },
    { no: 19, name: "period", kind: "message", T: Period },
    { no: 20, name: "payor", kind: "message", T: Reference, repeated: true },
    { no: 21, name: "class_value", jsonName: "class", kind: "message", T: Coverage_Class, repeated: true },
    { no: 22, name: "order", kind: "message", T: PositiveInt },
    { no: 23, name: "network", kind: "message", T: String },
    { no: 24, name: "cost_to_beneficiary", kind: "message", T: Coverage_CostToBeneficiary, repeated: true },
    { no: 25, name: "subrogation", kind: "message", T: Boolean },
    { no: 26, name: "contract", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coverage {
    return new Coverage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coverage {
    return new Coverage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coverage {
    return new Coverage().fromJsonString(jsonString, options);
  }

  static equals(a: Coverage | PlainMessage<Coverage> | undefined, b: Coverage | PlainMessage<Coverage> | undefined): boolean {
    return proto3.util.equals(Coverage, a, b);
  }
}

/**
 * active | cancelled | draft | entered-in-error
 *
 * @generated from message google.fhir.r4.core.Coverage.StatusCode
 */
export class Coverage_StatusCode extends Message<Coverage_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.FinancialResourceStatusCode.Value value = 1;
   */
  value = FinancialResourceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Coverage_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Coverage.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(FinancialResourceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coverage_StatusCode {
    return new Coverage_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coverage_StatusCode {
    return new Coverage_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coverage_StatusCode {
    return new Coverage_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Coverage_StatusCode | PlainMessage<Coverage_StatusCode> | undefined, b: Coverage_StatusCode | PlainMessage<Coverage_StatusCode> | undefined): boolean {
    return proto3.util.equals(Coverage_StatusCode, a, b);
  }
}

/**
 * Additional coverage classifications
 *
 * @generated from message google.fhir.r4.core.Coverage.Class
 */
export class Coverage_Class extends Message<Coverage_Class> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of class such as 'group' or 'plan'
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Value associated with the type
   *
   * @generated from field: google.fhir.r4.core.String value = 5;
   */
  value?: String;

  /**
   * Human readable description of the type and value
   *
   * @generated from field: google.fhir.r4.core.String name = 6;
   */
  name?: String;

  constructor(data?: PartialMessage<Coverage_Class>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Coverage.Class";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "value", kind: "message", T: String },
    { no: 6, name: "name", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coverage_Class {
    return new Coverage_Class().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coverage_Class {
    return new Coverage_Class().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coverage_Class {
    return new Coverage_Class().fromJsonString(jsonString, options);
  }

  static equals(a: Coverage_Class | PlainMessage<Coverage_Class> | undefined, b: Coverage_Class | PlainMessage<Coverage_Class> | undefined): boolean {
    return proto3.util.equals(Coverage_Class, a, b);
  }
}

/**
 * Patient payments for services/products
 *
 * @generated from message google.fhir.r4.core.Coverage.CostToBeneficiary
 */
export class Coverage_CostToBeneficiary extends Message<Coverage_CostToBeneficiary> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Cost category
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Coverage.CostToBeneficiary.ValueX value = 5;
   */
  value?: Coverage_CostToBeneficiary_ValueX;

  /**
   * @generated from field: repeated google.fhir.r4.core.Coverage.CostToBeneficiary.Exemption exception = 6;
   */
  exception: Coverage_CostToBeneficiary_Exemption[] = [];

  constructor(data?: PartialMessage<Coverage_CostToBeneficiary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Coverage.CostToBeneficiary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "value", kind: "message", T: Coverage_CostToBeneficiary_ValueX },
    { no: 6, name: "exception", kind: "message", T: Coverage_CostToBeneficiary_Exemption, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coverage_CostToBeneficiary {
    return new Coverage_CostToBeneficiary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coverage_CostToBeneficiary {
    return new Coverage_CostToBeneficiary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coverage_CostToBeneficiary {
    return new Coverage_CostToBeneficiary().fromJsonString(jsonString, options);
  }

  static equals(a: Coverage_CostToBeneficiary | PlainMessage<Coverage_CostToBeneficiary> | undefined, b: Coverage_CostToBeneficiary | PlainMessage<Coverage_CostToBeneficiary> | undefined): boolean {
    return proto3.util.equals(Coverage_CostToBeneficiary, a, b);
  }
}

/**
 * The amount or percentage due from the beneficiary
 *
 * @generated from message google.fhir.r4.core.Coverage.CostToBeneficiary.ValueX
 */
export class Coverage_CostToBeneficiary_ValueX extends Message<Coverage_CostToBeneficiary_ValueX> {
  /**
   * @generated from oneof google.fhir.r4.core.Coverage.CostToBeneficiary.ValueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 1;
     */
    value: SimpleQuantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Money money = 2;
     */
    value: Money;
    case: "money";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Coverage_CostToBeneficiary_ValueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Coverage.CostToBeneficiary.ValueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: SimpleQuantity, oneof: "choice" },
    { no: 2, name: "money", kind: "message", T: Money, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coverage_CostToBeneficiary_ValueX {
    return new Coverage_CostToBeneficiary_ValueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coverage_CostToBeneficiary_ValueX {
    return new Coverage_CostToBeneficiary_ValueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coverage_CostToBeneficiary_ValueX {
    return new Coverage_CostToBeneficiary_ValueX().fromJsonString(jsonString, options);
  }

  static equals(a: Coverage_CostToBeneficiary_ValueX | PlainMessage<Coverage_CostToBeneficiary_ValueX> | undefined, b: Coverage_CostToBeneficiary_ValueX | PlainMessage<Coverage_CostToBeneficiary_ValueX> | undefined): boolean {
    return proto3.util.equals(Coverage_CostToBeneficiary_ValueX, a, b);
  }
}

/**
 * Exceptions for patient payments
 *
 * @generated from message google.fhir.r4.core.Coverage.CostToBeneficiary.Exemption
 */
export class Coverage_CostToBeneficiary_Exemption extends Message<Coverage_CostToBeneficiary_Exemption> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Exception category
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * The effective period of the exception
   *
   * @generated from field: google.fhir.r4.core.Period period = 5;
   */
  period?: Period;

  constructor(data?: PartialMessage<Coverage_CostToBeneficiary_Exemption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Coverage.CostToBeneficiary.Exemption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "period", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coverage_CostToBeneficiary_Exemption {
    return new Coverage_CostToBeneficiary_Exemption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coverage_CostToBeneficiary_Exemption {
    return new Coverage_CostToBeneficiary_Exemption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coverage_CostToBeneficiary_Exemption {
    return new Coverage_CostToBeneficiary_Exemption().fromJsonString(jsonString, options);
  }

  static equals(a: Coverage_CostToBeneficiary_Exemption | PlainMessage<Coverage_CostToBeneficiary_Exemption> | undefined, b: Coverage_CostToBeneficiary_Exemption | PlainMessage<Coverage_CostToBeneficiary_Exemption> | undefined): boolean {
    return proto3.util.equals(Coverage_CostToBeneficiary_Exemption, a, b);
  }
}

