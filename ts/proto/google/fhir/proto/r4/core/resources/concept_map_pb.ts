//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/concept_map.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Canonical, Code, CodeableConcept, ContactDetail, DateTime, Extension, Id, Identifier, Markdown, Meta, Narrative, String, Uri, UsageContext } from "../datatypes_pb.js";
import { ConceptMapEquivalenceCode_Value, ConceptMapGroupUnmappedModeCode_Value, PublicationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for ConceptMap.
 * A map from one set of concepts to one or more other concepts.
 * See http://hl7.org/fhir/StructureDefinition/ConceptMap
 *
 * @generated from message google.fhir.r4.core.ConceptMap
 */
export class ConceptMap extends Message<ConceptMap> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Canonical identifier for this concept map, represented as a URI (globally
   * unique)
   *
   * @generated from field: google.fhir.r4.core.Uri url = 10;
   */
  url?: Uri;

  /**
   * Additional identifier for the concept map
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 11;
   */
  identifier?: Identifier;

  /**
   * Business version of the concept map
   *
   * @generated from field: google.fhir.r4.core.String version = 12;
   */
  version?: String;

  /**
   * Name for this concept map (computer friendly)
   *
   * @generated from field: google.fhir.r4.core.String name = 13;
   */
  name?: String;

  /**
   * Name for this concept map (human friendly)
   *
   * @generated from field: google.fhir.r4.core.String title = 14;
   */
  title?: String;

  /**
   * @generated from field: google.fhir.r4.core.ConceptMap.StatusCode status = 15;
   */
  status?: ConceptMap_StatusCode;

  /**
   * For testing purposes, not real usage
   *
   * @generated from field: google.fhir.r4.core.Boolean experimental = 16;
   */
  experimental?: Boolean;

  /**
   * Date last changed
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 17;
   */
  date?: DateTime;

  /**
   * Name of the publisher (organization or individual)
   *
   * @generated from field: google.fhir.r4.core.String publisher = 18;
   */
  publisher?: String;

  /**
   * Contact details for the publisher
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail contact = 19;
   */
  contact: ContactDetail[] = [];

  /**
   * Natural language description of the concept map
   *
   * @generated from field: google.fhir.r4.core.Markdown description = 20;
   */
  description?: Markdown;

  /**
   * The context that the content is intended to support
   *
   * @generated from field: repeated google.fhir.r4.core.UsageContext use_context = 21;
   */
  useContext: UsageContext[] = [];

  /**
   * Intended jurisdiction for concept map (if applicable)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 22;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * Why this concept map is defined
   *
   * @generated from field: google.fhir.r4.core.Markdown purpose = 23;
   */
  purpose?: Markdown;

  /**
   * Use and/or publishing restrictions
   *
   * @generated from field: google.fhir.r4.core.Markdown copyright = 24;
   */
  copyright?: Markdown;

  /**
   * @generated from field: google.fhir.r4.core.ConceptMap.SourceX source = 25;
   */
  source?: ConceptMap_SourceX;

  /**
   * @generated from field: google.fhir.r4.core.ConceptMap.TargetX target = 26;
   */
  target?: ConceptMap_TargetX;

  /**
   * @generated from field: repeated google.fhir.r4.core.ConceptMap.Group group = 27;
   */
  group: ConceptMap_Group[] = [];

  constructor(data?: PartialMessage<ConceptMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "url", kind: "message", T: Uri },
    { no: 11, name: "identifier", kind: "message", T: Identifier },
    { no: 12, name: "version", kind: "message", T: String },
    { no: 13, name: "name", kind: "message", T: String },
    { no: 14, name: "title", kind: "message", T: String },
    { no: 15, name: "status", kind: "message", T: ConceptMap_StatusCode },
    { no: 16, name: "experimental", kind: "message", T: Boolean },
    { no: 17, name: "date", kind: "message", T: DateTime },
    { no: 18, name: "publisher", kind: "message", T: String },
    { no: 19, name: "contact", kind: "message", T: ContactDetail, repeated: true },
    { no: 20, name: "description", kind: "message", T: Markdown },
    { no: 21, name: "use_context", kind: "message", T: UsageContext, repeated: true },
    { no: 22, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 23, name: "purpose", kind: "message", T: Markdown },
    { no: 24, name: "copyright", kind: "message", T: Markdown },
    { no: 25, name: "source", kind: "message", T: ConceptMap_SourceX },
    { no: 26, name: "target", kind: "message", T: ConceptMap_TargetX },
    { no: 27, name: "group", kind: "message", T: ConceptMap_Group, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap {
    return new ConceptMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap {
    return new ConceptMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap {
    return new ConceptMap().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap | PlainMessage<ConceptMap> | undefined, b: ConceptMap | PlainMessage<ConceptMap> | undefined): boolean {
    return proto3.util.equals(ConceptMap, a, b);
  }
}

/**
 * draft | active | retired | unknown
 *
 * @generated from message google.fhir.r4.core.ConceptMap.StatusCode
 */
export class ConceptMap_StatusCode extends Message<ConceptMap_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.PublicationStatusCode.Value value = 1;
   */
  value = PublicationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ConceptMap_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(PublicationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_StatusCode {
    return new ConceptMap_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_StatusCode {
    return new ConceptMap_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_StatusCode {
    return new ConceptMap_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_StatusCode | PlainMessage<ConceptMap_StatusCode> | undefined, b: ConceptMap_StatusCode | PlainMessage<ConceptMap_StatusCode> | undefined): boolean {
    return proto3.util.equals(ConceptMap_StatusCode, a, b);
  }
}

/**
 * The source value set that contains the concepts that are being mapped
 *
 * @generated from message google.fhir.r4.core.ConceptMap.SourceX
 */
export class ConceptMap_SourceX extends Message<ConceptMap_SourceX> {
  /**
   * @generated from oneof google.fhir.r4.core.ConceptMap.SourceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Canonical canonical = 2;
     */
    value: Canonical;
    case: "canonical";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConceptMap_SourceX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.SourceX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "choice" },
    { no: 2, name: "canonical", kind: "message", T: Canonical, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_SourceX {
    return new ConceptMap_SourceX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_SourceX {
    return new ConceptMap_SourceX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_SourceX {
    return new ConceptMap_SourceX().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_SourceX | PlainMessage<ConceptMap_SourceX> | undefined, b: ConceptMap_SourceX | PlainMessage<ConceptMap_SourceX> | undefined): boolean {
    return proto3.util.equals(ConceptMap_SourceX, a, b);
  }
}

/**
 * The target value set which provides context for the mappings
 *
 * @generated from message google.fhir.r4.core.ConceptMap.TargetX
 */
export class ConceptMap_TargetX extends Message<ConceptMap_TargetX> {
  /**
   * @generated from oneof google.fhir.r4.core.ConceptMap.TargetX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Uri uri = 1;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Canonical canonical = 2;
     */
    value: Canonical;
    case: "canonical";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ConceptMap_TargetX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.TargetX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "message", T: Uri, oneof: "choice" },
    { no: 2, name: "canonical", kind: "message", T: Canonical, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_TargetX {
    return new ConceptMap_TargetX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_TargetX {
    return new ConceptMap_TargetX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_TargetX {
    return new ConceptMap_TargetX().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_TargetX | PlainMessage<ConceptMap_TargetX> | undefined, b: ConceptMap_TargetX | PlainMessage<ConceptMap_TargetX> | undefined): boolean {
    return proto3.util.equals(ConceptMap_TargetX, a, b);
  }
}

/**
 * Same source and target systems
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group
 */
export class ConceptMap_Group extends Message<ConceptMap_Group> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Source system where concepts to be mapped are defined
   *
   * @generated from field: google.fhir.r4.core.Uri source = 4;
   */
  source?: Uri;

  /**
   * Specific version of the  code system
   *
   * @generated from field: google.fhir.r4.core.String source_version = 5;
   */
  sourceVersion?: String;

  /**
   * Target system that the concepts are to be mapped to
   *
   * @generated from field: google.fhir.r4.core.Uri target = 6;
   */
  target?: Uri;

  /**
   * Specific version of the  code system
   *
   * @generated from field: google.fhir.r4.core.String target_version = 7;
   */
  targetVersion?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.ConceptMap.Group.SourceElement element = 8;
   */
  element: ConceptMap_Group_SourceElement[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ConceptMap.Group.Unmapped unmapped = 9;
   */
  unmapped?: ConceptMap_Group_Unmapped;

  constructor(data?: PartialMessage<ConceptMap_Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "source", kind: "message", T: Uri },
    { no: 5, name: "source_version", kind: "message", T: String },
    { no: 6, name: "target", kind: "message", T: Uri },
    { no: 7, name: "target_version", kind: "message", T: String },
    { no: 8, name: "element", kind: "message", T: ConceptMap_Group_SourceElement, repeated: true },
    { no: 9, name: "unmapped", kind: "message", T: ConceptMap_Group_Unmapped },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group {
    return new ConceptMap_Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group {
    return new ConceptMap_Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group {
    return new ConceptMap_Group().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group | PlainMessage<ConceptMap_Group> | undefined, b: ConceptMap_Group | PlainMessage<ConceptMap_Group> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group, a, b);
  }
}

/**
 * Mappings for a concept from the source set
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group.SourceElement
 */
export class ConceptMap_Group_SourceElement extends Message<ConceptMap_Group_SourceElement> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifies element being mapped
   *
   * @generated from field: google.fhir.r4.core.Code code = 4;
   */
  code?: Code;

  /**
   * Display for the code
   *
   * @generated from field: google.fhir.r4.core.String display = 5;
   */
  display?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement target = 6;
   */
  target: ConceptMap_Group_SourceElement_TargetElement[] = [];

  constructor(data?: PartialMessage<ConceptMap_Group_SourceElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group.SourceElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: Code },
    { no: 5, name: "display", kind: "message", T: String },
    { no: 6, name: "target", kind: "message", T: ConceptMap_Group_SourceElement_TargetElement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group_SourceElement {
    return new ConceptMap_Group_SourceElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement {
    return new ConceptMap_Group_SourceElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement {
    return new ConceptMap_Group_SourceElement().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group_SourceElement | PlainMessage<ConceptMap_Group_SourceElement> | undefined, b: ConceptMap_Group_SourceElement | PlainMessage<ConceptMap_Group_SourceElement> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group_SourceElement, a, b);
  }
}

/**
 * Concept in target system for element
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement
 */
export class ConceptMap_Group_SourceElement_TargetElement extends Message<ConceptMap_Group_SourceElement_TargetElement> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Code that identifies the target element
   *
   * @generated from field: google.fhir.r4.core.Code code = 4;
   */
  code?: Code;

  /**
   * Display for the code
   *
   * @generated from field: google.fhir.r4.core.String display = 5;
   */
  display?: String;

  /**
   * @generated from field: google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.EquivalenceCode equivalence = 6;
   */
  equivalence?: ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode;

  /**
   * Description of status/issues in mapping
   *
   * @generated from field: google.fhir.r4.core.String comment = 7;
   */
  comment?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.OtherElement depends_on = 8;
   */
  dependsOn: ConceptMap_Group_SourceElement_TargetElement_OtherElement[] = [];

  /**
   * Other concepts that this mapping also produces
   *
   * @generated from field: repeated google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.OtherElement product = 9;
   */
  product: ConceptMap_Group_SourceElement_TargetElement_OtherElement[] = [];

  constructor(data?: PartialMessage<ConceptMap_Group_SourceElement_TargetElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: Code },
    { no: 5, name: "display", kind: "message", T: String },
    { no: 6, name: "equivalence", kind: "message", T: ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode },
    { no: 7, name: "comment", kind: "message", T: String },
    { no: 8, name: "depends_on", kind: "message", T: ConceptMap_Group_SourceElement_TargetElement_OtherElement, repeated: true },
    { no: 9, name: "product", kind: "message", T: ConceptMap_Group_SourceElement_TargetElement_OtherElement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group_SourceElement_TargetElement {
    return new ConceptMap_Group_SourceElement_TargetElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement_TargetElement {
    return new ConceptMap_Group_SourceElement_TargetElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement_TargetElement {
    return new ConceptMap_Group_SourceElement_TargetElement().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group_SourceElement_TargetElement | PlainMessage<ConceptMap_Group_SourceElement_TargetElement> | undefined, b: ConceptMap_Group_SourceElement_TargetElement | PlainMessage<ConceptMap_Group_SourceElement_TargetElement> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group_SourceElement_TargetElement, a, b);
  }
}

/**
 * relatedto | equivalent | equal | wider | subsumes | narrower |
 * specializes | inexact | unmatched | disjoint
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.EquivalenceCode
 */
export class ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode extends Message<ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode> {
  /**
   * @generated from field: google.fhir.r4.core.ConceptMapEquivalenceCode.Value value = 1;
   */
  value = ConceptMapEquivalenceCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.EquivalenceCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ConceptMapEquivalenceCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode {
    return new ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode {
    return new ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode {
    return new ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode | PlainMessage<ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode> | undefined, b: ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode | PlainMessage<ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group_SourceElement_TargetElement_EquivalenceCode, a, b);
  }
}

/**
 * Other elements required for this mapping (from context)
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.OtherElement
 */
export class ConceptMap_Group_SourceElement_TargetElement_OtherElement extends Message<ConceptMap_Group_SourceElement_TargetElement_OtherElement> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Reference to property mapping depends on
   *
   * @generated from field: google.fhir.r4.core.Uri property = 4;
   */
  property?: Uri;

  /**
   * Code System (if necessary)
   *
   * @generated from field: google.fhir.r4.core.Canonical system = 5;
   */
  system?: Canonical;

  /**
   * Value of the referenced element
   *
   * @generated from field: google.fhir.r4.core.String value = 6;
   */
  value?: String;

  /**
   * Display for the code (if value is a code)
   *
   * @generated from field: google.fhir.r4.core.String display = 7;
   */
  display?: String;

  constructor(data?: PartialMessage<ConceptMap_Group_SourceElement_TargetElement_OtherElement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group.SourceElement.TargetElement.OtherElement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "property", kind: "message", T: Uri },
    { no: 5, name: "system", kind: "message", T: Canonical },
    { no: 6, name: "value", kind: "message", T: String },
    { no: 7, name: "display", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group_SourceElement_TargetElement_OtherElement {
    return new ConceptMap_Group_SourceElement_TargetElement_OtherElement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement_TargetElement_OtherElement {
    return new ConceptMap_Group_SourceElement_TargetElement_OtherElement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group_SourceElement_TargetElement_OtherElement {
    return new ConceptMap_Group_SourceElement_TargetElement_OtherElement().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group_SourceElement_TargetElement_OtherElement | PlainMessage<ConceptMap_Group_SourceElement_TargetElement_OtherElement> | undefined, b: ConceptMap_Group_SourceElement_TargetElement_OtherElement | PlainMessage<ConceptMap_Group_SourceElement_TargetElement_OtherElement> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group_SourceElement_TargetElement_OtherElement, a, b);
  }
}

/**
 * What to do when there is no mapping for the source concept
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group.Unmapped
 */
export class ConceptMap_Group_Unmapped extends Message<ConceptMap_Group_Unmapped> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ConceptMap.Group.Unmapped.ModeCode mode = 4;
   */
  mode?: ConceptMap_Group_Unmapped_ModeCode;

  /**
   * Fixed code when mode = fixed
   *
   * @generated from field: google.fhir.r4.core.Code code = 5;
   */
  code?: Code;

  /**
   * Display for the code
   *
   * @generated from field: google.fhir.r4.core.String display = 6;
   */
  display?: String;

  /**
   * canonical reference to an additional ConceptMap to use for mapping if
   * the source concept is unmapped
   *
   * @generated from field: google.fhir.r4.core.Canonical url = 7;
   */
  url?: Canonical;

  constructor(data?: PartialMessage<ConceptMap_Group_Unmapped>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group.Unmapped";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "mode", kind: "message", T: ConceptMap_Group_Unmapped_ModeCode },
    { no: 5, name: "code", kind: "message", T: Code },
    { no: 6, name: "display", kind: "message", T: String },
    { no: 7, name: "url", kind: "message", T: Canonical },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group_Unmapped {
    return new ConceptMap_Group_Unmapped().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group_Unmapped {
    return new ConceptMap_Group_Unmapped().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group_Unmapped {
    return new ConceptMap_Group_Unmapped().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group_Unmapped | PlainMessage<ConceptMap_Group_Unmapped> | undefined, b: ConceptMap_Group_Unmapped | PlainMessage<ConceptMap_Group_Unmapped> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group_Unmapped, a, b);
  }
}

/**
 * provided | fixed | other-map
 *
 * @generated from message google.fhir.r4.core.ConceptMap.Group.Unmapped.ModeCode
 */
export class ConceptMap_Group_Unmapped_ModeCode extends Message<ConceptMap_Group_Unmapped_ModeCode> {
  /**
   * @generated from field: google.fhir.r4.core.ConceptMapGroupUnmappedModeCode.Value value = 1;
   */
  value = ConceptMapGroupUnmappedModeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ConceptMap_Group_Unmapped_ModeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ConceptMap.Group.Unmapped.ModeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ConceptMapGroupUnmappedModeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConceptMap_Group_Unmapped_ModeCode {
    return new ConceptMap_Group_Unmapped_ModeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConceptMap_Group_Unmapped_ModeCode {
    return new ConceptMap_Group_Unmapped_ModeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConceptMap_Group_Unmapped_ModeCode {
    return new ConceptMap_Group_Unmapped_ModeCode().fromJsonString(jsonString, options);
  }

  static equals(a: ConceptMap_Group_Unmapped_ModeCode | PlainMessage<ConceptMap_Group_Unmapped_ModeCode> | undefined, b: ConceptMap_Group_Unmapped_ModeCode | PlainMessage<ConceptMap_Group_Unmapped_ModeCode> | undefined): boolean {
    return proto3.util.equals(ConceptMap_Group_Unmapped_ModeCode, a, b);
  }
}

