//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/effect_evidence_synthesis.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, ContactDetail, Date, DateTime, Decimal, Extension, Id, Identifier, Integer, Markdown, Meta, Narrative, Period, Reference, RelatedArtifact, String, Uri, UsageContext } from "../datatypes_pb.js";
import { ExposureStateCode_Value, PublicationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for EffectEvidenceSynthesis.
 * A quantified estimate of effect based on a body of evidence.
 * See http://hl7.org/fhir/StructureDefinition/EffectEvidenceSynthesis
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis
 */
export class EffectEvidenceSynthesis extends Message<EffectEvidenceSynthesis> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Canonical identifier for this effect evidence synthesis, represented as a
   * URI (globally unique)
   *
   * @generated from field: google.fhir.r4.core.Uri url = 10;
   */
  url?: Uri;

  /**
   * Additional identifier for the effect evidence synthesis
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 11;
   */
  identifier: Identifier[] = [];

  /**
   * Business version of the effect evidence synthesis
   *
   * @generated from field: google.fhir.r4.core.String version = 12;
   */
  version?: String;

  /**
   * Name for this effect evidence synthesis (computer friendly)
   *
   * @generated from field: google.fhir.r4.core.String name = 13;
   */
  name?: String;

  /**
   * Name for this effect evidence synthesis (human friendly)
   *
   * @generated from field: google.fhir.r4.core.String title = 14;
   */
  title?: String;

  /**
   * @generated from field: google.fhir.r4.core.EffectEvidenceSynthesis.StatusCode status = 15;
   */
  status?: EffectEvidenceSynthesis_StatusCode;

  /**
   * Date last changed
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 16;
   */
  date?: DateTime;

  /**
   * Name of the publisher (organization or individual)
   *
   * @generated from field: google.fhir.r4.core.String publisher = 17;
   */
  publisher?: String;

  /**
   * Contact details for the publisher
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail contact = 18;
   */
  contact: ContactDetail[] = [];

  /**
   * Natural language description of the effect evidence synthesis
   *
   * @generated from field: google.fhir.r4.core.Markdown description = 19;
   */
  description?: Markdown;

  /**
   * Used for footnotes or explanatory notes
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 20;
   */
  note: Annotation[] = [];

  /**
   * The context that the content is intended to support
   *
   * @generated from field: repeated google.fhir.r4.core.UsageContext use_context = 21;
   */
  useContext: UsageContext[] = [];

  /**
   * Intended jurisdiction for effect evidence synthesis (if applicable)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 22;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * Use and/or publishing restrictions
   *
   * @generated from field: google.fhir.r4.core.Markdown copyright = 23;
   */
  copyright?: Markdown;

  /**
   * When the effect evidence synthesis was approved by publisher
   *
   * @generated from field: google.fhir.r4.core.Date approval_date = 24;
   */
  approvalDate?: Date;

  /**
   * When the effect evidence synthesis was last reviewed
   *
   * @generated from field: google.fhir.r4.core.Date last_review_date = 25;
   */
  lastReviewDate?: Date;

  /**
   * When the effect evidence synthesis is expected to be used
   *
   * @generated from field: google.fhir.r4.core.Period effective_period = 26;
   */
  effectivePeriod?: Period;

  /**
   * The category of the EffectEvidenceSynthesis, such as Education, Treatment,
   * Assessment, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept topic = 27;
   */
  topic: CodeableConcept[] = [];

  /**
   * Who authored the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail author = 28;
   */
  author: ContactDetail[] = [];

  /**
   * Who edited the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail editor = 29;
   */
  editor: ContactDetail[] = [];

  /**
   * Who reviewed the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail reviewer = 30;
   */
  reviewer: ContactDetail[] = [];

  /**
   * Who endorsed the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail endorser = 31;
   */
  endorser: ContactDetail[] = [];

  /**
   * Additional documentation, citations, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.RelatedArtifact related_artifact = 32;
   */
  relatedArtifact: RelatedArtifact[] = [];

  /**
   * Type of synthesis
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept synthesis_type = 33;
   */
  synthesisType?: CodeableConcept;

  /**
   * Type of study
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept study_type = 34;
   */
  studyType?: CodeableConcept;

  /**
   * What population?
   *
   * @generated from field: google.fhir.r4.core.Reference population = 35;
   */
  population?: Reference;

  /**
   * What exposure?
   *
   * @generated from field: google.fhir.r4.core.Reference exposure = 36;
   */
  exposure?: Reference;

  /**
   * What comparison exposure?
   *
   * @generated from field: google.fhir.r4.core.Reference exposure_alternative = 37;
   */
  exposureAlternative?: Reference;

  /**
   * What outcome?
   *
   * @generated from field: google.fhir.r4.core.Reference outcome = 38;
   */
  outcome?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.EffectEvidenceSynthesis.SampleSize sample_size = 39;
   */
  sampleSize?: EffectEvidenceSynthesis_SampleSize;

  /**
   * @generated from field: repeated google.fhir.r4.core.EffectEvidenceSynthesis.ResultsByExposure results_by_exposure = 40;
   */
  resultsByExposure: EffectEvidenceSynthesis_ResultsByExposure[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.EffectEvidenceSynthesis.EffectEstimate effect_estimate = 41;
   */
  effectEstimate: EffectEvidenceSynthesis_EffectEstimate[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.EffectEvidenceSynthesis.Certainty certainty = 42;
   */
  certainty: EffectEvidenceSynthesis_Certainty[] = [];

  constructor(data?: PartialMessage<EffectEvidenceSynthesis>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "url", kind: "message", T: Uri },
    { no: 11, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 12, name: "version", kind: "message", T: String },
    { no: 13, name: "name", kind: "message", T: String },
    { no: 14, name: "title", kind: "message", T: String },
    { no: 15, name: "status", kind: "message", T: EffectEvidenceSynthesis_StatusCode },
    { no: 16, name: "date", kind: "message", T: DateTime },
    { no: 17, name: "publisher", kind: "message", T: String },
    { no: 18, name: "contact", kind: "message", T: ContactDetail, repeated: true },
    { no: 19, name: "description", kind: "message", T: Markdown },
    { no: 20, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 21, name: "use_context", kind: "message", T: UsageContext, repeated: true },
    { no: 22, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 23, name: "copyright", kind: "message", T: Markdown },
    { no: 24, name: "approval_date", kind: "message", T: Date },
    { no: 25, name: "last_review_date", kind: "message", T: Date },
    { no: 26, name: "effective_period", kind: "message", T: Period },
    { no: 27, name: "topic", kind: "message", T: CodeableConcept, repeated: true },
    { no: 28, name: "author", kind: "message", T: ContactDetail, repeated: true },
    { no: 29, name: "editor", kind: "message", T: ContactDetail, repeated: true },
    { no: 30, name: "reviewer", kind: "message", T: ContactDetail, repeated: true },
    { no: 31, name: "endorser", kind: "message", T: ContactDetail, repeated: true },
    { no: 32, name: "related_artifact", kind: "message", T: RelatedArtifact, repeated: true },
    { no: 33, name: "synthesis_type", kind: "message", T: CodeableConcept },
    { no: 34, name: "study_type", kind: "message", T: CodeableConcept },
    { no: 35, name: "population", kind: "message", T: Reference },
    { no: 36, name: "exposure", kind: "message", T: Reference },
    { no: 37, name: "exposure_alternative", kind: "message", T: Reference },
    { no: 38, name: "outcome", kind: "message", T: Reference },
    { no: 39, name: "sample_size", kind: "message", T: EffectEvidenceSynthesis_SampleSize },
    { no: 40, name: "results_by_exposure", kind: "message", T: EffectEvidenceSynthesis_ResultsByExposure, repeated: true },
    { no: 41, name: "effect_estimate", kind: "message", T: EffectEvidenceSynthesis_EffectEstimate, repeated: true },
    { no: 42, name: "certainty", kind: "message", T: EffectEvidenceSynthesis_Certainty, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis {
    return new EffectEvidenceSynthesis().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis {
    return new EffectEvidenceSynthesis().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis {
    return new EffectEvidenceSynthesis().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis | PlainMessage<EffectEvidenceSynthesis> | undefined, b: EffectEvidenceSynthesis | PlainMessage<EffectEvidenceSynthesis> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis, a, b);
  }
}

/**
 * draft | active | retired | unknown
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.StatusCode
 */
export class EffectEvidenceSynthesis_StatusCode extends Message<EffectEvidenceSynthesis_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.PublicationStatusCode.Value value = 1;
   */
  value = PublicationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(PublicationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_StatusCode {
    return new EffectEvidenceSynthesis_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_StatusCode {
    return new EffectEvidenceSynthesis_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_StatusCode {
    return new EffectEvidenceSynthesis_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_StatusCode | PlainMessage<EffectEvidenceSynthesis_StatusCode> | undefined, b: EffectEvidenceSynthesis_StatusCode | PlainMessage<EffectEvidenceSynthesis_StatusCode> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_StatusCode, a, b);
  }
}

/**
 * What sample size was involved?
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.SampleSize
 */
export class EffectEvidenceSynthesis_SampleSize extends Message<EffectEvidenceSynthesis_SampleSize> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Description of sample size
   *
   * @generated from field: google.fhir.r4.core.String description = 4;
   */
  description?: String;

  /**
   * How many studies?
   *
   * @generated from field: google.fhir.r4.core.Integer number_of_studies = 5;
   */
  numberOfStudies?: Integer;

  /**
   * How many participants?
   *
   * @generated from field: google.fhir.r4.core.Integer number_of_participants = 6;
   */
  numberOfParticipants?: Integer;

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_SampleSize>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.SampleSize";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "description", kind: "message", T: String },
    { no: 5, name: "number_of_studies", kind: "message", T: Integer },
    { no: 6, name: "number_of_participants", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_SampleSize {
    return new EffectEvidenceSynthesis_SampleSize().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_SampleSize {
    return new EffectEvidenceSynthesis_SampleSize().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_SampleSize {
    return new EffectEvidenceSynthesis_SampleSize().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_SampleSize | PlainMessage<EffectEvidenceSynthesis_SampleSize> | undefined, b: EffectEvidenceSynthesis_SampleSize | PlainMessage<EffectEvidenceSynthesis_SampleSize> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_SampleSize, a, b);
  }
}

/**
 * What was the result per exposure?
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.ResultsByExposure
 */
export class EffectEvidenceSynthesis_ResultsByExposure extends Message<EffectEvidenceSynthesis_ResultsByExposure> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Description of results by exposure
   *
   * @generated from field: google.fhir.r4.core.String description = 4;
   */
  description?: String;

  /**
   * @generated from field: google.fhir.r4.core.EffectEvidenceSynthesis.ResultsByExposure.ExposureStateCode exposure_state = 5;
   */
  exposureState?: EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode;

  /**
   * Variant exposure states
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept variant_state = 6;
   */
  variantState?: CodeableConcept;

  /**
   * Risk evidence synthesis
   *
   * @generated from field: google.fhir.r4.core.Reference risk_evidence_synthesis = 7;
   */
  riskEvidenceSynthesis?: Reference;

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_ResultsByExposure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.ResultsByExposure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "description", kind: "message", T: String },
    { no: 5, name: "exposure_state", kind: "message", T: EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode },
    { no: 6, name: "variant_state", kind: "message", T: CodeableConcept },
    { no: 7, name: "risk_evidence_synthesis", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_ResultsByExposure {
    return new EffectEvidenceSynthesis_ResultsByExposure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_ResultsByExposure {
    return new EffectEvidenceSynthesis_ResultsByExposure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_ResultsByExposure {
    return new EffectEvidenceSynthesis_ResultsByExposure().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_ResultsByExposure | PlainMessage<EffectEvidenceSynthesis_ResultsByExposure> | undefined, b: EffectEvidenceSynthesis_ResultsByExposure | PlainMessage<EffectEvidenceSynthesis_ResultsByExposure> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_ResultsByExposure, a, b);
  }
}

/**
 * exposure | exposure-alternative
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.ResultsByExposure.ExposureStateCode
 */
export class EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode extends Message<EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode> {
  /**
   * @generated from field: google.fhir.r4.core.ExposureStateCode.Value value = 1;
   */
  value = ExposureStateCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.ResultsByExposure.ExposureStateCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ExposureStateCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode {
    return new EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode {
    return new EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode {
    return new EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode | PlainMessage<EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode> | undefined, b: EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode | PlainMessage<EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_ResultsByExposure_ExposureStateCode, a, b);
  }
}

/**
 * What was the estimated effect
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.EffectEstimate
 */
export class EffectEvidenceSynthesis_EffectEstimate extends Message<EffectEvidenceSynthesis_EffectEstimate> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Description of effect estimate
   *
   * @generated from field: google.fhir.r4.core.String description = 4;
   */
  description?: String;

  /**
   * Type of efffect estimate
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Variant exposure states
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept variant_state = 6;
   */
  variantState?: CodeableConcept;

  /**
   * Point estimate
   *
   * @generated from field: google.fhir.r4.core.Decimal value = 7;
   */
  value?: Decimal;

  /**
   * What unit is the outcome described in?
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept unit_of_measure = 8;
   */
  unitOfMeasure?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate precision_estimate = 9;
   */
  precisionEstimate: EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate[] = [];

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_EffectEstimate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.EffectEstimate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "description", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "variant_state", kind: "message", T: CodeableConcept },
    { no: 7, name: "value", kind: "message", T: Decimal },
    { no: 8, name: "unit_of_measure", kind: "message", T: CodeableConcept },
    { no: 9, name: "precision_estimate", kind: "message", T: EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_EffectEstimate {
    return new EffectEvidenceSynthesis_EffectEstimate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_EffectEstimate {
    return new EffectEvidenceSynthesis_EffectEstimate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_EffectEstimate {
    return new EffectEvidenceSynthesis_EffectEstimate().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_EffectEstimate | PlainMessage<EffectEvidenceSynthesis_EffectEstimate> | undefined, b: EffectEvidenceSynthesis_EffectEstimate | PlainMessage<EffectEvidenceSynthesis_EffectEstimate> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_EffectEstimate, a, b);
  }
}

/**
 * How precise the estimate is
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate
 */
export class EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate extends Message<EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of precision estimate
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Level of confidence interval
   *
   * @generated from field: google.fhir.r4.core.Decimal level = 5;
   */
  level?: Decimal;

  /**
   * Lower bound
   *
   * @generated from field: google.fhir.r4.core.Decimal from = 6;
   */
  from?: Decimal;

  /**
   * Upper bound
   *
   * @generated from field: google.fhir.r4.core.Decimal to = 7;
   */
  to?: Decimal;

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "level", kind: "message", T: Decimal },
    { no: 6, name: "from", kind: "message", T: Decimal },
    { no: 7, name: "to", kind: "message", T: Decimal },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate {
    return new EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate {
    return new EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate {
    return new EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate | PlainMessage<EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate> | undefined, b: EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate | PlainMessage<EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_EffectEstimate_PrecisionEstimate, a, b);
  }
}

/**
 * How certain is the effect
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.Certainty
 */
export class EffectEvidenceSynthesis_Certainty extends Message<EffectEvidenceSynthesis_Certainty> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Certainty rating
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept rating = 4;
   */
  rating: CodeableConcept[] = [];

  /**
   * Used for footnotes or explanatory notes
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 5;
   */
  note: Annotation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.EffectEvidenceSynthesis.Certainty.CertaintySubcomponent certainty_subcomponent = 6;
   */
  certaintySubcomponent: EffectEvidenceSynthesis_Certainty_CertaintySubcomponent[] = [];

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_Certainty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.Certainty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "rating", kind: "message", T: CodeableConcept, repeated: true },
    { no: 5, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 6, name: "certainty_subcomponent", kind: "message", T: EffectEvidenceSynthesis_Certainty_CertaintySubcomponent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_Certainty {
    return new EffectEvidenceSynthesis_Certainty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_Certainty {
    return new EffectEvidenceSynthesis_Certainty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_Certainty {
    return new EffectEvidenceSynthesis_Certainty().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_Certainty | PlainMessage<EffectEvidenceSynthesis_Certainty> | undefined, b: EffectEvidenceSynthesis_Certainty | PlainMessage<EffectEvidenceSynthesis_Certainty> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_Certainty, a, b);
  }
}

/**
 * A component that contributes to the overall certainty
 *
 * @generated from message google.fhir.r4.core.EffectEvidenceSynthesis.Certainty.CertaintySubcomponent
 */
export class EffectEvidenceSynthesis_Certainty_CertaintySubcomponent extends Message<EffectEvidenceSynthesis_Certainty_CertaintySubcomponent> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Type of subcomponent of certainty rating
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Subcomponent certainty rating
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept rating = 5;
   */
  rating: CodeableConcept[] = [];

  /**
   * Used for footnotes or explanatory notes
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 6;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<EffectEvidenceSynthesis_Certainty_CertaintySubcomponent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.EffectEvidenceSynthesis.Certainty.CertaintySubcomponent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "rating", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EffectEvidenceSynthesis_Certainty_CertaintySubcomponent {
    return new EffectEvidenceSynthesis_Certainty_CertaintySubcomponent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_Certainty_CertaintySubcomponent {
    return new EffectEvidenceSynthesis_Certainty_CertaintySubcomponent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EffectEvidenceSynthesis_Certainty_CertaintySubcomponent {
    return new EffectEvidenceSynthesis_Certainty_CertaintySubcomponent().fromJsonString(jsonString, options);
  }

  static equals(a: EffectEvidenceSynthesis_Certainty_CertaintySubcomponent | PlainMessage<EffectEvidenceSynthesis_Certainty_CertaintySubcomponent> | undefined, b: EffectEvidenceSynthesis_Certainty_CertaintySubcomponent | PlainMessage<EffectEvidenceSynthesis_Certainty_CertaintySubcomponent> | undefined): boolean {
    return proto3.util.equals(EffectEvidenceSynthesis_Certainty_CertaintySubcomponent, a, b);
  }
}

