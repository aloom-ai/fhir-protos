//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medicinal_product.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Code, CodeableConcept, Coding, DateTime, Extension, Id, Identifier, MarketingStatus, Meta, Narrative, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicinalProduct.
 * Detailed definition of a medicinal product, typically for uses other than
 * direct patient care (e.g. regulatory use). See
 * http://hl7.org/fhir/StructureDefinition/MedicinalProduct
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct
 */
export class MedicinalProduct extends Message<MedicinalProduct> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier for this product. Could be an MPID
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Regulatory type, e.g. Investigational or Authorized
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 11;
   */
  type?: CodeableConcept;

  /**
   * If this medicine applies to human or veterinary uses
   *
   * @generated from field: google.fhir.r4.core.Coding domain = 12;
   */
  domain?: Coding;

  /**
   * The dose form for a single part product, or combined form of a multiple
   * part product
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept combined_pharmaceutical_dose_form = 13;
   */
  combinedPharmaceuticalDoseForm?: CodeableConcept;

  /**
   * The legal status of supply of the medicinal product as classified by the
   * regulator
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept legal_status_of_supply = 14;
   */
  legalStatusOfSupply?: CodeableConcept;

  /**
   * Whether the Medicinal Product is subject to additional monitoring for
   * regulatory reasons
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept additional_monitoring_indicator = 15;
   */
  additionalMonitoringIndicator?: CodeableConcept;

  /**
   * Whether the Medicinal Product is subject to special measures for regulatory
   * reasons
   *
   * @generated from field: repeated google.fhir.r4.core.String special_measures = 16;
   */
  specialMeasures: String[] = [];

  /**
   * If authorised for use in children
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept paediatric_use_indicator = 17;
   */
  paediatricUseIndicator?: CodeableConcept;

  /**
   * Allows the product to be classified by various systems
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept product_classification = 18;
   */
  productClassification: CodeableConcept[] = [];

  /**
   * Marketing status of the medicinal product, in contrast to marketing
   * authorizaton
   *
   * @generated from field: repeated google.fhir.r4.core.MarketingStatus marketing_status = 19;
   */
  marketingStatus: MarketingStatus[] = [];

  /**
   * Pharmaceutical aspects of product
   *
   * @generated from field: repeated google.fhir.r4.core.Reference pharmaceutical_product = 20;
   */
  pharmaceuticalProduct: Reference[] = [];

  /**
   * Package representation for the product
   *
   * @generated from field: repeated google.fhir.r4.core.Reference packaged_medicinal_product = 21;
   */
  packagedMedicinalProduct: Reference[] = [];

  /**
   * Supporting documentation, typically for regulatory submission
   *
   * @generated from field: repeated google.fhir.r4.core.Reference attached_document = 22;
   */
  attachedDocument: Reference[] = [];

  /**
   * A master file for to the medicinal product (e.g. Pharmacovigilance System
   * Master File)
   *
   * @generated from field: repeated google.fhir.r4.core.Reference master_file = 23;
   */
  masterFile: Reference[] = [];

  /**
   * A product specific contact, person (in a role), or an organization
   *
   * @generated from field: repeated google.fhir.r4.core.Reference contact = 24;
   */
  contact: Reference[] = [];

  /**
   * Clinical trials or studies that this product is involved in
   *
   * @generated from field: repeated google.fhir.r4.core.Reference clinical_trial = 25;
   */
  clinicalTrial: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProduct.Name name = 26;
   */
  name: MedicinalProduct_Name[] = [];

  /**
   * Reference to another product, e.g. for linking authorised to
   * investigational product
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier cross_reference = 27;
   */
  crossReference: Identifier[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation manufacturing_business_operation = 28;
   */
  manufacturingBusinessOperation: MedicinalProduct_ManufacturingBusinessOperation[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProduct.SpecialDesignation special_designation = 29;
   */
  specialDesignation: MedicinalProduct_SpecialDesignation[] = [];

  constructor(data?: PartialMessage<MedicinalProduct>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "type", kind: "message", T: CodeableConcept },
    { no: 12, name: "domain", kind: "message", T: Coding },
    { no: 13, name: "combined_pharmaceutical_dose_form", kind: "message", T: CodeableConcept },
    { no: 14, name: "legal_status_of_supply", kind: "message", T: CodeableConcept },
    { no: 15, name: "additional_monitoring_indicator", kind: "message", T: CodeableConcept },
    { no: 16, name: "special_measures", kind: "message", T: String, repeated: true },
    { no: 17, name: "paediatric_use_indicator", kind: "message", T: CodeableConcept },
    { no: 18, name: "product_classification", kind: "message", T: CodeableConcept, repeated: true },
    { no: 19, name: "marketing_status", kind: "message", T: MarketingStatus, repeated: true },
    { no: 20, name: "pharmaceutical_product", kind: "message", T: Reference, repeated: true },
    { no: 21, name: "packaged_medicinal_product", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "attached_document", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "master_file", kind: "message", T: Reference, repeated: true },
    { no: 24, name: "contact", kind: "message", T: Reference, repeated: true },
    { no: 25, name: "clinical_trial", kind: "message", T: Reference, repeated: true },
    { no: 26, name: "name", kind: "message", T: MedicinalProduct_Name, repeated: true },
    { no: 27, name: "cross_reference", kind: "message", T: Identifier, repeated: true },
    { no: 28, name: "manufacturing_business_operation", kind: "message", T: MedicinalProduct_ManufacturingBusinessOperation, repeated: true },
    { no: 29, name: "special_designation", kind: "message", T: MedicinalProduct_SpecialDesignation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct {
    return new MedicinalProduct().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct {
    return new MedicinalProduct().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct {
    return new MedicinalProduct().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct | PlainMessage<MedicinalProduct> | undefined, b: MedicinalProduct | PlainMessage<MedicinalProduct> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct, a, b);
  }
}

/**
 * The product's name, including full name and possibly coded parts
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct.Name
 */
export class MedicinalProduct_Name extends Message<MedicinalProduct_Name> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The full product name
   *
   * @generated from field: google.fhir.r4.core.String product_name = 4;
   */
  productName?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProduct.Name.NamePart name_part = 5;
   */
  namePart: MedicinalProduct_Name_NamePart[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage country_language = 6;
   */
  countryLanguage: MedicinalProduct_Name_CountryLanguage[] = [];

  constructor(data?: PartialMessage<MedicinalProduct_Name>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct.Name";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "product_name", kind: "message", T: String },
    { no: 5, name: "name_part", kind: "message", T: MedicinalProduct_Name_NamePart, repeated: true },
    { no: 6, name: "country_language", kind: "message", T: MedicinalProduct_Name_CountryLanguage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct_Name {
    return new MedicinalProduct_Name().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct_Name {
    return new MedicinalProduct_Name().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct_Name {
    return new MedicinalProduct_Name().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct_Name | PlainMessage<MedicinalProduct_Name> | undefined, b: MedicinalProduct_Name | PlainMessage<MedicinalProduct_Name> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct_Name, a, b);
  }
}

/**
 * Coding words or phrases of the name
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct.Name.NamePart
 */
export class MedicinalProduct_Name_NamePart extends Message<MedicinalProduct_Name_NamePart> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * A fragment of a product name
   *
   * @generated from field: google.fhir.r4.core.String part = 4;
   */
  part?: String;

  /**
   * Idenifying type for this part of the name (e.g. strength part)
   *
   * @generated from field: google.fhir.r4.core.Coding type = 5;
   */
  type?: Coding;

  constructor(data?: PartialMessage<MedicinalProduct_Name_NamePart>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct.Name.NamePart";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "part", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: Coding },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct_Name_NamePart {
    return new MedicinalProduct_Name_NamePart().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct_Name_NamePart {
    return new MedicinalProduct_Name_NamePart().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct_Name_NamePart {
    return new MedicinalProduct_Name_NamePart().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct_Name_NamePart | PlainMessage<MedicinalProduct_Name_NamePart> | undefined, b: MedicinalProduct_Name_NamePart | PlainMessage<MedicinalProduct_Name_NamePart> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct_Name_NamePart, a, b);
  }
}

/**
 * Country where the name applies
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage
 */
export class MedicinalProduct_Name_CountryLanguage extends Message<MedicinalProduct_Name_CountryLanguage> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Country code for where this name applies
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept country = 4;
   */
  country?: CodeableConcept;

  /**
   * Jurisdiction code for where this name applies
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept jurisdiction = 5;
   */
  jurisdiction?: CodeableConcept;

  /**
   * Language code for this name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept language = 6;
   */
  language?: CodeableConcept;

  constructor(data?: PartialMessage<MedicinalProduct_Name_CountryLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct.Name.CountryLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "country", kind: "message", T: CodeableConcept },
    { no: 5, name: "jurisdiction", kind: "message", T: CodeableConcept },
    { no: 6, name: "language", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct_Name_CountryLanguage {
    return new MedicinalProduct_Name_CountryLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct_Name_CountryLanguage {
    return new MedicinalProduct_Name_CountryLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct_Name_CountryLanguage {
    return new MedicinalProduct_Name_CountryLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct_Name_CountryLanguage | PlainMessage<MedicinalProduct_Name_CountryLanguage> | undefined, b: MedicinalProduct_Name_CountryLanguage | PlainMessage<MedicinalProduct_Name_CountryLanguage> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct_Name_CountryLanguage, a, b);
  }
}

/**
 * An operation applied to the product, for manufacturing or adminsitrative
 * purpose
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation
 */
export class MedicinalProduct_ManufacturingBusinessOperation extends Message<MedicinalProduct_ManufacturingBusinessOperation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of manufacturing operation
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept operation_type = 4;
   */
  operationType?: CodeableConcept;

  /**
   * Regulatory authorization reference number
   *
   * @generated from field: google.fhir.r4.core.Identifier authorisation_reference_number = 5;
   */
  authorisationReferenceNumber?: Identifier;

  /**
   * Regulatory authorization date
   *
   * @generated from field: google.fhir.r4.core.DateTime effective_date = 6;
   */
  effectiveDate?: DateTime;

  /**
   * To indicate if this proces is commercially confidential
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept confidentiality_indicator = 7;
   */
  confidentialityIndicator?: CodeableConcept;

  /**
   * The manufacturer or establishment associated with the process
   *
   * @generated from field: repeated google.fhir.r4.core.Reference manufacturer = 8;
   */
  manufacturer: Reference[] = [];

  /**
   * A regulator which oversees the operation
   *
   * @generated from field: google.fhir.r4.core.Reference regulator = 9;
   */
  regulator?: Reference;

  constructor(data?: PartialMessage<MedicinalProduct_ManufacturingBusinessOperation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct.ManufacturingBusinessOperation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "operation_type", kind: "message", T: CodeableConcept },
    { no: 5, name: "authorisation_reference_number", kind: "message", T: Identifier },
    { no: 6, name: "effective_date", kind: "message", T: DateTime },
    { no: 7, name: "confidentiality_indicator", kind: "message", T: CodeableConcept },
    { no: 8, name: "manufacturer", kind: "message", T: Reference, repeated: true },
    { no: 9, name: "regulator", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct_ManufacturingBusinessOperation {
    return new MedicinalProduct_ManufacturingBusinessOperation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct_ManufacturingBusinessOperation {
    return new MedicinalProduct_ManufacturingBusinessOperation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct_ManufacturingBusinessOperation {
    return new MedicinalProduct_ManufacturingBusinessOperation().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct_ManufacturingBusinessOperation | PlainMessage<MedicinalProduct_ManufacturingBusinessOperation> | undefined, b: MedicinalProduct_ManufacturingBusinessOperation | PlainMessage<MedicinalProduct_ManufacturingBusinessOperation> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct_ManufacturingBusinessOperation, a, b);
  }
}

/**
 * Indicates if the medicinal product has an orphan designation for the
 * treatment of a rare disease
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct.SpecialDesignation
 */
export class MedicinalProduct_SpecialDesignation extends Message<MedicinalProduct_SpecialDesignation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier for the designation, or procedure number
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier: Identifier[] = [];

  /**
   * The type of special designation, e.g. orphan drug, minor use
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * The intended use of the product, e.g. prevention, treatment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept intended_use = 6;
   */
  intendedUse?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX indication = 7;
   */
  indication?: MedicinalProduct_SpecialDesignation_IndicationX;

  /**
   * For example granted, pending, expired or withdrawn
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 8;
   */
  status?: CodeableConcept;

  /**
   * Date when the designation was granted
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 9;
   */
  date?: DateTime;

  /**
   * Animal species for which this applies
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept species = 10;
   */
  species?: CodeableConcept;

  constructor(data?: PartialMessage<MedicinalProduct_SpecialDesignation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct.SpecialDesignation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "intended_use", kind: "message", T: CodeableConcept },
    { no: 7, name: "indication", kind: "message", T: MedicinalProduct_SpecialDesignation_IndicationX },
    { no: 8, name: "status", kind: "message", T: CodeableConcept },
    { no: 9, name: "date", kind: "message", T: DateTime },
    { no: 10, name: "species", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct_SpecialDesignation {
    return new MedicinalProduct_SpecialDesignation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct_SpecialDesignation {
    return new MedicinalProduct_SpecialDesignation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct_SpecialDesignation {
    return new MedicinalProduct_SpecialDesignation().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct_SpecialDesignation | PlainMessage<MedicinalProduct_SpecialDesignation> | undefined, b: MedicinalProduct_SpecialDesignation | PlainMessage<MedicinalProduct_SpecialDesignation> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct_SpecialDesignation, a, b);
  }
}

/**
 * Condition for which the medicinal use applies
 *
 * @generated from message google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX
 */
export class MedicinalProduct_SpecialDesignation_IndicationX extends Message<MedicinalProduct_SpecialDesignation_IndicationX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicinalProduct_SpecialDesignation_IndicationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProduct.SpecialDesignation.IndicationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProduct_SpecialDesignation_IndicationX {
    return new MedicinalProduct_SpecialDesignation_IndicationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProduct_SpecialDesignation_IndicationX {
    return new MedicinalProduct_SpecialDesignation_IndicationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProduct_SpecialDesignation_IndicationX {
    return new MedicinalProduct_SpecialDesignation_IndicationX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProduct_SpecialDesignation_IndicationX | PlainMessage<MedicinalProduct_SpecialDesignation_IndicationX> | undefined, b: MedicinalProduct_SpecialDesignation_IndicationX | PlainMessage<MedicinalProduct_SpecialDesignation_IndicationX> | undefined): boolean {
    return proto3.util.equals(MedicinalProduct_SpecialDesignation_IndicationX, a, b);
  }
}

