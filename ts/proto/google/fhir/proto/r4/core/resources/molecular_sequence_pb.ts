//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/molecular_sequence.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, Decimal, Extension, Id, Identifier, Integer, Meta, Narrative, Quantity, Reference, String, Uri } from "../datatypes_pb.js";
import { OrientationTypeCode_Value, QualityTypeCode_Value, RepositoryTypeCode_Value, SequenceTypeCode_Value, StrandTypeCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for MolecularSequence.
 * Information about a biological sequence.
 * See http://hl7.org/fhir/StructureDefinition/MolecularSequence
 *
 * @generated from message google.fhir.r4.core.MolecularSequence
 */
export class MolecularSequence extends Message<MolecularSequence> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Unique ID for this particular sequence. This is a FHIR-defined id
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.TypeCode type = 11;
   */
  type?: MolecularSequence_TypeCode;

  /**
   * Base number of coordinate system (0 for 0-based numbering or coordinates,
   * inclusive start, exclusive end, 1 for 1-based numbering, inclusive start,
   * inclusive end)
   *
   * @generated from field: google.fhir.r4.core.Integer coordinate_system = 12;
   */
  coordinateSystem?: Integer;

  /**
   * Who and/or what this is about
   *
   * @generated from field: google.fhir.r4.core.Reference patient = 13;
   */
  patient?: Reference;

  /**
   * Specimen used for sequencing
   *
   * @generated from field: google.fhir.r4.core.Reference specimen = 14;
   */
  specimen?: Reference;

  /**
   * The method for sequencing
   *
   * @generated from field: google.fhir.r4.core.Reference device = 15;
   */
  device?: Reference;

  /**
   * Who should be responsible for test result
   *
   * @generated from field: google.fhir.r4.core.Reference performer = 16;
   */
  performer?: Reference;

  /**
   * The number of copies of the sequence of interest.  (RNASeq)
   *
   * @generated from field: google.fhir.r4.core.Quantity quantity = 17;
   */
  quantity?: Quantity;

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.ReferenceSeq reference_seq = 18;
   */
  referenceSeq?: MolecularSequence_ReferenceSeq;

  /**
   * @generated from field: repeated google.fhir.r4.core.MolecularSequence.Variant variant = 19;
   */
  variant: MolecularSequence_Variant[] = [];

  /**
   * Sequence that was observed
   *
   * @generated from field: google.fhir.r4.core.String observed_seq = 20;
   */
  observedSeq?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.MolecularSequence.Quality quality = 21;
   */
  quality: MolecularSequence_Quality[] = [];

  /**
   * Average number of reads representing a given nucleotide in the
   * reconstructed sequence
   *
   * @generated from field: google.fhir.r4.core.Integer read_coverage = 22;
   */
  readCoverage?: Integer;

  /**
   * @generated from field: repeated google.fhir.r4.core.MolecularSequence.Repository repository = 23;
   */
  repository: MolecularSequence_Repository[] = [];

  /**
   * Pointer to next atomic sequence
   *
   * @generated from field: repeated google.fhir.r4.core.Reference pointer = 24;
   */
  pointer: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MolecularSequence.StructureVariant structure_variant = 25;
   */
  structureVariant: MolecularSequence_StructureVariant[] = [];

  constructor(data?: PartialMessage<MolecularSequence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "type", kind: "message", T: MolecularSequence_TypeCode },
    { no: 12, name: "coordinate_system", kind: "message", T: Integer },
    { no: 13, name: "patient", kind: "message", T: Reference },
    { no: 14, name: "specimen", kind: "message", T: Reference },
    { no: 15, name: "device", kind: "message", T: Reference },
    { no: 16, name: "performer", kind: "message", T: Reference },
    { no: 17, name: "quantity", kind: "message", T: Quantity },
    { no: 18, name: "reference_seq", kind: "message", T: MolecularSequence_ReferenceSeq },
    { no: 19, name: "variant", kind: "message", T: MolecularSequence_Variant, repeated: true },
    { no: 20, name: "observed_seq", kind: "message", T: String },
    { no: 21, name: "quality", kind: "message", T: MolecularSequence_Quality, repeated: true },
    { no: 22, name: "read_coverage", kind: "message", T: Integer },
    { no: 23, name: "repository", kind: "message", T: MolecularSequence_Repository, repeated: true },
    { no: 24, name: "pointer", kind: "message", T: Reference, repeated: true },
    { no: 25, name: "structure_variant", kind: "message", T: MolecularSequence_StructureVariant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence {
    return new MolecularSequence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence {
    return new MolecularSequence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence {
    return new MolecularSequence().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence | PlainMessage<MolecularSequence> | undefined, b: MolecularSequence | PlainMessage<MolecularSequence> | undefined): boolean {
    return proto3.util.equals(MolecularSequence, a, b);
  }
}

/**
 * aa | dna | rna
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.TypeCode
 */
export class MolecularSequence_TypeCode extends Message<MolecularSequence_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.SequenceTypeCode.Value value = 1;
   */
  value = SequenceTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MolecularSequence_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(SequenceTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_TypeCode {
    return new MolecularSequence_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_TypeCode {
    return new MolecularSequence_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_TypeCode {
    return new MolecularSequence_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_TypeCode | PlainMessage<MolecularSequence_TypeCode> | undefined, b: MolecularSequence_TypeCode | PlainMessage<MolecularSequence_TypeCode> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_TypeCode, a, b);
  }
}

/**
 * A sequence used as reference
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.ReferenceSeq
 */
export class MolecularSequence_ReferenceSeq extends Message<MolecularSequence_ReferenceSeq> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Chromosome containing genetic finding
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept chromosome = 4;
   */
  chromosome?: CodeableConcept;

  /**
   * The Genome Build used for reference, following GRCh build versions e.g.
   * 'GRCh 37'
   *
   * @generated from field: google.fhir.r4.core.String genome_build = 5;
   */
  genomeBuild?: String;

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode orientation = 6;
   */
  orientation?: MolecularSequence_ReferenceSeq_OrientationCode;

  /**
   * Reference identifier
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept reference_seq_id = 7;
   */
  referenceSeqId?: CodeableConcept;

  /**
   * A pointer to another MolecularSequence entity as reference sequence
   *
   * @generated from field: google.fhir.r4.core.Reference reference_seq_pointer = 8;
   */
  referenceSeqPointer?: Reference;

  /**
   * A string to represent reference sequence
   *
   * @generated from field: google.fhir.r4.core.String reference_seq_string = 9;
   */
  referenceSeqString?: String;

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode strand = 10;
   */
  strand?: MolecularSequence_ReferenceSeq_StrandCode;

  /**
   * Start position of the window on the  reference sequence
   *
   * @generated from field: google.fhir.r4.core.Integer window_start = 11;
   */
  windowStart?: Integer;

  /**
   * End position of the window on the reference sequence
   *
   * @generated from field: google.fhir.r4.core.Integer window_end = 12;
   */
  windowEnd?: Integer;

  constructor(data?: PartialMessage<MolecularSequence_ReferenceSeq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.ReferenceSeq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "chromosome", kind: "message", T: CodeableConcept },
    { no: 5, name: "genome_build", kind: "message", T: String },
    { no: 6, name: "orientation", kind: "message", T: MolecularSequence_ReferenceSeq_OrientationCode },
    { no: 7, name: "reference_seq_id", kind: "message", T: CodeableConcept },
    { no: 8, name: "reference_seq_pointer", kind: "message", T: Reference },
    { no: 9, name: "reference_seq_string", kind: "message", T: String },
    { no: 10, name: "strand", kind: "message", T: MolecularSequence_ReferenceSeq_StrandCode },
    { no: 11, name: "window_start", kind: "message", T: Integer },
    { no: 12, name: "window_end", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_ReferenceSeq {
    return new MolecularSequence_ReferenceSeq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_ReferenceSeq {
    return new MolecularSequence_ReferenceSeq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_ReferenceSeq {
    return new MolecularSequence_ReferenceSeq().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_ReferenceSeq | PlainMessage<MolecularSequence_ReferenceSeq> | undefined, b: MolecularSequence_ReferenceSeq | PlainMessage<MolecularSequence_ReferenceSeq> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_ReferenceSeq, a, b);
  }
}

/**
 * sense | antisense
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode
 */
export class MolecularSequence_ReferenceSeq_OrientationCode extends Message<MolecularSequence_ReferenceSeq_OrientationCode> {
  /**
   * @generated from field: google.fhir.r4.core.OrientationTypeCode.Value value = 1;
   */
  value = OrientationTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MolecularSequence_ReferenceSeq_OrientationCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.ReferenceSeq.OrientationCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(OrientationTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_ReferenceSeq_OrientationCode {
    return new MolecularSequence_ReferenceSeq_OrientationCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_ReferenceSeq_OrientationCode {
    return new MolecularSequence_ReferenceSeq_OrientationCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_ReferenceSeq_OrientationCode {
    return new MolecularSequence_ReferenceSeq_OrientationCode().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_ReferenceSeq_OrientationCode | PlainMessage<MolecularSequence_ReferenceSeq_OrientationCode> | undefined, b: MolecularSequence_ReferenceSeq_OrientationCode | PlainMessage<MolecularSequence_ReferenceSeq_OrientationCode> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_ReferenceSeq_OrientationCode, a, b);
  }
}

/**
 * watson | crick
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode
 */
export class MolecularSequence_ReferenceSeq_StrandCode extends Message<MolecularSequence_ReferenceSeq_StrandCode> {
  /**
   * @generated from field: google.fhir.r4.core.StrandTypeCode.Value value = 1;
   */
  value = StrandTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MolecularSequence_ReferenceSeq_StrandCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.ReferenceSeq.StrandCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(StrandTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_ReferenceSeq_StrandCode {
    return new MolecularSequence_ReferenceSeq_StrandCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_ReferenceSeq_StrandCode {
    return new MolecularSequence_ReferenceSeq_StrandCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_ReferenceSeq_StrandCode {
    return new MolecularSequence_ReferenceSeq_StrandCode().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_ReferenceSeq_StrandCode | PlainMessage<MolecularSequence_ReferenceSeq_StrandCode> | undefined, b: MolecularSequence_ReferenceSeq_StrandCode | PlainMessage<MolecularSequence_ReferenceSeq_StrandCode> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_ReferenceSeq_StrandCode, a, b);
  }
}

/**
 * Variant in sequence
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.Variant
 */
export class MolecularSequence_Variant extends Message<MolecularSequence_Variant> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Start position of the variant on the  reference sequence
   *
   * @generated from field: google.fhir.r4.core.Integer start = 4;
   */
  start?: Integer;

  /**
   * End position of the variant on the reference sequence
   *
   * @generated from field: google.fhir.r4.core.Integer end = 5;
   */
  end?: Integer;

  /**
   * Allele that was observed
   *
   * @generated from field: google.fhir.r4.core.String observed_allele = 6;
   */
  observedAllele?: String;

  /**
   * Allele in the reference sequence
   *
   * @generated from field: google.fhir.r4.core.String reference_allele = 7;
   */
  referenceAllele?: String;

  /**
   * Extended CIGAR string for aligning the sequence with reference bases
   *
   * @generated from field: google.fhir.r4.core.String cigar = 8;
   */
  cigar?: String;

  /**
   * Pointer to observed variant information
   *
   * @generated from field: google.fhir.r4.core.Reference variant_pointer = 9;
   */
  variantPointer?: Reference;

  constructor(data?: PartialMessage<MolecularSequence_Variant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.Variant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "start", kind: "message", T: Integer },
    { no: 5, name: "end", kind: "message", T: Integer },
    { no: 6, name: "observed_allele", kind: "message", T: String },
    { no: 7, name: "reference_allele", kind: "message", T: String },
    { no: 8, name: "cigar", kind: "message", T: String },
    { no: 9, name: "variant_pointer", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_Variant {
    return new MolecularSequence_Variant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_Variant {
    return new MolecularSequence_Variant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_Variant {
    return new MolecularSequence_Variant().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_Variant | PlainMessage<MolecularSequence_Variant> | undefined, b: MolecularSequence_Variant | PlainMessage<MolecularSequence_Variant> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_Variant, a, b);
  }
}

/**
 * An set of value as quality of sequence
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.Quality
 */
export class MolecularSequence_Quality extends Message<MolecularSequence_Quality> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.Quality.TypeCode type = 4;
   */
  type?: MolecularSequence_Quality_TypeCode;

  /**
   * Standard sequence for comparison
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept standard_sequence = 5;
   */
  standardSequence?: CodeableConcept;

  /**
   * Start position of the sequence
   *
   * @generated from field: google.fhir.r4.core.Integer start = 6;
   */
  start?: Integer;

  /**
   * End position of the sequence
   *
   * @generated from field: google.fhir.r4.core.Integer end = 7;
   */
  end?: Integer;

  /**
   * Quality score for the comparison
   *
   * @generated from field: google.fhir.r4.core.Quantity score = 8;
   */
  score?: Quantity;

  /**
   * Method to get quality
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 9;
   */
  method?: CodeableConcept;

  /**
   * True positives from the perspective of the truth data
   *
   * @generated from field: google.fhir.r4.core.Decimal truth_tp = 10 [json_name = "truthTP"];
   */
  truthTp?: Decimal;

  /**
   * True positives from the perspective of the query data
   *
   * @generated from field: google.fhir.r4.core.Decimal query_tp = 11 [json_name = "queryTP"];
   */
  queryTp?: Decimal;

  /**
   * False negatives
   *
   * @generated from field: google.fhir.r4.core.Decimal truth_fn = 12 [json_name = "truthFN"];
   */
  truthFn?: Decimal;

  /**
   * False positives
   *
   * @generated from field: google.fhir.r4.core.Decimal query_fp = 13 [json_name = "queryFP"];
   */
  queryFp?: Decimal;

  /**
   * False positives where the non-REF alleles in the Truth and Query Call
   * Sets match
   *
   * @generated from field: google.fhir.r4.core.Decimal gt_fp = 14 [json_name = "gtFP"];
   */
  gtFp?: Decimal;

  /**
   * Precision of comparison
   *
   * @generated from field: google.fhir.r4.core.Decimal precision = 15;
   */
  precision?: Decimal;

  /**
   * Recall of comparison
   *
   * @generated from field: google.fhir.r4.core.Decimal recall = 16;
   */
  recall?: Decimal;

  /**
   * F-score
   *
   * @generated from field: google.fhir.r4.core.Decimal f_score = 17;
   */
  fScore?: Decimal;

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.Quality.Roc roc = 18;
   */
  roc?: MolecularSequence_Quality_Roc;

  constructor(data?: PartialMessage<MolecularSequence_Quality>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.Quality";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: MolecularSequence_Quality_TypeCode },
    { no: 5, name: "standard_sequence", kind: "message", T: CodeableConcept },
    { no: 6, name: "start", kind: "message", T: Integer },
    { no: 7, name: "end", kind: "message", T: Integer },
    { no: 8, name: "score", kind: "message", T: Quantity },
    { no: 9, name: "method", kind: "message", T: CodeableConcept },
    { no: 10, name: "truth_tp", jsonName: "truthTP", kind: "message", T: Decimal },
    { no: 11, name: "query_tp", jsonName: "queryTP", kind: "message", T: Decimal },
    { no: 12, name: "truth_fn", jsonName: "truthFN", kind: "message", T: Decimal },
    { no: 13, name: "query_fp", jsonName: "queryFP", kind: "message", T: Decimal },
    { no: 14, name: "gt_fp", jsonName: "gtFP", kind: "message", T: Decimal },
    { no: 15, name: "precision", kind: "message", T: Decimal },
    { no: 16, name: "recall", kind: "message", T: Decimal },
    { no: 17, name: "f_score", kind: "message", T: Decimal },
    { no: 18, name: "roc", kind: "message", T: MolecularSequence_Quality_Roc },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_Quality {
    return new MolecularSequence_Quality().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_Quality {
    return new MolecularSequence_Quality().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_Quality {
    return new MolecularSequence_Quality().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_Quality | PlainMessage<MolecularSequence_Quality> | undefined, b: MolecularSequence_Quality | PlainMessage<MolecularSequence_Quality> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_Quality, a, b);
  }
}

/**
 * indel | snp | unknown
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.Quality.TypeCode
 */
export class MolecularSequence_Quality_TypeCode extends Message<MolecularSequence_Quality_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.QualityTypeCode.Value value = 1;
   */
  value = QualityTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MolecularSequence_Quality_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.Quality.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(QualityTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_Quality_TypeCode {
    return new MolecularSequence_Quality_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_Quality_TypeCode {
    return new MolecularSequence_Quality_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_Quality_TypeCode {
    return new MolecularSequence_Quality_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_Quality_TypeCode | PlainMessage<MolecularSequence_Quality_TypeCode> | undefined, b: MolecularSequence_Quality_TypeCode | PlainMessage<MolecularSequence_Quality_TypeCode> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_Quality_TypeCode, a, b);
  }
}

/**
 * Receiver Operator Characteristic (ROC) Curve
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.Quality.Roc
 */
export class MolecularSequence_Quality_Roc extends Message<MolecularSequence_Quality_Roc> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Genotype quality score
   *
   * @generated from field: repeated google.fhir.r4.core.Integer score = 4;
   */
  score: Integer[] = [];

  /**
   * Roc score true positive numbers
   *
   * @generated from field: repeated google.fhir.r4.core.Integer num_tp = 5 [json_name = "numTP"];
   */
  numTp: Integer[] = [];

  /**
   * Roc score false positive numbers
   *
   * @generated from field: repeated google.fhir.r4.core.Integer num_fp = 6 [json_name = "numFP"];
   */
  numFp: Integer[] = [];

  /**
   * Roc score false negative numbers
   *
   * @generated from field: repeated google.fhir.r4.core.Integer num_fn = 7 [json_name = "numFN"];
   */
  numFn: Integer[] = [];

  /**
   * Precision of the GQ score
   *
   * @generated from field: repeated google.fhir.r4.core.Decimal precision = 8;
   */
  precision: Decimal[] = [];

  /**
   * Sensitivity of the GQ score
   *
   * @generated from field: repeated google.fhir.r4.core.Decimal sensitivity = 9;
   */
  sensitivity: Decimal[] = [];

  /**
   * FScore of the GQ score
   *
   * @generated from field: repeated google.fhir.r4.core.Decimal f_measure = 10;
   */
  fMeasure: Decimal[] = [];

  constructor(data?: PartialMessage<MolecularSequence_Quality_Roc>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.Quality.Roc";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "score", kind: "message", T: Integer, repeated: true },
    { no: 5, name: "num_tp", jsonName: "numTP", kind: "message", T: Integer, repeated: true },
    { no: 6, name: "num_fp", jsonName: "numFP", kind: "message", T: Integer, repeated: true },
    { no: 7, name: "num_fn", jsonName: "numFN", kind: "message", T: Integer, repeated: true },
    { no: 8, name: "precision", kind: "message", T: Decimal, repeated: true },
    { no: 9, name: "sensitivity", kind: "message", T: Decimal, repeated: true },
    { no: 10, name: "f_measure", kind: "message", T: Decimal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_Quality_Roc {
    return new MolecularSequence_Quality_Roc().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_Quality_Roc {
    return new MolecularSequence_Quality_Roc().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_Quality_Roc {
    return new MolecularSequence_Quality_Roc().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_Quality_Roc | PlainMessage<MolecularSequence_Quality_Roc> | undefined, b: MolecularSequence_Quality_Roc | PlainMessage<MolecularSequence_Quality_Roc> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_Quality_Roc, a, b);
  }
}

/**
 * External repository which contains detailed report related with observedSeq
 * in this resource
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.Repository
 */
export class MolecularSequence_Repository extends Message<MolecularSequence_Repository> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.Repository.TypeCode type = 4;
   */
  type?: MolecularSequence_Repository_TypeCode;

  /**
   * URI of the repository
   *
   * @generated from field: google.fhir.r4.core.Uri url = 5;
   */
  url?: Uri;

  /**
   * Repository's name
   *
   * @generated from field: google.fhir.r4.core.String name = 6;
   */
  name?: String;

  /**
   * Id of the dataset that used to call for dataset in repository
   *
   * @generated from field: google.fhir.r4.core.String dataset_id = 7;
   */
  datasetId?: String;

  /**
   * Id of the variantset that used to call for variantset in repository
   *
   * @generated from field: google.fhir.r4.core.String variantset_id = 8;
   */
  variantsetId?: String;

  /**
   * Id of the read
   *
   * @generated from field: google.fhir.r4.core.String readset_id = 9;
   */
  readsetId?: String;

  constructor(data?: PartialMessage<MolecularSequence_Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: MolecularSequence_Repository_TypeCode },
    { no: 5, name: "url", kind: "message", T: Uri },
    { no: 6, name: "name", kind: "message", T: String },
    { no: 7, name: "dataset_id", kind: "message", T: String },
    { no: 8, name: "variantset_id", kind: "message", T: String },
    { no: 9, name: "readset_id", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_Repository {
    return new MolecularSequence_Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_Repository {
    return new MolecularSequence_Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_Repository {
    return new MolecularSequence_Repository().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_Repository | PlainMessage<MolecularSequence_Repository> | undefined, b: MolecularSequence_Repository | PlainMessage<MolecularSequence_Repository> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_Repository, a, b);
  }
}

/**
 * directlink | openapi | login | oauth | other
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.Repository.TypeCode
 */
export class MolecularSequence_Repository_TypeCode extends Message<MolecularSequence_Repository_TypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.RepositoryTypeCode.Value value = 1;
   */
  value = RepositoryTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MolecularSequence_Repository_TypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.Repository.TypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(RepositoryTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_Repository_TypeCode {
    return new MolecularSequence_Repository_TypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_Repository_TypeCode {
    return new MolecularSequence_Repository_TypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_Repository_TypeCode {
    return new MolecularSequence_Repository_TypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_Repository_TypeCode | PlainMessage<MolecularSequence_Repository_TypeCode> | undefined, b: MolecularSequence_Repository_TypeCode | PlainMessage<MolecularSequence_Repository_TypeCode> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_Repository_TypeCode, a, b);
  }
}

/**
 * Structural variant
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.StructureVariant
 */
export class MolecularSequence_StructureVariant extends Message<MolecularSequence_StructureVariant> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Structural variant change type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept variant_type = 4;
   */
  variantType?: CodeableConcept;

  /**
   * Does the structural variant have base pair resolution breakpoints?
   *
   * @generated from field: google.fhir.r4.core.Boolean exact = 5;
   */
  exact?: Boolean;

  /**
   * Structural variant length
   *
   * @generated from field: google.fhir.r4.core.Integer length = 6;
   */
  length?: Integer;

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.StructureVariant.Outer outer = 7;
   */
  outer?: MolecularSequence_StructureVariant_Outer;

  /**
   * @generated from field: google.fhir.r4.core.MolecularSequence.StructureVariant.Inner inner = 8;
   */
  inner?: MolecularSequence_StructureVariant_Inner;

  constructor(data?: PartialMessage<MolecularSequence_StructureVariant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.StructureVariant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "variant_type", kind: "message", T: CodeableConcept },
    { no: 5, name: "exact", kind: "message", T: Boolean },
    { no: 6, name: "length", kind: "message", T: Integer },
    { no: 7, name: "outer", kind: "message", T: MolecularSequence_StructureVariant_Outer },
    { no: 8, name: "inner", kind: "message", T: MolecularSequence_StructureVariant_Inner },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_StructureVariant {
    return new MolecularSequence_StructureVariant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_StructureVariant {
    return new MolecularSequence_StructureVariant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_StructureVariant {
    return new MolecularSequence_StructureVariant().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_StructureVariant | PlainMessage<MolecularSequence_StructureVariant> | undefined, b: MolecularSequence_StructureVariant | PlainMessage<MolecularSequence_StructureVariant> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_StructureVariant, a, b);
  }
}

/**
 * Structural variant outer
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.StructureVariant.Outer
 */
export class MolecularSequence_StructureVariant_Outer extends Message<MolecularSequence_StructureVariant_Outer> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Structural variant outer start
   *
   * @generated from field: google.fhir.r4.core.Integer start = 4;
   */
  start?: Integer;

  /**
   * Structural variant outer end
   *
   * @generated from field: google.fhir.r4.core.Integer end = 5;
   */
  end?: Integer;

  constructor(data?: PartialMessage<MolecularSequence_StructureVariant_Outer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.StructureVariant.Outer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "start", kind: "message", T: Integer },
    { no: 5, name: "end", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_StructureVariant_Outer {
    return new MolecularSequence_StructureVariant_Outer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_StructureVariant_Outer {
    return new MolecularSequence_StructureVariant_Outer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_StructureVariant_Outer {
    return new MolecularSequence_StructureVariant_Outer().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_StructureVariant_Outer | PlainMessage<MolecularSequence_StructureVariant_Outer> | undefined, b: MolecularSequence_StructureVariant_Outer | PlainMessage<MolecularSequence_StructureVariant_Outer> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_StructureVariant_Outer, a, b);
  }
}

/**
 * Structural variant inner
 *
 * @generated from message google.fhir.r4.core.MolecularSequence.StructureVariant.Inner
 */
export class MolecularSequence_StructureVariant_Inner extends Message<MolecularSequence_StructureVariant_Inner> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Structural variant inner start
   *
   * @generated from field: google.fhir.r4.core.Integer start = 4;
   */
  start?: Integer;

  /**
   * Structural variant inner end
   *
   * @generated from field: google.fhir.r4.core.Integer end = 5;
   */
  end?: Integer;

  constructor(data?: PartialMessage<MolecularSequence_StructureVariant_Inner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MolecularSequence.StructureVariant.Inner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "start", kind: "message", T: Integer },
    { no: 5, name: "end", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MolecularSequence_StructureVariant_Inner {
    return new MolecularSequence_StructureVariant_Inner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MolecularSequence_StructureVariant_Inner {
    return new MolecularSequence_StructureVariant_Inner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MolecularSequence_StructureVariant_Inner {
    return new MolecularSequence_StructureVariant_Inner().fromJsonString(jsonString, options);
  }

  static equals(a: MolecularSequence_StructureVariant_Inner | PlainMessage<MolecularSequence_StructureVariant_Inner> | undefined, b: MolecularSequence_StructureVariant_Inner | PlainMessage<MolecularSequence_StructureVariant_Inner> | undefined): boolean {
    return proto3.util.equals(MolecularSequence_StructureVariant_Inner, a, b);
  }
}

