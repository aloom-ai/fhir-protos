//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/condition.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Age, Annotation, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Range, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for Condition.
 * Detailed information about conditions, problems or diagnoses.
 * See http://hl7.org/fhir/StructureDefinition/Condition
 *
 * @generated from message google.fhir.r4.core.Condition
 */
export class Condition extends Message<Condition> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External Ids for this condition
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * active | recurrence | relapse | inactive | remission | resolved
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept clinical_status = 11;
   */
  clinicalStatus?: CodeableConcept;

  /**
   * unconfirmed | provisional | differential | confirmed | refuted |
   * entered-in-error
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept verification_status = 12;
   */
  verificationStatus?: CodeableConcept;

  /**
   * problem-list-item | encounter-diagnosis
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 13;
   */
  category: CodeableConcept[] = [];

  /**
   * Subjective severity of condition
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept severity = 14;
   */
  severity?: CodeableConcept;

  /**
   * Identification of the condition, problem or diagnosis
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 15;
   */
  code?: CodeableConcept;

  /**
   * Anatomical location, if relevant
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept body_site = 16;
   */
  bodySite: CodeableConcept[] = [];

  /**
   * Who has the condition?
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 17;
   */
  subject?: Reference;

  /**
   * Encounter created as part of
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 18;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Condition.OnsetX onset = 19;
   */
  onset?: Condition_OnsetX;

  /**
   * @generated from field: google.fhir.r4.core.Condition.AbatementX abatement = 20;
   */
  abatement?: Condition_AbatementX;

  /**
   * Date record was first recorded
   *
   * @generated from field: google.fhir.r4.core.DateTime recorded_date = 21;
   */
  recordedDate?: DateTime;

  /**
   * Who recorded the condition
   *
   * @generated from field: google.fhir.r4.core.Reference recorder = 22;
   */
  recorder?: Reference;

  /**
   * Person who asserts this condition
   *
   * @generated from field: google.fhir.r4.core.Reference asserter = 23;
   */
  asserter?: Reference;

  /**
   * @generated from field: repeated google.fhir.r4.core.Condition.Stage stage = 24;
   */
  stage: Condition_Stage[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Condition.Evidence evidence = 25;
   */
  evidence: Condition_Evidence[] = [];

  /**
   * Additional information about the Condition
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 26;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<Condition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Condition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "clinical_status", kind: "message", T: CodeableConcept },
    { no: 12, name: "verification_status", kind: "message", T: CodeableConcept },
    { no: 13, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "severity", kind: "message", T: CodeableConcept },
    { no: 15, name: "code", kind: "message", T: CodeableConcept },
    { no: 16, name: "body_site", kind: "message", T: CodeableConcept, repeated: true },
    { no: 17, name: "subject", kind: "message", T: Reference },
    { no: 18, name: "encounter", kind: "message", T: Reference },
    { no: 19, name: "onset", kind: "message", T: Condition_OnsetX },
    { no: 20, name: "abatement", kind: "message", T: Condition_AbatementX },
    { no: 21, name: "recorded_date", kind: "message", T: DateTime },
    { no: 22, name: "recorder", kind: "message", T: Reference },
    { no: 23, name: "asserter", kind: "message", T: Reference },
    { no: 24, name: "stage", kind: "message", T: Condition_Stage, repeated: true },
    { no: 25, name: "evidence", kind: "message", T: Condition_Evidence, repeated: true },
    { no: 26, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition {
    return new Condition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition {
    return new Condition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition {
    return new Condition().fromJsonString(jsonString, options);
  }

  static equals(a: Condition | PlainMessage<Condition> | undefined, b: Condition | PlainMessage<Condition> | undefined): boolean {
    return proto3.util.equals(Condition, a, b);
  }
}

/**
 * Estimated or actual date,  date-time, or age
 *
 * @generated from message google.fhir.r4.core.Condition.OnsetX
 */
export class Condition_OnsetX extends Message<Condition_OnsetX> {
  /**
   * @generated from oneof google.fhir.r4.core.Condition.OnsetX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Age age = 2;
     */
    value: Age;
    case: "age";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 3;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 4;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 5 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Condition_OnsetX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Condition.OnsetX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "age", kind: "message", T: Age, oneof: "choice" },
    { no: 3, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 4, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 5, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition_OnsetX {
    return new Condition_OnsetX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition_OnsetX {
    return new Condition_OnsetX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition_OnsetX {
    return new Condition_OnsetX().fromJsonString(jsonString, options);
  }

  static equals(a: Condition_OnsetX | PlainMessage<Condition_OnsetX> | undefined, b: Condition_OnsetX | PlainMessage<Condition_OnsetX> | undefined): boolean {
    return proto3.util.equals(Condition_OnsetX, a, b);
  }
}

/**
 * When in resolution/remission
 *
 * @generated from message google.fhir.r4.core.Condition.AbatementX
 */
export class Condition_AbatementX extends Message<Condition_AbatementX> {
  /**
   * @generated from oneof google.fhir.r4.core.Condition.AbatementX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Age age = 2;
     */
    value: Age;
    case: "age";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 3;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 4;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 5 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Condition_AbatementX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Condition.AbatementX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "age", kind: "message", T: Age, oneof: "choice" },
    { no: 3, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 4, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 5, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition_AbatementX {
    return new Condition_AbatementX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition_AbatementX {
    return new Condition_AbatementX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition_AbatementX {
    return new Condition_AbatementX().fromJsonString(jsonString, options);
  }

  static equals(a: Condition_AbatementX | PlainMessage<Condition_AbatementX> | undefined, b: Condition_AbatementX | PlainMessage<Condition_AbatementX> | undefined): boolean {
    return proto3.util.equals(Condition_AbatementX, a, b);
  }
}

/**
 * Stage/grade, usually assessed formally
 *
 * @generated from message google.fhir.r4.core.Condition.Stage
 */
export class Condition_Stage extends Message<Condition_Stage> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Simple summary (disease specific)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept summary = 4;
   */
  summary?: CodeableConcept;

  /**
   * Formal record of assessment
   *
   * @generated from field: repeated google.fhir.r4.core.Reference assessment = 5;
   */
  assessment: Reference[] = [];

  /**
   * Kind of staging
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 6;
   */
  type?: CodeableConcept;

  constructor(data?: PartialMessage<Condition_Stage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Condition.Stage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "summary", kind: "message", T: CodeableConcept },
    { no: 5, name: "assessment", kind: "message", T: Reference, repeated: true },
    { no: 6, name: "type", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition_Stage {
    return new Condition_Stage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition_Stage {
    return new Condition_Stage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition_Stage {
    return new Condition_Stage().fromJsonString(jsonString, options);
  }

  static equals(a: Condition_Stage | PlainMessage<Condition_Stage> | undefined, b: Condition_Stage | PlainMessage<Condition_Stage> | undefined): boolean {
    return proto3.util.equals(Condition_Stage, a, b);
  }
}

/**
 * Supporting evidence
 *
 * @generated from message google.fhir.r4.core.Condition.Evidence
 */
export class Condition_Evidence extends Message<Condition_Evidence> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Manifestation/symptom
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept code = 4;
   */
  code: CodeableConcept[] = [];

  /**
   * Supporting information found elsewhere
   *
   * @generated from field: repeated google.fhir.r4.core.Reference detail = 5;
   */
  detail: Reference[] = [];

  constructor(data?: PartialMessage<Condition_Evidence>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Condition.Evidence";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 5, name: "detail", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Condition_Evidence {
    return new Condition_Evidence().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Condition_Evidence {
    return new Condition_Evidence().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Condition_Evidence {
    return new Condition_Evidence().fromJsonString(jsonString, options);
  }

  static equals(a: Condition_Evidence | PlainMessage<Condition_Evidence> | undefined, b: Condition_Evidence | PlainMessage<Condition_Evidence> | undefined): boolean {
    return proto3.util.equals(Condition_Evidence, a, b);
  }
}

