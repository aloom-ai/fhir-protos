//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/terminology_capabilities.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Canonical, Code, CodeableConcept, ContactDetail, DateTime, Extension, Id, Markdown, Meta, Narrative, String, Uri, Url, UsageContext } from "../datatypes_pb.js";
import { CapabilityStatementKindCode_Value, CodeSearchSupportCode_Value, PublicationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for TerminologyCapabilities.
 * A statement of system capabilities.
 * See http://hl7.org/fhir/StructureDefinition/TerminologyCapabilities
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities
 */
export class TerminologyCapabilities extends Message<TerminologyCapabilities> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Canonical identifier for this terminology capabilities, represented as a
   * URI (globally unique)
   *
   * @generated from field: google.fhir.r4.core.Uri url = 10;
   */
  url?: Uri;

  /**
   * Business version of the terminology capabilities
   *
   * @generated from field: google.fhir.r4.core.String version = 11;
   */
  version?: String;

  /**
   * Name for this terminology capabilities (computer friendly)
   *
   * @generated from field: google.fhir.r4.core.String name = 12;
   */
  name?: String;

  /**
   * Name for this terminology capabilities (human friendly)
   *
   * @generated from field: google.fhir.r4.core.String title = 13;
   */
  title?: String;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.StatusCode status = 14;
   */
  status?: TerminologyCapabilities_StatusCode;

  /**
   * For testing purposes, not real usage
   *
   * @generated from field: google.fhir.r4.core.Boolean experimental = 15;
   */
  experimental?: Boolean;

  /**
   * Date last changed
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 16;
   */
  date?: DateTime;

  /**
   * Name of the publisher (organization or individual)
   *
   * @generated from field: google.fhir.r4.core.String publisher = 17;
   */
  publisher?: String;

  /**
   * Contact details for the publisher
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail contact = 18;
   */
  contact: ContactDetail[] = [];

  /**
   * Natural language description of the terminology capabilities
   *
   * @generated from field: google.fhir.r4.core.Markdown description = 19;
   */
  description?: Markdown;

  /**
   * The context that the content is intended to support
   *
   * @generated from field: repeated google.fhir.r4.core.UsageContext use_context = 20;
   */
  useContext: UsageContext[] = [];

  /**
   * Intended jurisdiction for terminology capabilities (if applicable)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 21;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * Why this terminology capabilities is defined
   *
   * @generated from field: google.fhir.r4.core.Markdown purpose = 22;
   */
  purpose?: Markdown;

  /**
   * Use and/or publishing restrictions
   *
   * @generated from field: google.fhir.r4.core.Markdown copyright = 23;
   */
  copyright?: Markdown;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.KindCode kind = 24;
   */
  kind?: TerminologyCapabilities_KindCode;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.Software software = 25;
   */
  software?: TerminologyCapabilities_Software;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.Implementation implementation = 26;
   */
  implementation?: TerminologyCapabilities_Implementation;

  /**
   * Whether lockedDate is supported
   *
   * @generated from field: google.fhir.r4.core.Boolean locked_date = 27;
   */
  lockedDate?: Boolean;

  /**
   * @generated from field: repeated google.fhir.r4.core.TerminologyCapabilities.CodeSystem code_system = 28;
   */
  codeSystem: TerminologyCapabilities_CodeSystem[] = [];

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.Expansion expansion = 29;
   */
  expansion?: TerminologyCapabilities_Expansion;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.CodeSearchCode code_search = 30;
   */
  codeSearch?: TerminologyCapabilities_CodeSearchCode;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.ValidateCode validate_code = 31;
   */
  validateCode?: TerminologyCapabilities_ValidateCode;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.Translation translation = 32;
   */
  translation?: TerminologyCapabilities_Translation;

  /**
   * @generated from field: google.fhir.r4.core.TerminologyCapabilities.Closure closure = 33;
   */
  closure?: TerminologyCapabilities_Closure;

  constructor(data?: PartialMessage<TerminologyCapabilities>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "url", kind: "message", T: Uri },
    { no: 11, name: "version", kind: "message", T: String },
    { no: 12, name: "name", kind: "message", T: String },
    { no: 13, name: "title", kind: "message", T: String },
    { no: 14, name: "status", kind: "message", T: TerminologyCapabilities_StatusCode },
    { no: 15, name: "experimental", kind: "message", T: Boolean },
    { no: 16, name: "date", kind: "message", T: DateTime },
    { no: 17, name: "publisher", kind: "message", T: String },
    { no: 18, name: "contact", kind: "message", T: ContactDetail, repeated: true },
    { no: 19, name: "description", kind: "message", T: Markdown },
    { no: 20, name: "use_context", kind: "message", T: UsageContext, repeated: true },
    { no: 21, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 22, name: "purpose", kind: "message", T: Markdown },
    { no: 23, name: "copyright", kind: "message", T: Markdown },
    { no: 24, name: "kind", kind: "message", T: TerminologyCapabilities_KindCode },
    { no: 25, name: "software", kind: "message", T: TerminologyCapabilities_Software },
    { no: 26, name: "implementation", kind: "message", T: TerminologyCapabilities_Implementation },
    { no: 27, name: "locked_date", kind: "message", T: Boolean },
    { no: 28, name: "code_system", kind: "message", T: TerminologyCapabilities_CodeSystem, repeated: true },
    { no: 29, name: "expansion", kind: "message", T: TerminologyCapabilities_Expansion },
    { no: 30, name: "code_search", kind: "message", T: TerminologyCapabilities_CodeSearchCode },
    { no: 31, name: "validate_code", kind: "message", T: TerminologyCapabilities_ValidateCode },
    { no: 32, name: "translation", kind: "message", T: TerminologyCapabilities_Translation },
    { no: 33, name: "closure", kind: "message", T: TerminologyCapabilities_Closure },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities {
    return new TerminologyCapabilities().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities {
    return new TerminologyCapabilities().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities {
    return new TerminologyCapabilities().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities | PlainMessage<TerminologyCapabilities> | undefined, b: TerminologyCapabilities | PlainMessage<TerminologyCapabilities> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities, a, b);
  }
}

/**
 * draft | active | retired | unknown
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.StatusCode
 */
export class TerminologyCapabilities_StatusCode extends Message<TerminologyCapabilities_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.PublicationStatusCode.Value value = 1;
   */
  value = PublicationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<TerminologyCapabilities_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(PublicationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_StatusCode {
    return new TerminologyCapabilities_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_StatusCode {
    return new TerminologyCapabilities_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_StatusCode {
    return new TerminologyCapabilities_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_StatusCode | PlainMessage<TerminologyCapabilities_StatusCode> | undefined, b: TerminologyCapabilities_StatusCode | PlainMessage<TerminologyCapabilities_StatusCode> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_StatusCode, a, b);
  }
}

/**
 * instance | capability | requirements
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.KindCode
 */
export class TerminologyCapabilities_KindCode extends Message<TerminologyCapabilities_KindCode> {
  /**
   * @generated from field: google.fhir.r4.core.CapabilityStatementKindCode.Value value = 1;
   */
  value = CapabilityStatementKindCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<TerminologyCapabilities_KindCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.KindCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(CapabilityStatementKindCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_KindCode {
    return new TerminologyCapabilities_KindCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_KindCode {
    return new TerminologyCapabilities_KindCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_KindCode {
    return new TerminologyCapabilities_KindCode().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_KindCode | PlainMessage<TerminologyCapabilities_KindCode> | undefined, b: TerminologyCapabilities_KindCode | PlainMessage<TerminologyCapabilities_KindCode> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_KindCode, a, b);
  }
}

/**
 * Software that is covered by this terminology capability statement
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.Software
 */
export class TerminologyCapabilities_Software extends Message<TerminologyCapabilities_Software> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * A name the software is known by
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * Version covered by this statement
   *
   * @generated from field: google.fhir.r4.core.String version = 5;
   */
  version?: String;

  constructor(data?: PartialMessage<TerminologyCapabilities_Software>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.Software";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "version", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_Software {
    return new TerminologyCapabilities_Software().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Software {
    return new TerminologyCapabilities_Software().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Software {
    return new TerminologyCapabilities_Software().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_Software | PlainMessage<TerminologyCapabilities_Software> | undefined, b: TerminologyCapabilities_Software | PlainMessage<TerminologyCapabilities_Software> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_Software, a, b);
  }
}

/**
 * If this describes a specific instance
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.Implementation
 */
export class TerminologyCapabilities_Implementation extends Message<TerminologyCapabilities_Implementation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Describes this specific instance
   *
   * @generated from field: google.fhir.r4.core.String description = 4;
   */
  description?: String;

  /**
   * Base URL for the implementation
   *
   * @generated from field: google.fhir.r4.core.Url url = 5;
   */
  url?: Url;

  constructor(data?: PartialMessage<TerminologyCapabilities_Implementation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.Implementation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "description", kind: "message", T: String },
    { no: 5, name: "url", kind: "message", T: Url },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_Implementation {
    return new TerminologyCapabilities_Implementation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Implementation {
    return new TerminologyCapabilities_Implementation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Implementation {
    return new TerminologyCapabilities_Implementation().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_Implementation | PlainMessage<TerminologyCapabilities_Implementation> | undefined, b: TerminologyCapabilities_Implementation | PlainMessage<TerminologyCapabilities_Implementation> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_Implementation, a, b);
  }
}

/**
 * A code system supported by the server
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.CodeSystem
 */
export class TerminologyCapabilities_CodeSystem extends Message<TerminologyCapabilities_CodeSystem> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * URI for the Code System
   *
   * @generated from field: google.fhir.r4.core.Canonical uri = 4;
   */
  uri?: Canonical;

  /**
   * @generated from field: repeated google.fhir.r4.core.TerminologyCapabilities.CodeSystem.Version version = 5;
   */
  version: TerminologyCapabilities_CodeSystem_Version[] = [];

  /**
   * Whether subsumption is supported
   *
   * @generated from field: google.fhir.r4.core.Boolean subsumption = 6;
   */
  subsumption?: Boolean;

  constructor(data?: PartialMessage<TerminologyCapabilities_CodeSystem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.CodeSystem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "uri", kind: "message", T: Canonical },
    { no: 5, name: "version", kind: "message", T: TerminologyCapabilities_CodeSystem_Version, repeated: true },
    { no: 6, name: "subsumption", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_CodeSystem {
    return new TerminologyCapabilities_CodeSystem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSystem {
    return new TerminologyCapabilities_CodeSystem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSystem {
    return new TerminologyCapabilities_CodeSystem().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_CodeSystem | PlainMessage<TerminologyCapabilities_CodeSystem> | undefined, b: TerminologyCapabilities_CodeSystem | PlainMessage<TerminologyCapabilities_CodeSystem> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_CodeSystem, a, b);
  }
}

/**
 * Version of Code System supported
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.CodeSystem.Version
 */
export class TerminologyCapabilities_CodeSystem_Version extends Message<TerminologyCapabilities_CodeSystem_Version> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Version identifier for this version
   *
   * @generated from field: google.fhir.r4.core.String code = 4;
   */
  code?: String;

  /**
   * If this is the default version for this code system
   *
   * @generated from field: google.fhir.r4.core.Boolean is_default = 5;
   */
  isDefault?: Boolean;

  /**
   * If compositional grammar is supported
   *
   * @generated from field: google.fhir.r4.core.Boolean compositional = 6;
   */
  compositional?: Boolean;

  /**
   * Language Displays supported
   *
   * @generated from field: repeated google.fhir.r4.core.Code language = 7;
   */
  language: Code[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.TerminologyCapabilities.CodeSystem.Version.Filter filter = 8;
   */
  filter: TerminologyCapabilities_CodeSystem_Version_Filter[] = [];

  /**
   * Properties supported for $lookup
   *
   * @generated from field: repeated google.fhir.r4.core.Code property = 9;
   */
  property: Code[] = [];

  constructor(data?: PartialMessage<TerminologyCapabilities_CodeSystem_Version>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.CodeSystem.Version";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: String },
    { no: 5, name: "is_default", kind: "message", T: Boolean },
    { no: 6, name: "compositional", kind: "message", T: Boolean },
    { no: 7, name: "language", kind: "message", T: Code, repeated: true },
    { no: 8, name: "filter", kind: "message", T: TerminologyCapabilities_CodeSystem_Version_Filter, repeated: true },
    { no: 9, name: "property", kind: "message", T: Code, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_CodeSystem_Version {
    return new TerminologyCapabilities_CodeSystem_Version().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSystem_Version {
    return new TerminologyCapabilities_CodeSystem_Version().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSystem_Version {
    return new TerminologyCapabilities_CodeSystem_Version().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_CodeSystem_Version | PlainMessage<TerminologyCapabilities_CodeSystem_Version> | undefined, b: TerminologyCapabilities_CodeSystem_Version | PlainMessage<TerminologyCapabilities_CodeSystem_Version> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_CodeSystem_Version, a, b);
  }
}

/**
 * Filter Properties supported
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.CodeSystem.Version.Filter
 */
export class TerminologyCapabilities_CodeSystem_Version_Filter extends Message<TerminologyCapabilities_CodeSystem_Version_Filter> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Code of the property supported
   *
   * @generated from field: google.fhir.r4.core.Code code = 4;
   */
  code?: Code;

  /**
   * Operations supported for the property
   *
   * @generated from field: repeated google.fhir.r4.core.Code op = 5;
   */
  op: Code[] = [];

  constructor(data?: PartialMessage<TerminologyCapabilities_CodeSystem_Version_Filter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.CodeSystem.Version.Filter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: Code },
    { no: 5, name: "op", kind: "message", T: Code, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_CodeSystem_Version_Filter {
    return new TerminologyCapabilities_CodeSystem_Version_Filter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSystem_Version_Filter {
    return new TerminologyCapabilities_CodeSystem_Version_Filter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSystem_Version_Filter {
    return new TerminologyCapabilities_CodeSystem_Version_Filter().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_CodeSystem_Version_Filter | PlainMessage<TerminologyCapabilities_CodeSystem_Version_Filter> | undefined, b: TerminologyCapabilities_CodeSystem_Version_Filter | PlainMessage<TerminologyCapabilities_CodeSystem_Version_Filter> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_CodeSystem_Version_Filter, a, b);
  }
}

/**
 * Information about the [ValueSet/$expand](valueset-operation-expand.html)
 * operation
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.Expansion
 */
export class TerminologyCapabilities_Expansion extends Message<TerminologyCapabilities_Expansion> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Whether the server can return nested value sets
   *
   * @generated from field: google.fhir.r4.core.Boolean hierarchical = 4;
   */
  hierarchical?: Boolean;

  /**
   * Whether the server supports paging on expansion
   *
   * @generated from field: google.fhir.r4.core.Boolean paging = 5;
   */
  paging?: Boolean;

  /**
   * Allow request for incomplete expansions?
   *
   * @generated from field: google.fhir.r4.core.Boolean incomplete = 6;
   */
  incomplete?: Boolean;

  /**
   * @generated from field: repeated google.fhir.r4.core.TerminologyCapabilities.Expansion.Parameter parameter = 7;
   */
  parameter: TerminologyCapabilities_Expansion_Parameter[] = [];

  /**
   * Documentation about text searching works
   *
   * @generated from field: google.fhir.r4.core.Markdown text_filter = 8;
   */
  textFilter?: Markdown;

  constructor(data?: PartialMessage<TerminologyCapabilities_Expansion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.Expansion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "hierarchical", kind: "message", T: Boolean },
    { no: 5, name: "paging", kind: "message", T: Boolean },
    { no: 6, name: "incomplete", kind: "message", T: Boolean },
    { no: 7, name: "parameter", kind: "message", T: TerminologyCapabilities_Expansion_Parameter, repeated: true },
    { no: 8, name: "text_filter", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_Expansion {
    return new TerminologyCapabilities_Expansion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Expansion {
    return new TerminologyCapabilities_Expansion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Expansion {
    return new TerminologyCapabilities_Expansion().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_Expansion | PlainMessage<TerminologyCapabilities_Expansion> | undefined, b: TerminologyCapabilities_Expansion | PlainMessage<TerminologyCapabilities_Expansion> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_Expansion, a, b);
  }
}

/**
 * Supported expansion parameter
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.Expansion.Parameter
 */
export class TerminologyCapabilities_Expansion_Parameter extends Message<TerminologyCapabilities_Expansion_Parameter> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Expansion Parameter name
   *
   * @generated from field: google.fhir.r4.core.Code name = 4;
   */
  name?: Code;

  /**
   * Description of support for parameter
   *
   * @generated from field: google.fhir.r4.core.String documentation = 5;
   */
  documentation?: String;

  constructor(data?: PartialMessage<TerminologyCapabilities_Expansion_Parameter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.Expansion.Parameter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: Code },
    { no: 5, name: "documentation", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_Expansion_Parameter {
    return new TerminologyCapabilities_Expansion_Parameter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Expansion_Parameter {
    return new TerminologyCapabilities_Expansion_Parameter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Expansion_Parameter {
    return new TerminologyCapabilities_Expansion_Parameter().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_Expansion_Parameter | PlainMessage<TerminologyCapabilities_Expansion_Parameter> | undefined, b: TerminologyCapabilities_Expansion_Parameter | PlainMessage<TerminologyCapabilities_Expansion_Parameter> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_Expansion_Parameter, a, b);
  }
}

/**
 * explicit | all
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.CodeSearchCode
 */
export class TerminologyCapabilities_CodeSearchCode extends Message<TerminologyCapabilities_CodeSearchCode> {
  /**
   * @generated from field: google.fhir.r4.core.CodeSearchSupportCode.Value value = 1;
   */
  value = CodeSearchSupportCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<TerminologyCapabilities_CodeSearchCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.CodeSearchCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(CodeSearchSupportCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_CodeSearchCode {
    return new TerminologyCapabilities_CodeSearchCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSearchCode {
    return new TerminologyCapabilities_CodeSearchCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_CodeSearchCode {
    return new TerminologyCapabilities_CodeSearchCode().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_CodeSearchCode | PlainMessage<TerminologyCapabilities_CodeSearchCode> | undefined, b: TerminologyCapabilities_CodeSearchCode | PlainMessage<TerminologyCapabilities_CodeSearchCode> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_CodeSearchCode, a, b);
  }
}

/**
 * Information about the
 * [ValueSet/$validate-code](valueset-operation-validate-code.html) operation
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.ValidateCode
 */
export class TerminologyCapabilities_ValidateCode extends Message<TerminologyCapabilities_ValidateCode> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Whether translations are validated
   *
   * @generated from field: google.fhir.r4.core.Boolean translations = 4;
   */
  translations?: Boolean;

  constructor(data?: PartialMessage<TerminologyCapabilities_ValidateCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.ValidateCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "translations", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_ValidateCode {
    return new TerminologyCapabilities_ValidateCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_ValidateCode {
    return new TerminologyCapabilities_ValidateCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_ValidateCode {
    return new TerminologyCapabilities_ValidateCode().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_ValidateCode | PlainMessage<TerminologyCapabilities_ValidateCode> | undefined, b: TerminologyCapabilities_ValidateCode | PlainMessage<TerminologyCapabilities_ValidateCode> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_ValidateCode, a, b);
  }
}

/**
 * Information about the
 * [ConceptMap/$translate](conceptmap-operation-translate.html) operation
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.Translation
 */
export class TerminologyCapabilities_Translation extends Message<TerminologyCapabilities_Translation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Whether the client must identify the map
   *
   * @generated from field: google.fhir.r4.core.Boolean needs_map = 4;
   */
  needsMap?: Boolean;

  constructor(data?: PartialMessage<TerminologyCapabilities_Translation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.Translation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "needs_map", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_Translation {
    return new TerminologyCapabilities_Translation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Translation {
    return new TerminologyCapabilities_Translation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Translation {
    return new TerminologyCapabilities_Translation().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_Translation | PlainMessage<TerminologyCapabilities_Translation> | undefined, b: TerminologyCapabilities_Translation | PlainMessage<TerminologyCapabilities_Translation> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_Translation, a, b);
  }
}

/**
 * Information about the
 * [ConceptMap/$closure](conceptmap-operation-closure.html) operation
 *
 * @generated from message google.fhir.r4.core.TerminologyCapabilities.Closure
 */
export class TerminologyCapabilities_Closure extends Message<TerminologyCapabilities_Closure> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * If cross-system closure is supported
   *
   * @generated from field: google.fhir.r4.core.Boolean translation = 4;
   */
  translation?: Boolean;

  constructor(data?: PartialMessage<TerminologyCapabilities_Closure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.TerminologyCapabilities.Closure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "translation", kind: "message", T: Boolean },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminologyCapabilities_Closure {
    return new TerminologyCapabilities_Closure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Closure {
    return new TerminologyCapabilities_Closure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminologyCapabilities_Closure {
    return new TerminologyCapabilities_Closure().fromJsonString(jsonString, options);
  }

  static equals(a: TerminologyCapabilities_Closure | PlainMessage<TerminologyCapabilities_Closure> | undefined, b: TerminologyCapabilities_Closure | PlainMessage<TerminologyCapabilities_Closure> | undefined): boolean {
    return proto3.util.equals(TerminologyCapabilities_Closure, a, b);
  }
}

