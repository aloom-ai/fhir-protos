//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance_specification.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Attachment, Boolean, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Quantity, Range, Ratio, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for SubstanceSpecification.
 * The detailed description of a substance, typically at a level beyond what is
 * used for prescribing. See
 * http://hl7.org/fhir/StructureDefinition/SubstanceSpecification
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification
 */
export class SubstanceSpecification extends Message<SubstanceSpecification> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier by which this substance is known
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier?: Identifier;

  /**
   * High level categorization, e.g. polymer or nucleic acid
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 11;
   */
  type?: CodeableConcept;

  /**
   * Status of substance within the catalogue e.g. approved
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 12;
   */
  status?: CodeableConcept;

  /**
   * If the substance applies to only human or veterinary use
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept domain = 13;
   */
  domain?: CodeableConcept;

  /**
   * Textual description of the substance
   *
   * @generated from field: google.fhir.r4.core.String description = 14;
   */
  description?: String;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 15;
   */
  source: Reference[] = [];

  /**
   * Textual comment about this record of a substance
   *
   * @generated from field: google.fhir.r4.core.String comment = 16;
   */
  comment?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Moiety moiety = 17;
   */
  moiety: SubstanceSpecification_Moiety[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Property property = 18;
   */
  property: SubstanceSpecification_Property[] = [];

  /**
   * General information detailing this substance
   *
   * @generated from field: google.fhir.r4.core.Reference reference_information = 19;
   */
  referenceInformation?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Structure structure = 20;
   */
  structure?: SubstanceSpecification_Structure;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.CodeType code = 21;
   */
  code: SubstanceSpecification_CodeType[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name name = 22;
   */
  name: SubstanceSpecification_Name[] = [];

  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic
   * acids)
   *
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight molecular_weight = 23;
   */
  molecularWeight: SubstanceSpecification_Structure_Isotope_MolecularWeight[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Relationship relationship = 24;
   */
  relationship: SubstanceSpecification_Relationship[] = [];

  /**
   * Data items specific to nucleic acids
   *
   * @generated from field: google.fhir.r4.core.Reference nucleic_acid = 25;
   */
  nucleicAcid?: Reference;

  /**
   * Data items specific to polymers
   *
   * @generated from field: google.fhir.r4.core.Reference polymer = 26;
   */
  polymer?: Reference;

  /**
   * Data items specific to proteins
   *
   * @generated from field: google.fhir.r4.core.Reference protein = 27;
   */
  protein?: Reference;

  /**
   * Material or taxonomic/anatomical source for the substance
   *
   * @generated from field: google.fhir.r4.core.Reference source_material = 28;
   */
  sourceMaterial?: Reference;

  constructor(data?: PartialMessage<SubstanceSpecification>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier },
    { no: 11, name: "type", kind: "message", T: CodeableConcept },
    { no: 12, name: "status", kind: "message", T: CodeableConcept },
    { no: 13, name: "domain", kind: "message", T: CodeableConcept },
    { no: 14, name: "description", kind: "message", T: String },
    { no: 15, name: "source", kind: "message", T: Reference, repeated: true },
    { no: 16, name: "comment", kind: "message", T: String },
    { no: 17, name: "moiety", kind: "message", T: SubstanceSpecification_Moiety, repeated: true },
    { no: 18, name: "property", kind: "message", T: SubstanceSpecification_Property, repeated: true },
    { no: 19, name: "reference_information", kind: "message", T: Reference },
    { no: 20, name: "structure", kind: "message", T: SubstanceSpecification_Structure },
    { no: 21, name: "code", kind: "message", T: SubstanceSpecification_CodeType, repeated: true },
    { no: 22, name: "name", kind: "message", T: SubstanceSpecification_Name, repeated: true },
    { no: 23, name: "molecular_weight", kind: "message", T: SubstanceSpecification_Structure_Isotope_MolecularWeight, repeated: true },
    { no: 24, name: "relationship", kind: "message", T: SubstanceSpecification_Relationship, repeated: true },
    { no: 25, name: "nucleic_acid", kind: "message", T: Reference },
    { no: 26, name: "polymer", kind: "message", T: Reference },
    { no: 27, name: "protein", kind: "message", T: Reference },
    { no: 28, name: "source_material", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification {
    return new SubstanceSpecification().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification {
    return new SubstanceSpecification().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification {
    return new SubstanceSpecification().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification | PlainMessage<SubstanceSpecification> | undefined, b: SubstanceSpecification | PlainMessage<SubstanceSpecification> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification, a, b);
  }
}

/**
 * Moiety, for structural modifications
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Moiety
 */
export class SubstanceSpecification_Moiety extends Message<SubstanceSpecification_Moiety> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Role that the moiety is playing
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 4;
   */
  role?: CodeableConcept;

  /**
   * Identifier by which this moiety substance is known
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 5;
   */
  identifier?: Identifier;

  /**
   * Textual name for this moiety substance
   *
   * @generated from field: google.fhir.r4.core.String name = 6;
   */
  name?: String;

  /**
   * Stereochemistry type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept stereochemistry = 7;
   */
  stereochemistry?: CodeableConcept;

  /**
   * Optical activity type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept optical_activity = 8;
   */
  opticalActivity?: CodeableConcept;

  /**
   * Molecular formula
   *
   * @generated from field: google.fhir.r4.core.String molecular_formula = 9;
   */
  molecularFormula?: String;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX amount = 10;
   */
  amount?: SubstanceSpecification_Moiety_AmountX;

  constructor(data?: PartialMessage<SubstanceSpecification_Moiety>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Moiety";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "role", kind: "message", T: CodeableConcept },
    { no: 5, name: "identifier", kind: "message", T: Identifier },
    { no: 6, name: "name", kind: "message", T: String },
    { no: 7, name: "stereochemistry", kind: "message", T: CodeableConcept },
    { no: 8, name: "optical_activity", kind: "message", T: CodeableConcept },
    { no: 9, name: "molecular_formula", kind: "message", T: String },
    { no: 10, name: "amount", kind: "message", T: SubstanceSpecification_Moiety_AmountX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Moiety {
    return new SubstanceSpecification_Moiety().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Moiety {
    return new SubstanceSpecification_Moiety().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Moiety {
    return new SubstanceSpecification_Moiety().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Moiety | PlainMessage<SubstanceSpecification_Moiety> | undefined, b: SubstanceSpecification_Moiety | PlainMessage<SubstanceSpecification_Moiety> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Moiety, a, b);
  }
}

/**
 * Quantitative value for this moiety
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX
 */
export class SubstanceSpecification_Moiety_AmountX extends Message<SubstanceSpecification_Moiety_AmountX> {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubstanceSpecification_Moiety_AmountX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Moiety.AmountX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 2, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Moiety_AmountX {
    return new SubstanceSpecification_Moiety_AmountX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Moiety_AmountX {
    return new SubstanceSpecification_Moiety_AmountX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Moiety_AmountX {
    return new SubstanceSpecification_Moiety_AmountX().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Moiety_AmountX | PlainMessage<SubstanceSpecification_Moiety_AmountX> | undefined, b: SubstanceSpecification_Moiety_AmountX | PlainMessage<SubstanceSpecification_Moiety_AmountX> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Moiety_AmountX, a, b);
  }
}

/**
 * General specifications for this substance, including how it is related to
 * other substances
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Property
 */
export class SubstanceSpecification_Property extends Message<SubstanceSpecification_Property> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * A category for this property, e.g. Physical, Chemical, Enzymatic
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 4;
   */
  category?: CodeableConcept;

  /**
   * Property type e.g. viscosity, pH, isoelectric point
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 5;
   */
  code?: CodeableConcept;

  /**
   * Parameters that were used in the measurement of a property (e.g. for
   * viscosity: measured at 20C with a pH of 7.1)
   *
   * @generated from field: google.fhir.r4.core.String parameters = 6;
   */
  parameters?: String;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX defining_substance = 7;
   */
  definingSubstance?: SubstanceSpecification_Property_DefiningSubstanceX;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Property.AmountX amount = 8;
   */
  amount?: SubstanceSpecification_Property_AmountX;

  constructor(data?: PartialMessage<SubstanceSpecification_Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "category", kind: "message", T: CodeableConcept },
    { no: 5, name: "code", kind: "message", T: CodeableConcept },
    { no: 6, name: "parameters", kind: "message", T: String },
    { no: 7, name: "defining_substance", kind: "message", T: SubstanceSpecification_Property_DefiningSubstanceX },
    { no: 8, name: "amount", kind: "message", T: SubstanceSpecification_Property_AmountX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Property {
    return new SubstanceSpecification_Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Property {
    return new SubstanceSpecification_Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Property {
    return new SubstanceSpecification_Property().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Property | PlainMessage<SubstanceSpecification_Property> | undefined, b: SubstanceSpecification_Property | PlainMessage<SubstanceSpecification_Property> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Property, a, b);
  }
}

/**
 * A substance upon which a defining property depends (e.g. for solubility:
 * in water, in alcohol)
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX
 */
export class SubstanceSpecification_Property_DefiningSubstanceX extends Message<SubstanceSpecification_Property_DefiningSubstanceX> {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubstanceSpecification_Property_DefiningSubstanceX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Property.DefiningSubstanceX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "choice" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Property_DefiningSubstanceX {
    return new SubstanceSpecification_Property_DefiningSubstanceX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Property_DefiningSubstanceX {
    return new SubstanceSpecification_Property_DefiningSubstanceX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Property_DefiningSubstanceX {
    return new SubstanceSpecification_Property_DefiningSubstanceX().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Property_DefiningSubstanceX | PlainMessage<SubstanceSpecification_Property_DefiningSubstanceX> | undefined, b: SubstanceSpecification_Property_DefiningSubstanceX | PlainMessage<SubstanceSpecification_Property_DefiningSubstanceX> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Property_DefiningSubstanceX, a, b);
  }
}

/**
 * Quantitative value for this property
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Property.AmountX
 */
export class SubstanceSpecification_Property_AmountX extends Message<SubstanceSpecification_Property_AmountX> {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Property.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 2 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubstanceSpecification_Property_AmountX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Property.AmountX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 2, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Property_AmountX {
    return new SubstanceSpecification_Property_AmountX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Property_AmountX {
    return new SubstanceSpecification_Property_AmountX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Property_AmountX {
    return new SubstanceSpecification_Property_AmountX().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Property_AmountX | PlainMessage<SubstanceSpecification_Property_AmountX> | undefined, b: SubstanceSpecification_Property_AmountX | PlainMessage<SubstanceSpecification_Property_AmountX> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Property_AmountX, a, b);
  }
}

/**
 * Structural information
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure
 */
export class SubstanceSpecification_Structure extends Message<SubstanceSpecification_Structure> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Stereochemistry type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept stereochemistry = 4;
   */
  stereochemistry?: CodeableConcept;

  /**
   * Optical activity type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept optical_activity = 5;
   */
  opticalActivity?: CodeableConcept;

  /**
   * Molecular formula
   *
   * @generated from field: google.fhir.r4.core.String molecular_formula = 6;
   */
  molecularFormula?: String;

  /**
   * Specified per moiety according to the Hill system, i.e. first C, then H,
   * then alphabetical, each moiety separated by a dot
   *
   * @generated from field: google.fhir.r4.core.String molecular_formula_by_moiety = 7;
   */
  molecularFormulaByMoiety?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Structure.Isotope isotope = 8;
   */
  isotope: SubstanceSpecification_Structure_Isotope[] = [];

  /**
   * The molecular weight or weight range (for proteins, polymers or nucleic
   * acids)
   *
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight molecular_weight = 9;
   */
  molecularWeight?: SubstanceSpecification_Structure_Isotope_MolecularWeight;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 10;
   */
  source: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Structure.Representation representation = 11;
   */
  representation: SubstanceSpecification_Structure_Representation[] = [];

  constructor(data?: PartialMessage<SubstanceSpecification_Structure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Structure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "stereochemistry", kind: "message", T: CodeableConcept },
    { no: 5, name: "optical_activity", kind: "message", T: CodeableConcept },
    { no: 6, name: "molecular_formula", kind: "message", T: String },
    { no: 7, name: "molecular_formula_by_moiety", kind: "message", T: String },
    { no: 8, name: "isotope", kind: "message", T: SubstanceSpecification_Structure_Isotope, repeated: true },
    { no: 9, name: "molecular_weight", kind: "message", T: SubstanceSpecification_Structure_Isotope_MolecularWeight },
    { no: 10, name: "source", kind: "message", T: Reference, repeated: true },
    { no: 11, name: "representation", kind: "message", T: SubstanceSpecification_Structure_Representation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Structure {
    return new SubstanceSpecification_Structure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure {
    return new SubstanceSpecification_Structure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure {
    return new SubstanceSpecification_Structure().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Structure | PlainMessage<SubstanceSpecification_Structure> | undefined, b: SubstanceSpecification_Structure | PlainMessage<SubstanceSpecification_Structure> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Structure, a, b);
  }
}

/**
 * Applicable for single substances that contain a radionuclide or a
 * non-natural isotopic ratio
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure.Isotope
 */
export class SubstanceSpecification_Structure_Isotope extends Message<SubstanceSpecification_Structure_Isotope> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Substance identifier for each non-natural or radioisotope
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier?: Identifier;

  /**
   * Substance name for each non-natural or radioisotope
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept name = 5;
   */
  name?: CodeableConcept;

  /**
   * The type of isotopic substitution present in a single substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept substitution = 6;
   */
  substitution?: CodeableConcept;

  /**
   * Half life - for a non-natural nuclide
   *
   * @generated from field: google.fhir.r4.core.Quantity half_life = 7;
   */
  halfLife?: Quantity;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight molecular_weight = 8;
   */
  molecularWeight?: SubstanceSpecification_Structure_Isotope_MolecularWeight;

  constructor(data?: PartialMessage<SubstanceSpecification_Structure_Isotope>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Structure.Isotope";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier },
    { no: 5, name: "name", kind: "message", T: CodeableConcept },
    { no: 6, name: "substitution", kind: "message", T: CodeableConcept },
    { no: 7, name: "half_life", kind: "message", T: Quantity },
    { no: 8, name: "molecular_weight", kind: "message", T: SubstanceSpecification_Structure_Isotope_MolecularWeight },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Structure_Isotope {
    return new SubstanceSpecification_Structure_Isotope().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure_Isotope {
    return new SubstanceSpecification_Structure_Isotope().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure_Isotope {
    return new SubstanceSpecification_Structure_Isotope().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Structure_Isotope | PlainMessage<SubstanceSpecification_Structure_Isotope> | undefined, b: SubstanceSpecification_Structure_Isotope | PlainMessage<SubstanceSpecification_Structure_Isotope> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Structure_Isotope, a, b);
  }
}

/**
 * The molecular weight or weight range (for proteins, polymers or nucleic
 * acids)
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight
 */
export class SubstanceSpecification_Structure_Isotope_MolecularWeight extends Message<SubstanceSpecification_Structure_Isotope_MolecularWeight> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The method by which the molecular weight was determined
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 4;
   */
  method?: CodeableConcept;

  /**
   * Type of molecular weight such as exact, average (also known as.
   * number average), weight average
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Used to capture quantitative values for a variety of elements. If
   * only limits are given, the arithmetic mean would be the average. If
   * only a single definite value for a given element is given, it would
   * be captured in this field
   *
   * @generated from field: google.fhir.r4.core.Quantity amount = 6;
   */
  amount?: Quantity;

  constructor(data?: PartialMessage<SubstanceSpecification_Structure_Isotope_MolecularWeight>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Structure.Isotope.MolecularWeight";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "method", kind: "message", T: CodeableConcept },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "amount", kind: "message", T: Quantity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Structure_Isotope_MolecularWeight {
    return new SubstanceSpecification_Structure_Isotope_MolecularWeight().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure_Isotope_MolecularWeight {
    return new SubstanceSpecification_Structure_Isotope_MolecularWeight().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure_Isotope_MolecularWeight {
    return new SubstanceSpecification_Structure_Isotope_MolecularWeight().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Structure_Isotope_MolecularWeight | PlainMessage<SubstanceSpecification_Structure_Isotope_MolecularWeight> | undefined, b: SubstanceSpecification_Structure_Isotope_MolecularWeight | PlainMessage<SubstanceSpecification_Structure_Isotope_MolecularWeight> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Structure_Isotope_MolecularWeight, a, b);
  }
}

/**
 * Molecular structural representation
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Structure.Representation
 */
export class SubstanceSpecification_Structure_Representation extends Message<SubstanceSpecification_Structure_Representation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of structure (e.g. Full, Partial, Representative)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * The structural representation as text string in a format e.g. InChI,
   * SMILES, MOLFILE, CDX
   *
   * @generated from field: google.fhir.r4.core.String representation = 5;
   */
  representation?: String;

  /**
   * An attached file with the structural representation
   *
   * @generated from field: google.fhir.r4.core.Attachment attachment = 6;
   */
  attachment?: Attachment;

  constructor(data?: PartialMessage<SubstanceSpecification_Structure_Representation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Structure.Representation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "representation", kind: "message", T: String },
    { no: 6, name: "attachment", kind: "message", T: Attachment },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Structure_Representation {
    return new SubstanceSpecification_Structure_Representation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure_Representation {
    return new SubstanceSpecification_Structure_Representation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Structure_Representation {
    return new SubstanceSpecification_Structure_Representation().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Structure_Representation | PlainMessage<SubstanceSpecification_Structure_Representation> | undefined, b: SubstanceSpecification_Structure_Representation | PlainMessage<SubstanceSpecification_Structure_Representation> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Structure_Representation, a, b);
  }
}

/**
 * Codes associated with the substance
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.CodeType
 */
export class SubstanceSpecification_CodeType extends Message<SubstanceSpecification_CodeType> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The specific code
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Status of the code assignment
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 5;
   */
  status?: CodeableConcept;

  /**
   * The date at which the code status is changed as part of the terminology
   * maintenance
   *
   * @generated from field: google.fhir.r4.core.DateTime status_date = 6;
   */
  statusDate?: DateTime;

  /**
   * Any comment can be provided in this field, if necessary
   *
   * @generated from field: google.fhir.r4.core.String comment = 7;
   */
  comment?: String;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 8;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceSpecification_CodeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.CodeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "status", kind: "message", T: CodeableConcept },
    { no: 6, name: "status_date", kind: "message", T: DateTime },
    { no: 7, name: "comment", kind: "message", T: String },
    { no: 8, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_CodeType {
    return new SubstanceSpecification_CodeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_CodeType {
    return new SubstanceSpecification_CodeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_CodeType {
    return new SubstanceSpecification_CodeType().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_CodeType | PlainMessage<SubstanceSpecification_CodeType> | undefined, b: SubstanceSpecification_CodeType | PlainMessage<SubstanceSpecification_CodeType> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_CodeType, a, b);
  }
}

/**
 * Names applicable to this substance
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Name
 */
export class SubstanceSpecification_Name extends Message<SubstanceSpecification_Name> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The actual name
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * Name type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * The status of the name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 6;
   */
  status?: CodeableConcept;

  /**
   * If this is the preferred name for this substance
   *
   * @generated from field: google.fhir.r4.core.Boolean preferred = 7;
   */
  preferred?: Boolean;

  /**
   * Language of the name
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept language = 8;
   */
  language: CodeableConcept[] = [];

  /**
   * The use context of this name for example if there is a different name a
   * drug active ingredient as opposed to a food colour additive
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept domain = 9;
   */
  domain: CodeableConcept[] = [];

  /**
   * The jurisdiction where this name applies
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 10;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * A synonym of this name
   *
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name synonym = 11;
   */
  synonym: SubstanceSpecification_Name[] = [];

  /**
   * A translation for this name
   *
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name translation = 12;
   */
  translation: SubstanceSpecification_Name[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceSpecification.Name.Official official = 13;
   */
  official: SubstanceSpecification_Name_Official[] = [];

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 14;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceSpecification_Name>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Name";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "status", kind: "message", T: CodeableConcept },
    { no: 7, name: "preferred", kind: "message", T: Boolean },
    { no: 8, name: "language", kind: "message", T: CodeableConcept, repeated: true },
    { no: 9, name: "domain", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 11, name: "synonym", kind: "message", T: SubstanceSpecification_Name, repeated: true },
    { no: 12, name: "translation", kind: "message", T: SubstanceSpecification_Name, repeated: true },
    { no: 13, name: "official", kind: "message", T: SubstanceSpecification_Name_Official, repeated: true },
    { no: 14, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Name {
    return new SubstanceSpecification_Name().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Name {
    return new SubstanceSpecification_Name().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Name {
    return new SubstanceSpecification_Name().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Name | PlainMessage<SubstanceSpecification_Name> | undefined, b: SubstanceSpecification_Name | PlainMessage<SubstanceSpecification_Name> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Name, a, b);
  }
}

/**
 * Details of the official nature of this name
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Name.Official
 */
export class SubstanceSpecification_Name_Official extends Message<SubstanceSpecification_Name_Official> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Which authority uses this official name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept authority = 4;
   */
  authority?: CodeableConcept;

  /**
   * The status of the official name
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 5;
   */
  status?: CodeableConcept;

  /**
   * Date of official name change
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 6;
   */
  date?: DateTime;

  constructor(data?: PartialMessage<SubstanceSpecification_Name_Official>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Name.Official";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "authority", kind: "message", T: CodeableConcept },
    { no: 5, name: "status", kind: "message", T: CodeableConcept },
    { no: 6, name: "date", kind: "message", T: DateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Name_Official {
    return new SubstanceSpecification_Name_Official().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Name_Official {
    return new SubstanceSpecification_Name_Official().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Name_Official {
    return new SubstanceSpecification_Name_Official().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Name_Official | PlainMessage<SubstanceSpecification_Name_Official> | undefined, b: SubstanceSpecification_Name_Official | PlainMessage<SubstanceSpecification_Name_Official> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Name_Official, a, b);
  }
}

/**
 * A link between this substance and another, with details of the relationship
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Relationship
 */
export class SubstanceSpecification_Relationship extends Message<SubstanceSpecification_Relationship> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX substance = 4;
   */
  substance?: SubstanceSpecification_Relationship_SubstanceX;

  /**
   * For example "salt to parent", "active moiety", "starting material"
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept relationship = 5;
   */
  relationship?: CodeableConcept;

  /**
   * For example where an enzyme strongly bonds with a particular substance,
   * this is a defining relationship for that enzyme, out of several possible
   * substance relationships
   *
   * @generated from field: google.fhir.r4.core.Boolean is_defining = 6;
   */
  isDefining?: Boolean;

  /**
   * @generated from field: google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX amount = 7;
   */
  amount?: SubstanceSpecification_Relationship_AmountX;

  /**
   * For use when the numeric
   *
   * @generated from field: google.fhir.r4.core.Ratio amount_ratio_low_limit = 8;
   */
  amountRatioLowLimit?: Ratio;

  /**
   * An operator for the amount, for example "average", "approximately", "less
   * than"
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept amount_type = 9;
   */
  amountType?: CodeableConcept;

  /**
   * Supporting literature
   *
   * @generated from field: repeated google.fhir.r4.core.Reference source = 10;
   */
  source: Reference[] = [];

  constructor(data?: PartialMessage<SubstanceSpecification_Relationship>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Relationship";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "substance", kind: "message", T: SubstanceSpecification_Relationship_SubstanceX },
    { no: 5, name: "relationship", kind: "message", T: CodeableConcept },
    { no: 6, name: "is_defining", kind: "message", T: Boolean },
    { no: 7, name: "amount", kind: "message", T: SubstanceSpecification_Relationship_AmountX },
    { no: 8, name: "amount_ratio_low_limit", kind: "message", T: Ratio },
    { no: 9, name: "amount_type", kind: "message", T: CodeableConcept },
    { no: 10, name: "source", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Relationship {
    return new SubstanceSpecification_Relationship().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Relationship {
    return new SubstanceSpecification_Relationship().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Relationship {
    return new SubstanceSpecification_Relationship().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Relationship | PlainMessage<SubstanceSpecification_Relationship> | undefined, b: SubstanceSpecification_Relationship | PlainMessage<SubstanceSpecification_Relationship> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Relationship, a, b);
  }
}

/**
 * A pointer to another substance, as a resource or just a representational
 * code
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX
 */
export class SubstanceSpecification_Relationship_SubstanceX extends Message<SubstanceSpecification_Relationship_SubstanceX> {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 1;
     */
    value: Reference;
    case: "reference";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubstanceSpecification_Relationship_SubstanceX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Relationship.SubstanceX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "reference", kind: "message", T: Reference, oneof: "choice" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Relationship_SubstanceX {
    return new SubstanceSpecification_Relationship_SubstanceX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Relationship_SubstanceX {
    return new SubstanceSpecification_Relationship_SubstanceX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Relationship_SubstanceX {
    return new SubstanceSpecification_Relationship_SubstanceX().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Relationship_SubstanceX | PlainMessage<SubstanceSpecification_Relationship_SubstanceX> | undefined, b: SubstanceSpecification_Relationship_SubstanceX | PlainMessage<SubstanceSpecification_Relationship_SubstanceX> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Relationship_SubstanceX, a, b);
  }
}

/**
 * A numeric factor for the relationship, for instance to express that the
 * salt of a substance has some percentage of the active substance in
 * relation to some other
 *
 * @generated from message google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX
 */
export class SubstanceSpecification_Relationship_AmountX extends Message<SubstanceSpecification_Relationship_AmountX> {
  /**
   * @generated from oneof google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 2;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Ratio ratio = 3;
     */
    value: Ratio;
    case: "ratio";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 4 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SubstanceSpecification_Relationship_AmountX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceSpecification.Relationship.AmountX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 3, name: "ratio", kind: "message", T: Ratio, oneof: "choice" },
    { no: 4, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceSpecification_Relationship_AmountX {
    return new SubstanceSpecification_Relationship_AmountX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceSpecification_Relationship_AmountX {
    return new SubstanceSpecification_Relationship_AmountX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceSpecification_Relationship_AmountX {
    return new SubstanceSpecification_Relationship_AmountX().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceSpecification_Relationship_AmountX | PlainMessage<SubstanceSpecification_Relationship_AmountX> | undefined, b: SubstanceSpecification_Relationship_AmountX | PlainMessage<SubstanceSpecification_Relationship_AmountX> | undefined): boolean {
    return proto3.util.equals(SubstanceSpecification_Relationship_AmountX, a, b);
  }
}

