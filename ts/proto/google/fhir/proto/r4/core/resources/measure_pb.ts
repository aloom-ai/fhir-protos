//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/measure.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Canonical, Code, CodeableConcept, ContactDetail, Date, DateTime, Expression, Extension, Id, Identifier, Markdown, Meta, Narrative, Period, Reference, RelatedArtifact, String, Uri, UsageContext } from "../datatypes_pb.js";
import { PublicationStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Measure.
 * A quality measure definition.
 * See http://hl7.org/fhir/StructureDefinition/Measure
 *
 * @generated from message google.fhir.r4.core.Measure
 */
export class Measure extends Message<Measure> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Canonical identifier for this measure, represented as a URI (globally
   * unique)
   *
   * @generated from field: google.fhir.r4.core.Uri url = 10;
   */
  url?: Uri;

  /**
   * Additional identifier for the measure
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 11;
   */
  identifier: Identifier[] = [];

  /**
   * Business version of the measure
   *
   * @generated from field: google.fhir.r4.core.String version = 12;
   */
  version?: String;

  /**
   * Name for this measure (computer friendly)
   *
   * @generated from field: google.fhir.r4.core.String name = 13;
   */
  name?: String;

  /**
   * Name for this measure (human friendly)
   *
   * @generated from field: google.fhir.r4.core.String title = 14;
   */
  title?: String;

  /**
   * Subordinate title of the measure
   *
   * @generated from field: google.fhir.r4.core.String subtitle = 15;
   */
  subtitle?: String;

  /**
   * @generated from field: google.fhir.r4.core.Measure.StatusCode status = 16;
   */
  status?: Measure_StatusCode;

  /**
   * For testing purposes, not real usage
   *
   * @generated from field: google.fhir.r4.core.Boolean experimental = 17;
   */
  experimental?: Boolean;

  /**
   * @generated from field: google.fhir.r4.core.Measure.SubjectX subject = 18;
   */
  subject?: Measure_SubjectX;

  /**
   * Date last changed
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 19;
   */
  date?: DateTime;

  /**
   * Name of the publisher (organization or individual)
   *
   * @generated from field: google.fhir.r4.core.String publisher = 20;
   */
  publisher?: String;

  /**
   * Contact details for the publisher
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail contact = 21;
   */
  contact: ContactDetail[] = [];

  /**
   * Natural language description of the measure
   *
   * @generated from field: google.fhir.r4.core.Markdown description = 22;
   */
  description?: Markdown;

  /**
   * The context that the content is intended to support
   *
   * @generated from field: repeated google.fhir.r4.core.UsageContext use_context = 23;
   */
  useContext: UsageContext[] = [];

  /**
   * Intended jurisdiction for measure (if applicable)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept jurisdiction = 24;
   */
  jurisdiction: CodeableConcept[] = [];

  /**
   * Why this measure is defined
   *
   * @generated from field: google.fhir.r4.core.Markdown purpose = 25;
   */
  purpose?: Markdown;

  /**
   * Describes the clinical usage of the measure
   *
   * @generated from field: google.fhir.r4.core.String usage = 26;
   */
  usage?: String;

  /**
   * Use and/or publishing restrictions
   *
   * @generated from field: google.fhir.r4.core.Markdown copyright = 27;
   */
  copyright?: Markdown;

  /**
   * When the measure was approved by publisher
   *
   * @generated from field: google.fhir.r4.core.Date approval_date = 28;
   */
  approvalDate?: Date;

  /**
   * When the measure was last reviewed
   *
   * @generated from field: google.fhir.r4.core.Date last_review_date = 29;
   */
  lastReviewDate?: Date;

  /**
   * When the measure is expected to be used
   *
   * @generated from field: google.fhir.r4.core.Period effective_period = 30;
   */
  effectivePeriod?: Period;

  /**
   * The category of the measure, such as Education, Treatment, Assessment, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept topic = 31;
   */
  topic: CodeableConcept[] = [];

  /**
   * Who authored the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail author = 32;
   */
  author: ContactDetail[] = [];

  /**
   * Who edited the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail editor = 33;
   */
  editor: ContactDetail[] = [];

  /**
   * Who reviewed the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail reviewer = 34;
   */
  reviewer: ContactDetail[] = [];

  /**
   * Who endorsed the content
   *
   * @generated from field: repeated google.fhir.r4.core.ContactDetail endorser = 35;
   */
  endorser: ContactDetail[] = [];

  /**
   * Additional documentation, citations, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.RelatedArtifact related_artifact = 36;
   */
  relatedArtifact: RelatedArtifact[] = [];

  /**
   * Logic used by the measure
   *
   * @generated from field: repeated google.fhir.r4.core.Canonical library = 37;
   */
  library: Canonical[] = [];

  /**
   * Disclaimer for use of the measure or its referenced content
   *
   * @generated from field: google.fhir.r4.core.Markdown disclaimer = 38;
   */
  disclaimer?: Markdown;

  /**
   * proportion | ratio | continuous-variable | cohort
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept scoring = 39;
   */
  scoring?: CodeableConcept;

  /**
   * opportunity | all-or-nothing | linear | weighted
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept composite_scoring = 40;
   */
  compositeScoring?: CodeableConcept;

  /**
   * process | outcome | structure | patient-reported-outcome | composite
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 41;
   */
  type: CodeableConcept[] = [];

  /**
   * How risk adjustment is applied for this measure
   *
   * @generated from field: google.fhir.r4.core.String risk_adjustment = 42;
   */
  riskAdjustment?: String;

  /**
   * How is rate aggregation performed for this measure
   *
   * @generated from field: google.fhir.r4.core.String rate_aggregation = 43;
   */
  rateAggregation?: String;

  /**
   * Detailed description of why the measure exists
   *
   * @generated from field: google.fhir.r4.core.Markdown rationale = 44;
   */
  rationale?: Markdown;

  /**
   * Summary of clinical guidelines
   *
   * @generated from field: google.fhir.r4.core.Markdown clinical_recommendation_statement = 45;
   */
  clinicalRecommendationStatement?: Markdown;

  /**
   * increase | decrease
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept improvement_notation = 46;
   */
  improvementNotation?: CodeableConcept;

  /**
   * Defined terms used in the measure documentation
   *
   * @generated from field: repeated google.fhir.r4.core.Markdown definition = 47;
   */
  definition: Markdown[] = [];

  /**
   * Additional guidance for implementers
   *
   * @generated from field: google.fhir.r4.core.Markdown guidance = 48;
   */
  guidance?: Markdown;

  /**
   * @generated from field: repeated google.fhir.r4.core.Measure.Group group = 49;
   */
  group: Measure_Group[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Measure.SupplementalData supplemental_data = 50;
   */
  supplementalData: Measure_SupplementalData[] = [];

  constructor(data?: PartialMessage<Measure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "url", kind: "message", T: Uri },
    { no: 11, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 12, name: "version", kind: "message", T: String },
    { no: 13, name: "name", kind: "message", T: String },
    { no: 14, name: "title", kind: "message", T: String },
    { no: 15, name: "subtitle", kind: "message", T: String },
    { no: 16, name: "status", kind: "message", T: Measure_StatusCode },
    { no: 17, name: "experimental", kind: "message", T: Boolean },
    { no: 18, name: "subject", kind: "message", T: Measure_SubjectX },
    { no: 19, name: "date", kind: "message", T: DateTime },
    { no: 20, name: "publisher", kind: "message", T: String },
    { no: 21, name: "contact", kind: "message", T: ContactDetail, repeated: true },
    { no: 22, name: "description", kind: "message", T: Markdown },
    { no: 23, name: "use_context", kind: "message", T: UsageContext, repeated: true },
    { no: 24, name: "jurisdiction", kind: "message", T: CodeableConcept, repeated: true },
    { no: 25, name: "purpose", kind: "message", T: Markdown },
    { no: 26, name: "usage", kind: "message", T: String },
    { no: 27, name: "copyright", kind: "message", T: Markdown },
    { no: 28, name: "approval_date", kind: "message", T: Date },
    { no: 29, name: "last_review_date", kind: "message", T: Date },
    { no: 30, name: "effective_period", kind: "message", T: Period },
    { no: 31, name: "topic", kind: "message", T: CodeableConcept, repeated: true },
    { no: 32, name: "author", kind: "message", T: ContactDetail, repeated: true },
    { no: 33, name: "editor", kind: "message", T: ContactDetail, repeated: true },
    { no: 34, name: "reviewer", kind: "message", T: ContactDetail, repeated: true },
    { no: 35, name: "endorser", kind: "message", T: ContactDetail, repeated: true },
    { no: 36, name: "related_artifact", kind: "message", T: RelatedArtifact, repeated: true },
    { no: 37, name: "library", kind: "message", T: Canonical, repeated: true },
    { no: 38, name: "disclaimer", kind: "message", T: Markdown },
    { no: 39, name: "scoring", kind: "message", T: CodeableConcept },
    { no: 40, name: "composite_scoring", kind: "message", T: CodeableConcept },
    { no: 41, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 42, name: "risk_adjustment", kind: "message", T: String },
    { no: 43, name: "rate_aggregation", kind: "message", T: String },
    { no: 44, name: "rationale", kind: "message", T: Markdown },
    { no: 45, name: "clinical_recommendation_statement", kind: "message", T: Markdown },
    { no: 46, name: "improvement_notation", kind: "message", T: CodeableConcept },
    { no: 47, name: "definition", kind: "message", T: Markdown, repeated: true },
    { no: 48, name: "guidance", kind: "message", T: Markdown },
    { no: 49, name: "group", kind: "message", T: Measure_Group, repeated: true },
    { no: 50, name: "supplemental_data", kind: "message", T: Measure_SupplementalData, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure {
    return new Measure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure {
    return new Measure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure {
    return new Measure().fromJsonString(jsonString, options);
  }

  static equals(a: Measure | PlainMessage<Measure> | undefined, b: Measure | PlainMessage<Measure> | undefined): boolean {
    return proto3.util.equals(Measure, a, b);
  }
}

/**
 * draft | active | retired | unknown
 *
 * @generated from message google.fhir.r4.core.Measure.StatusCode
 */
export class Measure_StatusCode extends Message<Measure_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.PublicationStatusCode.Value value = 1;
   */
  value = PublicationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Measure_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(PublicationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_StatusCode {
    return new Measure_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_StatusCode {
    return new Measure_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_StatusCode {
    return new Measure_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_StatusCode | PlainMessage<Measure_StatusCode> | undefined, b: Measure_StatusCode | PlainMessage<Measure_StatusCode> | undefined): boolean {
    return proto3.util.equals(Measure_StatusCode, a, b);
  }
}

/**
 * E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
 *
 * @generated from message google.fhir.r4.core.Measure.SubjectX
 */
export class Measure_SubjectX extends Message<Measure_SubjectX> {
  /**
   * @generated from oneof google.fhir.r4.core.Measure.SubjectX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Measure_SubjectX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.SubjectX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_SubjectX {
    return new Measure_SubjectX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_SubjectX {
    return new Measure_SubjectX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_SubjectX {
    return new Measure_SubjectX().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_SubjectX | PlainMessage<Measure_SubjectX> | undefined, b: Measure_SubjectX | PlainMessage<Measure_SubjectX> | undefined): boolean {
    return proto3.util.equals(Measure_SubjectX, a, b);
  }
}

/**
 * Population criteria group
 *
 * @generated from message google.fhir.r4.core.Measure.Group
 */
export class Measure_Group extends Message<Measure_Group> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Meaning of the group
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Summary description
   *
   * @generated from field: google.fhir.r4.core.String description = 5;
   */
  description?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Measure.Group.Population population = 6;
   */
  population: Measure_Group_Population[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Measure.Group.Stratifier stratifier = 7;
   */
  stratifier: Measure_Group_Stratifier[] = [];

  constructor(data?: PartialMessage<Measure_Group>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.Group";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "description", kind: "message", T: String },
    { no: 6, name: "population", kind: "message", T: Measure_Group_Population, repeated: true },
    { no: 7, name: "stratifier", kind: "message", T: Measure_Group_Stratifier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_Group {
    return new Measure_Group().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_Group {
    return new Measure_Group().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_Group {
    return new Measure_Group().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_Group | PlainMessage<Measure_Group> | undefined, b: Measure_Group | PlainMessage<Measure_Group> | undefined): boolean {
    return proto3.util.equals(Measure_Group, a, b);
  }
}

/**
 * Population criteria
 *
 * @generated from message google.fhir.r4.core.Measure.Group.Population
 */
export class Measure_Group_Population extends Message<Measure_Group_Population> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * initial-population | numerator | numerator-exclusion | denominator |
   * denominator-exclusion | denominator-exception | measure-population |
   * measure-population-exclusion | measure-observation
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * The human readable description of this population criteria
   *
   * @generated from field: google.fhir.r4.core.String description = 5;
   */
  description?: String;

  /**
   * The criteria that defines this population
   *
   * @generated from field: google.fhir.r4.core.Expression criteria = 6;
   */
  criteria?: Expression;

  constructor(data?: PartialMessage<Measure_Group_Population>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.Group.Population";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "description", kind: "message", T: String },
    { no: 6, name: "criteria", kind: "message", T: Expression },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_Group_Population {
    return new Measure_Group_Population().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_Group_Population {
    return new Measure_Group_Population().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_Group_Population {
    return new Measure_Group_Population().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_Group_Population | PlainMessage<Measure_Group_Population> | undefined, b: Measure_Group_Population | PlainMessage<Measure_Group_Population> | undefined): boolean {
    return proto3.util.equals(Measure_Group_Population, a, b);
  }
}

/**
 * Stratifier criteria for the measure
 *
 * @generated from message google.fhir.r4.core.Measure.Group.Stratifier
 */
export class Measure_Group_Stratifier extends Message<Measure_Group_Stratifier> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Meaning of the stratifier
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * The human readable description of this stratifier
   *
   * @generated from field: google.fhir.r4.core.String description = 5;
   */
  description?: String;

  /**
   * How the measure should be stratified
   *
   * @generated from field: google.fhir.r4.core.Expression criteria = 6;
   */
  criteria?: Expression;

  /**
   * @generated from field: repeated google.fhir.r4.core.Measure.Group.Stratifier.Component component = 7;
   */
  component: Measure_Group_Stratifier_Component[] = [];

  constructor(data?: PartialMessage<Measure_Group_Stratifier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.Group.Stratifier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "description", kind: "message", T: String },
    { no: 6, name: "criteria", kind: "message", T: Expression },
    { no: 7, name: "component", kind: "message", T: Measure_Group_Stratifier_Component, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_Group_Stratifier {
    return new Measure_Group_Stratifier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_Group_Stratifier {
    return new Measure_Group_Stratifier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_Group_Stratifier {
    return new Measure_Group_Stratifier().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_Group_Stratifier | PlainMessage<Measure_Group_Stratifier> | undefined, b: Measure_Group_Stratifier | PlainMessage<Measure_Group_Stratifier> | undefined): boolean {
    return proto3.util.equals(Measure_Group_Stratifier, a, b);
  }
}

/**
 * Stratifier criteria component for the measure
 *
 * @generated from message google.fhir.r4.core.Measure.Group.Stratifier.Component
 */
export class Measure_Group_Stratifier_Component extends Message<Measure_Group_Stratifier_Component> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Meaning of the stratifier component
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * The human readable description of this stratifier component
   *
   * @generated from field: google.fhir.r4.core.String description = 5;
   */
  description?: String;

  /**
   * Component of how the measure should be stratified
   *
   * @generated from field: google.fhir.r4.core.Expression criteria = 6;
   */
  criteria?: Expression;

  constructor(data?: PartialMessage<Measure_Group_Stratifier_Component>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.Group.Stratifier.Component";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "description", kind: "message", T: String },
    { no: 6, name: "criteria", kind: "message", T: Expression },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_Group_Stratifier_Component {
    return new Measure_Group_Stratifier_Component().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_Group_Stratifier_Component {
    return new Measure_Group_Stratifier_Component().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_Group_Stratifier_Component {
    return new Measure_Group_Stratifier_Component().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_Group_Stratifier_Component | PlainMessage<Measure_Group_Stratifier_Component> | undefined, b: Measure_Group_Stratifier_Component | PlainMessage<Measure_Group_Stratifier_Component> | undefined): boolean {
    return proto3.util.equals(Measure_Group_Stratifier_Component, a, b);
  }
}

/**
 * What other data should be reported with the measure
 *
 * @generated from message google.fhir.r4.core.Measure.SupplementalData
 */
export class Measure_SupplementalData extends Message<Measure_SupplementalData> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Meaning of the supplemental data
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * supplemental-data | risk-adjustment-factor
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept usage = 5;
   */
  usage: CodeableConcept[] = [];

  /**
   * The human readable description of this supplemental data
   *
   * @generated from field: google.fhir.r4.core.String description = 6;
   */
  description?: String;

  /**
   * Expression describing additional data to be reported
   *
   * @generated from field: google.fhir.r4.core.Expression criteria = 7;
   */
  criteria?: Expression;

  constructor(data?: PartialMessage<Measure_SupplementalData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Measure.SupplementalData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "usage", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "description", kind: "message", T: String },
    { no: 7, name: "criteria", kind: "message", T: Expression },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Measure_SupplementalData {
    return new Measure_SupplementalData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Measure_SupplementalData {
    return new Measure_SupplementalData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Measure_SupplementalData {
    return new Measure_SupplementalData().fromJsonString(jsonString, options);
  }

  static equals(a: Measure_SupplementalData | PlainMessage<Measure_SupplementalData> | undefined, b: Measure_SupplementalData | PlainMessage<Measure_SupplementalData> | undefined): boolean {
    return proto3.util.equals(Measure_SupplementalData, a, b);
  }
}

