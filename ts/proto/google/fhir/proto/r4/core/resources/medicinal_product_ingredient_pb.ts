//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medicinal_product_ingredient.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, Extension, Id, Identifier, Meta, Narrative, Ratio, Reference, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicinalProductIngredient.
 * An ingredient of a manufactured item or pharmaceutical product.
 * See http://hl7.org/fhir/StructureDefinition/MedicinalProductIngredient
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIngredient
 */
export class MedicinalProductIngredient extends Message<MedicinalProductIngredient> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier for the ingredient
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier?: Identifier;

  /**
   * Ingredient role e.g. Active ingredient, excipient
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 11;
   */
  role?: CodeableConcept;

  /**
   * If the ingredient is a known or suspected allergen
   *
   * @generated from field: google.fhir.r4.core.Boolean allergenic_indicator = 12;
   */
  allergenicIndicator?: Boolean;

  /**
   * Manufacturer of this Ingredient
   *
   * @generated from field: repeated google.fhir.r4.core.Reference manufacturer = 13;
   */
  manufacturer: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance specified_substance = 14;
   */
  specifiedSubstance: MedicinalProductIngredient_SpecifiedSubstance[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MedicinalProductIngredient.Substance substance = 15;
   */
  substance?: MedicinalProductIngredient_Substance;

  constructor(data?: PartialMessage<MedicinalProductIngredient>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIngredient";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier },
    { no: 11, name: "role", kind: "message", T: CodeableConcept },
    { no: 12, name: "allergenic_indicator", kind: "message", T: Boolean },
    { no: 13, name: "manufacturer", kind: "message", T: Reference, repeated: true },
    { no: 14, name: "specified_substance", kind: "message", T: MedicinalProductIngredient_SpecifiedSubstance, repeated: true },
    { no: 15, name: "substance", kind: "message", T: MedicinalProductIngredient_Substance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIngredient {
    return new MedicinalProductIngredient().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIngredient {
    return new MedicinalProductIngredient().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIngredient {
    return new MedicinalProductIngredient().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIngredient | PlainMessage<MedicinalProductIngredient> | undefined, b: MedicinalProductIngredient | PlainMessage<MedicinalProductIngredient> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIngredient, a, b);
  }
}

/**
 * A specified substance that comprises this ingredient
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance
 */
export class MedicinalProductIngredient_SpecifiedSubstance extends Message<MedicinalProductIngredient_SpecifiedSubstance> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The specified substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * The group of specified substance, e.g. group 1 to 4
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept group = 5;
   */
  group?: CodeableConcept;

  /**
   * Confidentiality level of the specified substance as the ingredient
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept confidentiality = 6;
   */
  confidentiality?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength strength = 7;
   */
  strength: MedicinalProductIngredient_SpecifiedSubstance_Strength[] = [];

  constructor(data?: PartialMessage<MedicinalProductIngredient_SpecifiedSubstance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "group", kind: "message", T: CodeableConcept },
    { no: 6, name: "confidentiality", kind: "message", T: CodeableConcept },
    { no: 7, name: "strength", kind: "message", T: MedicinalProductIngredient_SpecifiedSubstance_Strength, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIngredient_SpecifiedSubstance {
    return new MedicinalProductIngredient_SpecifiedSubstance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_SpecifiedSubstance {
    return new MedicinalProductIngredient_SpecifiedSubstance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_SpecifiedSubstance {
    return new MedicinalProductIngredient_SpecifiedSubstance().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIngredient_SpecifiedSubstance | PlainMessage<MedicinalProductIngredient_SpecifiedSubstance> | undefined, b: MedicinalProductIngredient_SpecifiedSubstance | PlainMessage<MedicinalProductIngredient_SpecifiedSubstance> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIngredient_SpecifiedSubstance, a, b);
  }
}

/**
 * Quantity of the substance or specified substance present in the
 * manufactured item or pharmaceutical product
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength
 */
export class MedicinalProductIngredient_SpecifiedSubstance_Strength extends Message<MedicinalProductIngredient_SpecifiedSubstance_Strength> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The quantity of substance in the unit of presentation, or in the volume
   * (or mass) of the single pharmaceutical product or manufactured item
   *
   * @generated from field: google.fhir.r4.core.Ratio presentation = 4;
   */
  presentation?: Ratio;

  /**
   * A lower limit for the quantity of substance in the unit of
   * presentation. For use when there is a range of strengths, this is the
   * lower limit, with the presentation attribute becoming the upper limit
   *
   * @generated from field: google.fhir.r4.core.Ratio presentation_low_limit = 5;
   */
  presentationLowLimit?: Ratio;

  /**
   * The strength per unitary volume (or mass)
   *
   * @generated from field: google.fhir.r4.core.Ratio concentration = 6;
   */
  concentration?: Ratio;

  /**
   * A lower limit for the strength per unitary volume (or mass), for when
   * there is a range. The concentration attribute then becomes the upper
   * limit
   *
   * @generated from field: google.fhir.r4.core.Ratio concentration_low_limit = 7;
   */
  concentrationLowLimit?: Ratio;

  /**
   * For when strength is measured at a particular point or distance
   *
   * @generated from field: google.fhir.r4.core.String measurement_point = 8;
   */
  measurementPoint?: String;

  /**
   * The country or countries for which the strength range applies
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept country = 9;
   */
  country: CodeableConcept[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength reference_strength = 10;
   */
  referenceStrength: MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength[] = [];

  constructor(data?: PartialMessage<MedicinalProductIngredient_SpecifiedSubstance_Strength>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "presentation", kind: "message", T: Ratio },
    { no: 5, name: "presentation_low_limit", kind: "message", T: Ratio },
    { no: 6, name: "concentration", kind: "message", T: Ratio },
    { no: 7, name: "concentration_low_limit", kind: "message", T: Ratio },
    { no: 8, name: "measurement_point", kind: "message", T: String },
    { no: 9, name: "country", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "reference_strength", kind: "message", T: MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIngredient_SpecifiedSubstance_Strength {
    return new MedicinalProductIngredient_SpecifiedSubstance_Strength().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_SpecifiedSubstance_Strength {
    return new MedicinalProductIngredient_SpecifiedSubstance_Strength().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_SpecifiedSubstance_Strength {
    return new MedicinalProductIngredient_SpecifiedSubstance_Strength().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIngredient_SpecifiedSubstance_Strength | PlainMessage<MedicinalProductIngredient_SpecifiedSubstance_Strength> | undefined, b: MedicinalProductIngredient_SpecifiedSubstance_Strength | PlainMessage<MedicinalProductIngredient_SpecifiedSubstance_Strength> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIngredient_SpecifiedSubstance_Strength, a, b);
  }
}

/**
 * Strength expressed in terms of a reference substance
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength
 */
export class MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength extends Message<MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Relevant reference substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept substance = 4;
   */
  substance?: CodeableConcept;

  /**
   * Strength expressed in terms of a reference substance
   *
   * @generated from field: google.fhir.r4.core.Ratio strength = 5;
   */
  strength?: Ratio;

  /**
   * Strength expressed in terms of a reference substance
   *
   * @generated from field: google.fhir.r4.core.Ratio strength_low_limit = 6;
   */
  strengthLowLimit?: Ratio;

  /**
   * For when strength is measured at a particular point or distance
   *
   * @generated from field: google.fhir.r4.core.String measurement_point = 7;
   */
  measurementPoint?: String;

  /**
   * The country or countries for which the strength range applies
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept country = 8;
   */
  country: CodeableConcept[] = [];

  constructor(data?: PartialMessage<MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "substance", kind: "message", T: CodeableConcept },
    { no: 5, name: "strength", kind: "message", T: Ratio },
    { no: 6, name: "strength_low_limit", kind: "message", T: Ratio },
    { no: 7, name: "measurement_point", kind: "message", T: String },
    { no: 8, name: "country", kind: "message", T: CodeableConcept, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength {
    return new MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength {
    return new MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength {
    return new MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength | PlainMessage<MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength> | undefined, b: MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength | PlainMessage<MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIngredient_SpecifiedSubstance_Strength_ReferenceStrength, a, b);
  }
}

/**
 * The ingredient substance
 *
 * @generated from message google.fhir.r4.core.MedicinalProductIngredient.Substance
 */
export class MedicinalProductIngredient_Substance extends Message<MedicinalProductIngredient_Substance> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The ingredient substance
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Quantity of the substance or specified substance present in the
   * manufactured item or pharmaceutical product
   *
   * @generated from field: repeated google.fhir.r4.core.MedicinalProductIngredient.SpecifiedSubstance.Strength strength = 5;
   */
  strength: MedicinalProductIngredient_SpecifiedSubstance_Strength[] = [];

  constructor(data?: PartialMessage<MedicinalProductIngredient_Substance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicinalProductIngredient.Substance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "strength", kind: "message", T: MedicinalProductIngredient_SpecifiedSubstance_Strength, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicinalProductIngredient_Substance {
    return new MedicinalProductIngredient_Substance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_Substance {
    return new MedicinalProductIngredient_Substance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicinalProductIngredient_Substance {
    return new MedicinalProductIngredient_Substance().fromJsonString(jsonString, options);
  }

  static equals(a: MedicinalProductIngredient_Substance | PlainMessage<MedicinalProductIngredient_Substance> | undefined, b: MedicinalProductIngredient_Substance | PlainMessage<MedicinalProductIngredient_Substance> | undefined): boolean {
    return proto3.util.equals(MedicinalProductIngredient_Substance, a, b);
  }
}

