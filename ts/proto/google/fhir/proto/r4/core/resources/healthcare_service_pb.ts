//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/healthcare_service.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Attachment, Boolean, Code, CodeableConcept, ContactPoint, Extension, Id, Identifier, Markdown, Meta, Narrative, Period, Reference, String, Time, Uri } from "../datatypes_pb.js";
import { DaysOfWeekCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for HealthcareService.
 * The details of a healthcare service available at a location.
 * See http://hl7.org/fhir/StructureDefinition/HealthcareService
 *
 * @generated from message google.fhir.r4.core.HealthcareService
 */
export class HealthcareService extends Message<HealthcareService> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External identifiers for this item
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Whether this HealthcareService record is in active use
   *
   * @generated from field: google.fhir.r4.core.Boolean active = 11;
   */
  active?: Boolean;

  /**
   * Organization that provides this service
   *
   * @generated from field: google.fhir.r4.core.Reference provided_by = 12;
   */
  providedBy?: Reference;

  /**
   * Broad category of service being performed or delivered
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 13;
   */
  category: CodeableConcept[] = [];

  /**
   * Type of service that may be delivered or performed
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 14;
   */
  type: CodeableConcept[] = [];

  /**
   * Specialties handled by the HealthcareService
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept specialty = 15;
   */
  specialty: CodeableConcept[] = [];

  /**
   * Location(s) where service may be provided
   *
   * @generated from field: repeated google.fhir.r4.core.Reference location = 16;
   */
  location: Reference[] = [];

  /**
   * Description of service as presented to a consumer while searching
   *
   * @generated from field: google.fhir.r4.core.String name = 17;
   */
  name?: String;

  /**
   * Additional description and/or any specific issues not covered elsewhere
   *
   * @generated from field: google.fhir.r4.core.String comment = 18;
   */
  comment?: String;

  /**
   * Extra details about the service that can't be placed in the other fields
   *
   * @generated from field: google.fhir.r4.core.Markdown extra_details = 19;
   */
  extraDetails?: Markdown;

  /**
   * Facilitates quick identification of the service
   *
   * @generated from field: google.fhir.r4.core.Attachment photo = 20;
   */
  photo?: Attachment;

  /**
   * Contacts related to the healthcare service
   *
   * @generated from field: repeated google.fhir.r4.core.ContactPoint telecom = 21;
   */
  telecom: ContactPoint[] = [];

  /**
   * Location(s) service is intended for/available to
   *
   * @generated from field: repeated google.fhir.r4.core.Reference coverage_area = 22;
   */
  coverageArea: Reference[] = [];

  /**
   * Conditions under which service is available/offered
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept service_provision_code = 23;
   */
  serviceProvisionCode: CodeableConcept[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.HealthcareService.Eligibility eligibility = 24;
   */
  eligibility: HealthcareService_Eligibility[] = [];

  /**
   * Programs that this service is applicable to
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept program = 25;
   */
  program: CodeableConcept[] = [];

  /**
   * Collection of characteristics (attributes)
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept characteristic = 26;
   */
  characteristic: CodeableConcept[] = [];

  /**
   * The language that this service is offered in
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept communication = 27;
   */
  communication: CodeableConcept[] = [];

  /**
   * Ways that the service accepts referrals
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept referral_method = 28;
   */
  referralMethod: CodeableConcept[] = [];

  /**
   * If an appointment is required for access to this service
   *
   * @generated from field: google.fhir.r4.core.Boolean appointment_required = 29;
   */
  appointmentRequired?: Boolean;

  /**
   * @generated from field: repeated google.fhir.r4.core.HealthcareService.AvailableTime available_time = 30;
   */
  availableTime: HealthcareService_AvailableTime[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.HealthcareService.NotAvailable not_available = 31;
   */
  notAvailable: HealthcareService_NotAvailable[] = [];

  /**
   * Description of availability exceptions
   *
   * @generated from field: google.fhir.r4.core.String availability_exceptions = 32;
   */
  availabilityExceptions?: String;

  /**
   * Technical endpoints providing access to electronic services operated for
   * the healthcare service
   *
   * @generated from field: repeated google.fhir.r4.core.Reference endpoint = 33;
   */
  endpoint: Reference[] = [];

  constructor(data?: PartialMessage<HealthcareService>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.HealthcareService";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "active", kind: "message", T: Boolean },
    { no: 12, name: "provided_by", kind: "message", T: Reference },
    { no: 13, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 15, name: "specialty", kind: "message", T: CodeableConcept, repeated: true },
    { no: 16, name: "location", kind: "message", T: Reference, repeated: true },
    { no: 17, name: "name", kind: "message", T: String },
    { no: 18, name: "comment", kind: "message", T: String },
    { no: 19, name: "extra_details", kind: "message", T: Markdown },
    { no: 20, name: "photo", kind: "message", T: Attachment },
    { no: 21, name: "telecom", kind: "message", T: ContactPoint, repeated: true },
    { no: 22, name: "coverage_area", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "service_provision_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 24, name: "eligibility", kind: "message", T: HealthcareService_Eligibility, repeated: true },
    { no: 25, name: "program", kind: "message", T: CodeableConcept, repeated: true },
    { no: 26, name: "characteristic", kind: "message", T: CodeableConcept, repeated: true },
    { no: 27, name: "communication", kind: "message", T: CodeableConcept, repeated: true },
    { no: 28, name: "referral_method", kind: "message", T: CodeableConcept, repeated: true },
    { no: 29, name: "appointment_required", kind: "message", T: Boolean },
    { no: 30, name: "available_time", kind: "message", T: HealthcareService_AvailableTime, repeated: true },
    { no: 31, name: "not_available", kind: "message", T: HealthcareService_NotAvailable, repeated: true },
    { no: 32, name: "availability_exceptions", kind: "message", T: String },
    { no: 33, name: "endpoint", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcareService {
    return new HealthcareService().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcareService {
    return new HealthcareService().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcareService {
    return new HealthcareService().fromJsonString(jsonString, options);
  }

  static equals(a: HealthcareService | PlainMessage<HealthcareService> | undefined, b: HealthcareService | PlainMessage<HealthcareService> | undefined): boolean {
    return proto3.util.equals(HealthcareService, a, b);
  }
}

/**
 * Specific eligibility requirements required to use the service
 *
 * @generated from message google.fhir.r4.core.HealthcareService.Eligibility
 */
export class HealthcareService_Eligibility extends Message<HealthcareService_Eligibility> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Coded value for the eligibility
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Describes the eligibility conditions for the service
   *
   * @generated from field: google.fhir.r4.core.Markdown comment = 5;
   */
  comment?: Markdown;

  constructor(data?: PartialMessage<HealthcareService_Eligibility>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.HealthcareService.Eligibility";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "comment", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcareService_Eligibility {
    return new HealthcareService_Eligibility().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcareService_Eligibility {
    return new HealthcareService_Eligibility().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcareService_Eligibility {
    return new HealthcareService_Eligibility().fromJsonString(jsonString, options);
  }

  static equals(a: HealthcareService_Eligibility | PlainMessage<HealthcareService_Eligibility> | undefined, b: HealthcareService_Eligibility | PlainMessage<HealthcareService_Eligibility> | undefined): boolean {
    return proto3.util.equals(HealthcareService_Eligibility, a, b);
  }
}

/**
 * Times the Service Site is available
 *
 * @generated from message google.fhir.r4.core.HealthcareService.AvailableTime
 */
export class HealthcareService_AvailableTime extends Message<HealthcareService_AvailableTime> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.HealthcareService.AvailableTime.DaysOfWeekCode days_of_week = 4;
   */
  daysOfWeek: HealthcareService_AvailableTime_DaysOfWeekCode[] = [];

  /**
   * Always available? e.g. 24 hour service
   *
   * @generated from field: google.fhir.r4.core.Boolean all_day = 5;
   */
  allDay?: Boolean;

  /**
   * Opening time of day (ignored if allDay = true)
   *
   * @generated from field: google.fhir.r4.core.Time available_start_time = 6;
   */
  availableStartTime?: Time;

  /**
   * Closing time of day (ignored if allDay = true)
   *
   * @generated from field: google.fhir.r4.core.Time available_end_time = 7;
   */
  availableEndTime?: Time;

  constructor(data?: PartialMessage<HealthcareService_AvailableTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.HealthcareService.AvailableTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "days_of_week", kind: "message", T: HealthcareService_AvailableTime_DaysOfWeekCode, repeated: true },
    { no: 5, name: "all_day", kind: "message", T: Boolean },
    { no: 6, name: "available_start_time", kind: "message", T: Time },
    { no: 7, name: "available_end_time", kind: "message", T: Time },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcareService_AvailableTime {
    return new HealthcareService_AvailableTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcareService_AvailableTime {
    return new HealthcareService_AvailableTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcareService_AvailableTime {
    return new HealthcareService_AvailableTime().fromJsonString(jsonString, options);
  }

  static equals(a: HealthcareService_AvailableTime | PlainMessage<HealthcareService_AvailableTime> | undefined, b: HealthcareService_AvailableTime | PlainMessage<HealthcareService_AvailableTime> | undefined): boolean {
    return proto3.util.equals(HealthcareService_AvailableTime, a, b);
  }
}

/**
 * mon | tue | wed | thu | fri | sat | sun
 *
 * @generated from message google.fhir.r4.core.HealthcareService.AvailableTime.DaysOfWeekCode
 */
export class HealthcareService_AvailableTime_DaysOfWeekCode extends Message<HealthcareService_AvailableTime_DaysOfWeekCode> {
  /**
   * @generated from field: google.fhir.r4.core.DaysOfWeekCode.Value value = 1;
   */
  value = DaysOfWeekCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<HealthcareService_AvailableTime_DaysOfWeekCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.HealthcareService.AvailableTime.DaysOfWeekCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(DaysOfWeekCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcareService_AvailableTime_DaysOfWeekCode {
    return new HealthcareService_AvailableTime_DaysOfWeekCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcareService_AvailableTime_DaysOfWeekCode {
    return new HealthcareService_AvailableTime_DaysOfWeekCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcareService_AvailableTime_DaysOfWeekCode {
    return new HealthcareService_AvailableTime_DaysOfWeekCode().fromJsonString(jsonString, options);
  }

  static equals(a: HealthcareService_AvailableTime_DaysOfWeekCode | PlainMessage<HealthcareService_AvailableTime_DaysOfWeekCode> | undefined, b: HealthcareService_AvailableTime_DaysOfWeekCode | PlainMessage<HealthcareService_AvailableTime_DaysOfWeekCode> | undefined): boolean {
    return proto3.util.equals(HealthcareService_AvailableTime_DaysOfWeekCode, a, b);
  }
}

/**
 * Not available during this time due to provided reason
 *
 * @generated from message google.fhir.r4.core.HealthcareService.NotAvailable
 */
export class HealthcareService_NotAvailable extends Message<HealthcareService_NotAvailable> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Reason presented to the user explaining why time not available
   *
   * @generated from field: google.fhir.r4.core.String description = 4;
   */
  description?: String;

  /**
   * Service not available from this date
   *
   * @generated from field: google.fhir.r4.core.Period during = 5;
   */
  during?: Period;

  constructor(data?: PartialMessage<HealthcareService_NotAvailable>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.HealthcareService.NotAvailable";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "description", kind: "message", T: String },
    { no: 5, name: "during", kind: "message", T: Period },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthcareService_NotAvailable {
    return new HealthcareService_NotAvailable().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthcareService_NotAvailable {
    return new HealthcareService_NotAvailable().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthcareService_NotAvailable {
    return new HealthcareService_NotAvailable().fromJsonString(jsonString, options);
  }

  static equals(a: HealthcareService_NotAvailable | PlainMessage<HealthcareService_NotAvailable> | undefined, b: HealthcareService_NotAvailable | PlainMessage<HealthcareService_NotAvailable> | undefined): boolean {
    return proto3.util.equals(HealthcareService_NotAvailable, a, b);
  }
}

