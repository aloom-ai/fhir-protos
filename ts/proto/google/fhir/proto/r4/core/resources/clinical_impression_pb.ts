//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/clinical_impression.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Code, CodeableConcept, DateTime, Extension, Id, Identifier, Meta, Narrative, Period, Reference, String, Uri } from "../datatypes_pb.js";
import { ClinicalImpressionStatusValueSet_Value } from "../valuesets_pb.js";

/**
 * Auto-generated from StructureDefinition for ClinicalImpression.
 * A clinical assessment performed when planning treatments and management
 * strategies for a patient. See
 * http://hl7.org/fhir/StructureDefinition/ClinicalImpression
 *
 * @generated from message google.fhir.r4.core.ClinicalImpression
 */
export class ClinicalImpression extends Message<ClinicalImpression> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Business identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ClinicalImpression.StatusCode status = 11;
   */
  status?: ClinicalImpression_StatusCode;

  /**
   * Reason for current status
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status_reason = 12;
   */
  statusReason?: CodeableConcept;

  /**
   * Kind of assessment performed
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 13;
   */
  code?: CodeableConcept;

  /**
   * Why/how the assessment was performed
   *
   * @generated from field: google.fhir.r4.core.String description = 14;
   */
  description?: String;

  /**
   * Patient or group assessed
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 15;
   */
  subject?: Reference;

  /**
   * Encounter created as part of
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 16;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.ClinicalImpression.EffectiveX effective = 17;
   */
  effective?: ClinicalImpression_EffectiveX;

  /**
   * When the assessment was documented
   *
   * @generated from field: google.fhir.r4.core.DateTime date = 18;
   */
  date?: DateTime;

  /**
   * The clinician performing the assessment
   *
   * @generated from field: google.fhir.r4.core.Reference assessor = 19;
   */
  assessor?: Reference;

  /**
   * Reference to last assessment
   *
   * @generated from field: google.fhir.r4.core.Reference previous = 20;
   */
  previous?: Reference;

  /**
   * Relevant impressions of patient state
   *
   * @generated from field: repeated google.fhir.r4.core.Reference problem = 21;
   */
  problem: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ClinicalImpression.Investigation investigation = 22;
   */
  investigation: ClinicalImpression_Investigation[] = [];

  /**
   * Clinical Protocol followed
   *
   * @generated from field: repeated google.fhir.r4.core.Uri protocol = 23;
   */
  protocol: Uri[] = [];

  /**
   * Summary of the assessment
   *
   * @generated from field: google.fhir.r4.core.String summary = 24;
   */
  summary?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.ClinicalImpression.Finding finding = 25;
   */
  finding: ClinicalImpression_Finding[] = [];

  /**
   * Estimate of likely outcome
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept prognosis_codeable_concept = 26;
   */
  prognosisCodeableConcept: CodeableConcept[] = [];

  /**
   * RiskAssessment expressing likely outcome
   *
   * @generated from field: repeated google.fhir.r4.core.Reference prognosis_reference = 27;
   */
  prognosisReference: Reference[] = [];

  /**
   * Information supporting the clinical impression
   *
   * @generated from field: repeated google.fhir.r4.core.Reference supporting_info = 28;
   */
  supportingInfo: Reference[] = [];

  /**
   * Comments made about the ClinicalImpression
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 29;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<ClinicalImpression>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalImpression";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "status", kind: "message", T: ClinicalImpression_StatusCode },
    { no: 12, name: "status_reason", kind: "message", T: CodeableConcept },
    { no: 13, name: "code", kind: "message", T: CodeableConcept },
    { no: 14, name: "description", kind: "message", T: String },
    { no: 15, name: "subject", kind: "message", T: Reference },
    { no: 16, name: "encounter", kind: "message", T: Reference },
    { no: 17, name: "effective", kind: "message", T: ClinicalImpression_EffectiveX },
    { no: 18, name: "date", kind: "message", T: DateTime },
    { no: 19, name: "assessor", kind: "message", T: Reference },
    { no: 20, name: "previous", kind: "message", T: Reference },
    { no: 21, name: "problem", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "investigation", kind: "message", T: ClinicalImpression_Investigation, repeated: true },
    { no: 23, name: "protocol", kind: "message", T: Uri, repeated: true },
    { no: 24, name: "summary", kind: "message", T: String },
    { no: 25, name: "finding", kind: "message", T: ClinicalImpression_Finding, repeated: true },
    { no: 26, name: "prognosis_codeable_concept", kind: "message", T: CodeableConcept, repeated: true },
    { no: 27, name: "prognosis_reference", kind: "message", T: Reference, repeated: true },
    { no: 28, name: "supporting_info", kind: "message", T: Reference, repeated: true },
    { no: 29, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalImpression {
    return new ClinicalImpression().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalImpression {
    return new ClinicalImpression().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalImpression {
    return new ClinicalImpression().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalImpression | PlainMessage<ClinicalImpression> | undefined, b: ClinicalImpression | PlainMessage<ClinicalImpression> | undefined): boolean {
    return proto3.util.equals(ClinicalImpression, a, b);
  }
}

/**
 * in-progress | completed | entered-in-error
 *
 * @generated from message google.fhir.r4.core.ClinicalImpression.StatusCode
 */
export class ClinicalImpression_StatusCode extends Message<ClinicalImpression_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ClinicalImpressionStatusValueSet.Value value = 1;
   */
  value = ClinicalImpressionStatusValueSet_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ClinicalImpression_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalImpression.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ClinicalImpressionStatusValueSet_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalImpression_StatusCode {
    return new ClinicalImpression_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalImpression_StatusCode {
    return new ClinicalImpression_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalImpression_StatusCode {
    return new ClinicalImpression_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalImpression_StatusCode | PlainMessage<ClinicalImpression_StatusCode> | undefined, b: ClinicalImpression_StatusCode | PlainMessage<ClinicalImpression_StatusCode> | undefined): boolean {
    return proto3.util.equals(ClinicalImpression_StatusCode, a, b);
  }
}

/**
 * Time of assessment
 *
 * @generated from message google.fhir.r4.core.ClinicalImpression.EffectiveX
 */
export class ClinicalImpression_EffectiveX extends Message<ClinicalImpression_EffectiveX> {
  /**
   * @generated from oneof google.fhir.r4.core.ClinicalImpression.EffectiveX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ClinicalImpression_EffectiveX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalImpression.EffectiveX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalImpression_EffectiveX {
    return new ClinicalImpression_EffectiveX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalImpression_EffectiveX {
    return new ClinicalImpression_EffectiveX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalImpression_EffectiveX {
    return new ClinicalImpression_EffectiveX().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalImpression_EffectiveX | PlainMessage<ClinicalImpression_EffectiveX> | undefined, b: ClinicalImpression_EffectiveX | PlainMessage<ClinicalImpression_EffectiveX> | undefined): boolean {
    return proto3.util.equals(ClinicalImpression_EffectiveX, a, b);
  }
}

/**
 * One or more sets of investigations (signs, symptoms, etc.)
 *
 * @generated from message google.fhir.r4.core.ClinicalImpression.Investigation
 */
export class ClinicalImpression_Investigation extends Message<ClinicalImpression_Investigation> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * A name/code for the set
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 4;
   */
  code?: CodeableConcept;

  /**
   * Record of a specific investigation
   *
   * @generated from field: repeated google.fhir.r4.core.Reference item = 5;
   */
  item: Reference[] = [];

  constructor(data?: PartialMessage<ClinicalImpression_Investigation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalImpression.Investigation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "code", kind: "message", T: CodeableConcept },
    { no: 5, name: "item", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalImpression_Investigation {
    return new ClinicalImpression_Investigation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalImpression_Investigation {
    return new ClinicalImpression_Investigation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalImpression_Investigation {
    return new ClinicalImpression_Investigation().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalImpression_Investigation | PlainMessage<ClinicalImpression_Investigation> | undefined, b: ClinicalImpression_Investigation | PlainMessage<ClinicalImpression_Investigation> | undefined): boolean {
    return proto3.util.equals(ClinicalImpression_Investigation, a, b);
  }
}

/**
 * Possible or likely findings and diagnoses
 *
 * @generated from message google.fhir.r4.core.ClinicalImpression.Finding
 */
export class ClinicalImpression_Finding extends Message<ClinicalImpression_Finding> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * What was found
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept item_codeable_concept = 4;
   */
  itemCodeableConcept?: CodeableConcept;

  /**
   * What was found
   *
   * @generated from field: google.fhir.r4.core.Reference item_reference = 5;
   */
  itemReference?: Reference;

  /**
   * Which investigations support finding
   *
   * @generated from field: google.fhir.r4.core.String basis = 6;
   */
  basis?: String;

  constructor(data?: PartialMessage<ClinicalImpression_Finding>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ClinicalImpression.Finding";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "item_codeable_concept", kind: "message", T: CodeableConcept },
    { no: 5, name: "item_reference", kind: "message", T: Reference },
    { no: 6, name: "basis", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClinicalImpression_Finding {
    return new ClinicalImpression_Finding().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClinicalImpression_Finding {
    return new ClinicalImpression_Finding().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClinicalImpression_Finding {
    return new ClinicalImpression_Finding().fromJsonString(jsonString, options);
  }

  static equals(a: ClinicalImpression_Finding | PlainMessage<ClinicalImpression_Finding> | undefined, b: ClinicalImpression_Finding | PlainMessage<ClinicalImpression_Finding> | undefined): boolean {
    return proto3.util.equals(ClinicalImpression_Finding, a, b);
  }
}

