//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance_protein.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Attachment, Code, CodeableConcept, Extension, Id, Identifier, Integer, Meta, Narrative, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for SubstanceProtein.
 * A SubstanceProtein is defined as a single unit of a linear amino acid
 * sequence, or a combination of subunits that are either covalently linked or
 * have a defined invariant stoichiometric relationship. This includes all
 * synthetic, recombinant and purified SubstanceProteins of defined sequence,
 * whether the use is therapeutic or prophylactic. This set of elements will be
 * used to describe albumins, coagulation factors, cytokines, growth factors,
 * peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant
 * vaccines, and immunomodulators. See
 * http://hl7.org/fhir/StructureDefinition/SubstanceProtein
 *
 * @generated from message google.fhir.r4.core.SubstanceProtein
 */
export class SubstanceProtein extends Message<SubstanceProtein> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * The SubstanceProtein descriptive elements will only be used when a complete
   * or partial amino acid sequence is available or derivable from a nucleic
   * acid sequence
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept sequence_type = 10;
   */
  sequenceType?: CodeableConcept;

  /**
   * Number of linear sequences of amino acids linked through peptide bonds. The
   * number of subunits constituting the SubstanceProtein shall be described. It
   * is possible that the number of subunits can be variable
   *
   * @generated from field: google.fhir.r4.core.Integer number_of_subunits = 11;
   */
  numberOfSubunits?: Integer;

  /**
   * The disulphide bond between two cysteine residues either on the same
   * subunit or on two different subunits shall be described. The position of
   * the disulfide bonds in the SubstanceProtein shall be listed in increasing
   * order of subunit number and position within subunit followed by the
   * abbreviation of the amino acids involved. The disulfide linkage positions
   * shall actually contain the amino acid Cysteine at the respective positions
   *
   * @generated from field: repeated google.fhir.r4.core.String disulfide_linkage = 12;
   */
  disulfideLinkage: String[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceProtein.Subunit subunit = 13;
   */
  subunit: SubstanceProtein_Subunit[] = [];

  constructor(data?: PartialMessage<SubstanceProtein>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceProtein";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "sequence_type", kind: "message", T: CodeableConcept },
    { no: 11, name: "number_of_subunits", kind: "message", T: Integer },
    { no: 12, name: "disulfide_linkage", kind: "message", T: String, repeated: true },
    { no: 13, name: "subunit", kind: "message", T: SubstanceProtein_Subunit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceProtein {
    return new SubstanceProtein().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceProtein {
    return new SubstanceProtein().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceProtein {
    return new SubstanceProtein().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceProtein | PlainMessage<SubstanceProtein> | undefined, b: SubstanceProtein | PlainMessage<SubstanceProtein> | undefined): boolean {
    return proto3.util.equals(SubstanceProtein, a, b);
  }
}

/**
 * This subclause refers to the description of each subunit constituting the
 * SubstanceProtein. A subunit is a linear sequence of amino acids linked
 * through peptide bonds. The Subunit information shall be provided when the
 * finished SubstanceProtein is a complex of multiple sequences; subunits are
 * not used to delineate domains within a single sequence. Subunits are listed
 * in order of decreasing length; sequences of the same length will be ordered
 * by decreasing molecular weight; subunits that have identical sequences will
 * be repeated multiple times
 *
 * @generated from message google.fhir.r4.core.SubstanceProtein.Subunit
 */
export class SubstanceProtein_Subunit extends Message<SubstanceProtein_Subunit> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Index of primary sequences of amino acids linked through peptide bonds in
   * order of decreasing length. Sequences of the same length will be ordered
   * by molecular weight. Subunits that have identical sequences will be
   * repeated and have sequential subscripts
   *
   * @generated from field: google.fhir.r4.core.Integer subunit = 4;
   */
  subunit?: Integer;

  /**
   * The sequence information shall be provided enumerating the amino acids
   * from N- to C-terminal end using standard single-letter amino acid codes.
   * Uppercase shall be used for L-amino acids and lowercase for D-amino
   * acids. Transcribed SubstanceProteins will always be described using the
   * translated sequence; for synthetic peptide containing amino acids that
   * are not represented with a single letter code an X should be used within
   * the sequence. The modified amino acids will be distinguished by their
   * position in the sequence
   *
   * @generated from field: google.fhir.r4.core.String sequence = 5;
   */
  sequence?: String;

  /**
   * Length of linear sequences of amino acids contained in the subunit
   *
   * @generated from field: google.fhir.r4.core.Integer length = 6;
   */
  length?: Integer;

  /**
   * The sequence information shall be provided enumerating the amino acids
   * from N- to C-terminal end using standard single-letter amino acid codes.
   * Uppercase shall be used for L-amino acids and lowercase for D-amino
   * acids. Transcribed SubstanceProteins will always be described using the
   * translated sequence; for synthetic peptide containing amino acids that
   * are not represented with a single letter code an X should be used within
   * the sequence. The modified amino acids will be distinguished by their
   * position in the sequence
   *
   * @generated from field: google.fhir.r4.core.Attachment sequence_attachment = 7;
   */
  sequenceAttachment?: Attachment;

  /**
   * Unique identifier for molecular fragment modification based on the ISO
   * 11238 Substance ID
   *
   * @generated from field: google.fhir.r4.core.Identifier n_terminal_modification_id = 8;
   */
  nTerminalModificationId?: Identifier;

  /**
   * The name of the fragment modified at the N-terminal of the
   * SubstanceProtein shall be specified
   *
   * @generated from field: google.fhir.r4.core.String n_terminal_modification = 9;
   */
  nTerminalModification?: String;

  /**
   * Unique identifier for molecular fragment modification based on the ISO
   * 11238 Substance ID
   *
   * @generated from field: google.fhir.r4.core.Identifier c_terminal_modification_id = 10;
   */
  cTerminalModificationId?: Identifier;

  /**
   * The modification at the C-terminal shall be specified
   *
   * @generated from field: google.fhir.r4.core.String c_terminal_modification = 11;
   */
  cTerminalModification?: String;

  constructor(data?: PartialMessage<SubstanceProtein_Subunit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceProtein.Subunit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "subunit", kind: "message", T: Integer },
    { no: 5, name: "sequence", kind: "message", T: String },
    { no: 6, name: "length", kind: "message", T: Integer },
    { no: 7, name: "sequence_attachment", kind: "message", T: Attachment },
    { no: 8, name: "n_terminal_modification_id", kind: "message", T: Identifier },
    { no: 9, name: "n_terminal_modification", kind: "message", T: String },
    { no: 10, name: "c_terminal_modification_id", kind: "message", T: Identifier },
    { no: 11, name: "c_terminal_modification", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceProtein_Subunit {
    return new SubstanceProtein_Subunit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceProtein_Subunit {
    return new SubstanceProtein_Subunit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceProtein_Subunit {
    return new SubstanceProtein_Subunit().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceProtein_Subunit | PlainMessage<SubstanceProtein_Subunit> | undefined, b: SubstanceProtein_Subunit | PlainMessage<SubstanceProtein_Subunit> | undefined): boolean {
    return proto3.util.equals(SubstanceProtein_Subunit, a, b);
  }
}

