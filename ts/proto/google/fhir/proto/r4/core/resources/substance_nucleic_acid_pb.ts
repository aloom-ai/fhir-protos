//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/substance_nucleic_acid.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Attachment, Code, CodeableConcept, Extension, Id, Identifier, Integer, Meta, Narrative, String, Uri } from "../datatypes_pb.js";

/**
 * Auto-generated from StructureDefinition for SubstanceNucleicAcid.
 * Nucleic acids are defined by three distinct elements: the base, sugar and
 * linkage. Individual substance/moiety IDs will be created for each of these
 * elements. The nucleotide sequence will be always entered in the 5’-3’
 * direction. See http://hl7.org/fhir/StructureDefinition/SubstanceNucleicAcid
 *
 * @generated from message google.fhir.r4.core.SubstanceNucleicAcid
 */
export class SubstanceNucleicAcid extends Message<SubstanceNucleicAcid> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * The type of the sequence shall be specified based on a controlled
   * vocabulary
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept sequence_type = 10;
   */
  sequenceType?: CodeableConcept;

  /**
   * The number of linear sequences of nucleotides linked through phosphodiester
   * bonds shall be described. Subunits would be strands of nucleic acids that
   * are tightly associated typically through Watson-Crick base pairing. NOTE:
   * If not specified in the reference source, the assumption is that there is 1
   * subunit
   *
   * @generated from field: google.fhir.r4.core.Integer number_of_subunits = 11;
   */
  numberOfSubunits?: Integer;

  /**
   * The area of hybridisation shall be described if applicable for double
   * stranded RNA or DNA. The number associated with the subunit followed by the
   * number associated to the residue shall be specified in increasing order.
   * The underscore “” shall be used as separator as follows: “Subunitnumber
   * Residue”
   *
   * @generated from field: google.fhir.r4.core.String area_of_hybridisation = 12;
   */
  areaOfHybridisation?: String;

  /**
   * (TBC)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept oligo_nucleotide_type = 13;
   */
  oligoNucleotideType?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceNucleicAcid.Subunit subunit = 14;
   */
  subunit: SubstanceNucleicAcid_Subunit[] = [];

  constructor(data?: PartialMessage<SubstanceNucleicAcid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceNucleicAcid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "sequence_type", kind: "message", T: CodeableConcept },
    { no: 11, name: "number_of_subunits", kind: "message", T: Integer },
    { no: 12, name: "area_of_hybridisation", kind: "message", T: String },
    { no: 13, name: "oligo_nucleotide_type", kind: "message", T: CodeableConcept },
    { no: 14, name: "subunit", kind: "message", T: SubstanceNucleicAcid_Subunit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceNucleicAcid {
    return new SubstanceNucleicAcid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid {
    return new SubstanceNucleicAcid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid {
    return new SubstanceNucleicAcid().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceNucleicAcid | PlainMessage<SubstanceNucleicAcid> | undefined, b: SubstanceNucleicAcid | PlainMessage<SubstanceNucleicAcid> | undefined): boolean {
    return proto3.util.equals(SubstanceNucleicAcid, a, b);
  }
}

/**
 * Subunits are listed in order of decreasing length; sequences of the same
 * length will be ordered by molecular weight; subunits that have identical
 * sequences will be repeated multiple times
 *
 * @generated from message google.fhir.r4.core.SubstanceNucleicAcid.Subunit
 */
export class SubstanceNucleicAcid_Subunit extends Message<SubstanceNucleicAcid_Subunit> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Index of linear sequences of nucleic acids in order of decreasing length.
   * Sequences of the same length will be ordered by molecular weight.
   * Subunits that have identical sequences will be repeated and have
   * sequential subscripts
   *
   * @generated from field: google.fhir.r4.core.Integer subunit = 4;
   */
  subunit?: Integer;

  /**
   * Actual nucleotide sequence notation from 5' to 3' end using standard
   * single letter codes. In addition to the base sequence, sugar and type of
   * phosphate or non-phosphate linkage should also be captured
   *
   * @generated from field: google.fhir.r4.core.String sequence = 5;
   */
  sequence?: String;

  /**
   * The length of the sequence shall be captured
   *
   * @generated from field: google.fhir.r4.core.Integer length = 6;
   */
  length?: Integer;

  /**
   * (TBC)
   *
   * @generated from field: google.fhir.r4.core.Attachment sequence_attachment = 7;
   */
  sequenceAttachment?: Attachment;

  /**
   * The nucleotide present at the 5’ terminal shall be specified based on a
   * controlled vocabulary. Since the sequence is represented from the 5' to
   * the 3' end, the 5’ prime nucleotide is the letter at the first position
   * in the sequence. A separate representation would be redundant
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept five_prime = 8;
   */
  fivePrime?: CodeableConcept;

  /**
   * The nucleotide present at the 3’ terminal shall be specified based on a
   * controlled vocabulary. Since the sequence is represented from the 5' to
   * the 3' end, the 5’ prime nucleotide is the letter at the last position in
   * the sequence. A separate representation would be redundant
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept three_prime = 9;
   */
  threePrime?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage linkage = 10;
   */
  linkage: SubstanceNucleicAcid_Subunit_Linkage[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar sugar = 11;
   */
  sugar: SubstanceNucleicAcid_Subunit_Sugar[] = [];

  constructor(data?: PartialMessage<SubstanceNucleicAcid_Subunit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceNucleicAcid.Subunit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "subunit", kind: "message", T: Integer },
    { no: 5, name: "sequence", kind: "message", T: String },
    { no: 6, name: "length", kind: "message", T: Integer },
    { no: 7, name: "sequence_attachment", kind: "message", T: Attachment },
    { no: 8, name: "five_prime", kind: "message", T: CodeableConcept },
    { no: 9, name: "three_prime", kind: "message", T: CodeableConcept },
    { no: 10, name: "linkage", kind: "message", T: SubstanceNucleicAcid_Subunit_Linkage, repeated: true },
    { no: 11, name: "sugar", kind: "message", T: SubstanceNucleicAcid_Subunit_Sugar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceNucleicAcid_Subunit {
    return new SubstanceNucleicAcid_Subunit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid_Subunit {
    return new SubstanceNucleicAcid_Subunit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid_Subunit {
    return new SubstanceNucleicAcid_Subunit().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceNucleicAcid_Subunit | PlainMessage<SubstanceNucleicAcid_Subunit> | undefined, b: SubstanceNucleicAcid_Subunit | PlainMessage<SubstanceNucleicAcid_Subunit> | undefined): boolean {
    return proto3.util.equals(SubstanceNucleicAcid_Subunit, a, b);
  }
}

/**
 * The linkages between sugar residues will also be captured
 *
 * @generated from message google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage
 */
export class SubstanceNucleicAcid_Subunit_Linkage extends Message<SubstanceNucleicAcid_Subunit_Linkage> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The entity that links the sugar residues together should also be
   * captured for nearly all naturally occurring nucleic acid the linkage is
   * a phosphate group. For many synthetic oligonucleotides phosphorothioate
   * linkages are often seen. Linkage connectivity is assumed to be 3’-5’.
   * If the linkage is either 3’-3’ or 5’-5’ this should be specified
   *
   * @generated from field: google.fhir.r4.core.String connectivity = 4;
   */
  connectivity?: String;

  /**
   * Each linkage will be registered as a fragment and have an ID
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 5;
   */
  identifier?: Identifier;

  /**
   * Each linkage will be registered as a fragment and have at least one
   * name. A single name shall be assigned to each linkage
   *
   * @generated from field: google.fhir.r4.core.String name = 6;
   */
  name?: String;

  /**
   * Residues shall be captured as described in 5.3.6.8.3
   *
   * @generated from field: google.fhir.r4.core.String residue_site = 7;
   */
  residueSite?: String;

  constructor(data?: PartialMessage<SubstanceNucleicAcid_Subunit_Linkage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Linkage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "connectivity", kind: "message", T: String },
    { no: 5, name: "identifier", kind: "message", T: Identifier },
    { no: 6, name: "name", kind: "message", T: String },
    { no: 7, name: "residue_site", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceNucleicAcid_Subunit_Linkage {
    return new SubstanceNucleicAcid_Subunit_Linkage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid_Subunit_Linkage {
    return new SubstanceNucleicAcid_Subunit_Linkage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid_Subunit_Linkage {
    return new SubstanceNucleicAcid_Subunit_Linkage().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceNucleicAcid_Subunit_Linkage | PlainMessage<SubstanceNucleicAcid_Subunit_Linkage> | undefined, b: SubstanceNucleicAcid_Subunit_Linkage | PlainMessage<SubstanceNucleicAcid_Subunit_Linkage> | undefined): boolean {
    return proto3.util.equals(SubstanceNucleicAcid_Subunit_Linkage, a, b);
  }
}

/**
 * 5.3.6.8.1 Sugar ID (Mandatory)
 *
 * @generated from message google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar
 */
export class SubstanceNucleicAcid_Subunit_Sugar extends Message<SubstanceNucleicAcid_Subunit_Sugar> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The Substance ID of the sugar or sugar-like component that make up the
   * nucleotide
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier?: Identifier;

  /**
   * The name of the sugar or sugar-like component that make up the
   * nucleotide
   *
   * @generated from field: google.fhir.r4.core.String name = 5;
   */
  name?: String;

  /**
   * The residues that contain a given sugar will be captured. The order of
   * given residues will be captured in the 5‘-3‘direction consistent with
   * the base sequences listed above
   *
   * @generated from field: google.fhir.r4.core.String residue_site = 6;
   */
  residueSite?: String;

  constructor(data?: PartialMessage<SubstanceNucleicAcid_Subunit_Sugar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.SubstanceNucleicAcid.Subunit.Sugar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier },
    { no: 5, name: "name", kind: "message", T: String },
    { no: 6, name: "residue_site", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubstanceNucleicAcid_Subunit_Sugar {
    return new SubstanceNucleicAcid_Subunit_Sugar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid_Subunit_Sugar {
    return new SubstanceNucleicAcid_Subunit_Sugar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubstanceNucleicAcid_Subunit_Sugar {
    return new SubstanceNucleicAcid_Subunit_Sugar().fromJsonString(jsonString, options);
  }

  static equals(a: SubstanceNucleicAcid_Subunit_Sugar | PlainMessage<SubstanceNucleicAcid_Subunit_Sugar> | undefined, b: SubstanceNucleicAcid_Subunit_Sugar | PlainMessage<SubstanceNucleicAcid_Subunit_Sugar> | undefined): boolean {
    return proto3.util.equals(SubstanceNucleicAcid_Subunit_Sugar, a, b);
  }
}

