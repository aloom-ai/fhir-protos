//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/contract.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Attachment, Boolean, Code, CodeableConcept, Coding, Date, DateTime, Decimal, Extension, Id, Identifier, Integer, Markdown, Meta, Money, Narrative, Period, Quantity, Reference, Signature, SimpleQuantity, String, Time, Timing, UnsignedInt, Uri } from "../datatypes_pb.js";
import { ContractResourcePublicationStatusCode_Value, ContractResourceStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Contract.
 * Legal Agreement.
 * See http://hl7.org/fhir/StructureDefinition/Contract
 *
 * @generated from message google.fhir.r4.core.Contract
 */
export class Contract extends Message<Contract> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Contract number
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Basal definition
   *
   * @generated from field: google.fhir.r4.core.Uri url = 11;
   */
  url?: Uri;

  /**
   * Business edition
   *
   * @generated from field: google.fhir.r4.core.String version = 12;
   */
  version?: String;

  /**
   * @generated from field: google.fhir.r4.core.Contract.StatusCode status = 13;
   */
  status?: Contract_StatusCode;

  /**
   * Negotiation status
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept legal_state = 14;
   */
  legalState?: CodeableConcept;

  /**
   * Source Contract Definition
   *
   * @generated from field: google.fhir.r4.core.Reference instantiates_canonical = 15;
   */
  instantiatesCanonical?: Reference;

  /**
   * External Contract Definition
   *
   * @generated from field: google.fhir.r4.core.Uri instantiates_uri = 16;
   */
  instantiatesUri?: Uri;

  /**
   * Content derived from the basal information
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept content_derivative = 17;
   */
  contentDerivative?: CodeableConcept;

  /**
   * When this Contract was issued
   *
   * @generated from field: google.fhir.r4.core.DateTime issued = 18;
   */
  issued?: DateTime;

  /**
   * Effective time
   *
   * @generated from field: google.fhir.r4.core.Period applies = 19;
   */
  applies?: Period;

  /**
   * Contract cessation cause
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept expiration_type = 20;
   */
  expirationType?: CodeableConcept;

  /**
   * Contract Target Entity
   *
   * @generated from field: repeated google.fhir.r4.core.Reference subject = 21;
   */
  subject: Reference[] = [];

  /**
   * Authority under which this Contract has standing
   *
   * @generated from field: repeated google.fhir.r4.core.Reference authority = 22;
   */
  authority: Reference[] = [];

  /**
   * A sphere of control governed by an authoritative jurisdiction,
   * organization, or person
   *
   * @generated from field: repeated google.fhir.r4.core.Reference domain = 23;
   */
  domain: Reference[] = [];

  /**
   * Specific Location
   *
   * @generated from field: repeated google.fhir.r4.core.Reference site = 24;
   */
  site: Reference[] = [];

  /**
   * Computer friendly designation
   *
   * @generated from field: google.fhir.r4.core.String name = 25;
   */
  name?: String;

  /**
   * Human Friendly name
   *
   * @generated from field: google.fhir.r4.core.String title = 26;
   */
  title?: String;

  /**
   * Subordinate Friendly name
   *
   * @generated from field: google.fhir.r4.core.String subtitle = 27;
   */
  subtitle?: String;

  /**
   * Acronym or short name
   *
   * @generated from field: repeated google.fhir.r4.core.String alias = 28;
   */
  alias: String[] = [];

  /**
   * Source of Contract
   *
   * @generated from field: google.fhir.r4.core.Reference author = 29;
   */
  author?: Reference;

  /**
   * Range of Legal Concerns
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept scope = 30;
   */
  scope?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Contract.TopicX topic = 31;
   */
  topic?: Contract_TopicX;

  /**
   * Legal instrument category
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 32;
   */
  type?: CodeableConcept;

  /**
   * Subtype within the context of type
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept sub_type = 33;
   */
  subType: CodeableConcept[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.ContentDefinition content_definition = 34;
   */
  contentDefinition?: Contract_ContentDefinition;

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term term = 35;
   */
  term: Contract_Term[] = [];

  /**
   * Extra Information
   *
   * @generated from field: repeated google.fhir.r4.core.Reference supporting_info = 36;
   */
  supportingInfo: Reference[] = [];

  /**
   * Key event in Contract History
   *
   * @generated from field: repeated google.fhir.r4.core.Reference relevant_history = 37;
   */
  relevantHistory: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Signatory signer = 38;
   */
  signer: Contract_Signatory[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.FriendlyLanguage friendly = 39;
   */
  friendly: Contract_FriendlyLanguage[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.LegalLanguage legal = 40;
   */
  legal: Contract_LegalLanguage[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.ComputableLanguage rule = 41;
   */
  rule: Contract_ComputableLanguage[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.LegallyBindingX legally_binding = 42;
   */
  legallyBinding?: Contract_LegallyBindingX;

  constructor(data?: PartialMessage<Contract>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "url", kind: "message", T: Uri },
    { no: 12, name: "version", kind: "message", T: String },
    { no: 13, name: "status", kind: "message", T: Contract_StatusCode },
    { no: 14, name: "legal_state", kind: "message", T: CodeableConcept },
    { no: 15, name: "instantiates_canonical", kind: "message", T: Reference },
    { no: 16, name: "instantiates_uri", kind: "message", T: Uri },
    { no: 17, name: "content_derivative", kind: "message", T: CodeableConcept },
    { no: 18, name: "issued", kind: "message", T: DateTime },
    { no: 19, name: "applies", kind: "message", T: Period },
    { no: 20, name: "expiration_type", kind: "message", T: CodeableConcept },
    { no: 21, name: "subject", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "authority", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "domain", kind: "message", T: Reference, repeated: true },
    { no: 24, name: "site", kind: "message", T: Reference, repeated: true },
    { no: 25, name: "name", kind: "message", T: String },
    { no: 26, name: "title", kind: "message", T: String },
    { no: 27, name: "subtitle", kind: "message", T: String },
    { no: 28, name: "alias", kind: "message", T: String, repeated: true },
    { no: 29, name: "author", kind: "message", T: Reference },
    { no: 30, name: "scope", kind: "message", T: CodeableConcept },
    { no: 31, name: "topic", kind: "message", T: Contract_TopicX },
    { no: 32, name: "type", kind: "message", T: CodeableConcept },
    { no: 33, name: "sub_type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 34, name: "content_definition", kind: "message", T: Contract_ContentDefinition },
    { no: 35, name: "term", kind: "message", T: Contract_Term, repeated: true },
    { no: 36, name: "supporting_info", kind: "message", T: Reference, repeated: true },
    { no: 37, name: "relevant_history", kind: "message", T: Reference, repeated: true },
    { no: 38, name: "signer", kind: "message", T: Contract_Signatory, repeated: true },
    { no: 39, name: "friendly", kind: "message", T: Contract_FriendlyLanguage, repeated: true },
    { no: 40, name: "legal", kind: "message", T: Contract_LegalLanguage, repeated: true },
    { no: 41, name: "rule", kind: "message", T: Contract_ComputableLanguage, repeated: true },
    { no: 42, name: "legally_binding", kind: "message", T: Contract_LegallyBindingX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract {
    return new Contract().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract {
    return new Contract().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract {
    return new Contract().fromJsonString(jsonString, options);
  }

  static equals(a: Contract | PlainMessage<Contract> | undefined, b: Contract | PlainMessage<Contract> | undefined): boolean {
    return proto3.util.equals(Contract, a, b);
  }
}

/**
 * amended | appended | cancelled | disputed | entered-in-error | executable |
 * executed | negotiable | offered | policy | rejected | renewed | revoked |
 * resolved | terminated
 *
 * @generated from message google.fhir.r4.core.Contract.StatusCode
 */
export class Contract_StatusCode extends Message<Contract_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ContractResourceStatusCode.Value value = 1;
   */
  value = ContractResourceStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Contract_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ContractResourceStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_StatusCode {
    return new Contract_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_StatusCode {
    return new Contract_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_StatusCode {
    return new Contract_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_StatusCode | PlainMessage<Contract_StatusCode> | undefined, b: Contract_StatusCode | PlainMessage<Contract_StatusCode> | undefined): boolean {
    return proto3.util.equals(Contract_StatusCode, a, b);
  }
}

/**
 * Focus of contract interest
 *
 * @generated from message google.fhir.r4.core.Contract.TopicX
 */
export class Contract_TopicX extends Message<Contract_TopicX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.TopicX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_TopicX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.TopicX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_TopicX {
    return new Contract_TopicX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_TopicX {
    return new Contract_TopicX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_TopicX {
    return new Contract_TopicX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_TopicX | PlainMessage<Contract_TopicX> | undefined, b: Contract_TopicX | PlainMessage<Contract_TopicX> | undefined): boolean {
    return proto3.util.equals(Contract_TopicX, a, b);
  }
}

/**
 * Contract precursor content
 *
 * @generated from message google.fhir.r4.core.Contract.ContentDefinition
 */
export class Contract_ContentDefinition extends Message<Contract_ContentDefinition> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Content structure and use
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 4;
   */
  type?: CodeableConcept;

  /**
   * Detailed Content Type Definition
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept sub_type = 5;
   */
  subType?: CodeableConcept;

  /**
   * Publisher Entity
   *
   * @generated from field: google.fhir.r4.core.Reference publisher = 6;
   */
  publisher?: Reference;

  /**
   * When published
   *
   * @generated from field: google.fhir.r4.core.DateTime publication_date = 7;
   */
  publicationDate?: DateTime;

  /**
   * @generated from field: google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode publication_status = 8;
   */
  publicationStatus?: Contract_ContentDefinition_PublicationStatusCode;

  /**
   * Publication Ownership
   *
   * @generated from field: google.fhir.r4.core.Markdown copyright = 9;
   */
  copyright?: Markdown;

  constructor(data?: PartialMessage<Contract_ContentDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.ContentDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: CodeableConcept },
    { no: 5, name: "sub_type", kind: "message", T: CodeableConcept },
    { no: 6, name: "publisher", kind: "message", T: Reference },
    { no: 7, name: "publication_date", kind: "message", T: DateTime },
    { no: 8, name: "publication_status", kind: "message", T: Contract_ContentDefinition_PublicationStatusCode },
    { no: 9, name: "copyright", kind: "message", T: Markdown },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_ContentDefinition {
    return new Contract_ContentDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_ContentDefinition {
    return new Contract_ContentDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_ContentDefinition {
    return new Contract_ContentDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_ContentDefinition | PlainMessage<Contract_ContentDefinition> | undefined, b: Contract_ContentDefinition | PlainMessage<Contract_ContentDefinition> | undefined): boolean {
    return proto3.util.equals(Contract_ContentDefinition, a, b);
  }
}

/**
 * amended | appended | cancelled | disputed | entered-in-error | executable
 * | executed | negotiable | offered | policy | rejected | renewed | revoked
 * | resolved | terminated
 *
 * @generated from message google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode
 */
export class Contract_ContentDefinition_PublicationStatusCode extends Message<Contract_ContentDefinition_PublicationStatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.ContractResourcePublicationStatusCode.Value value = 1;
   */
  value = ContractResourcePublicationStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Contract_ContentDefinition_PublicationStatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.ContentDefinition.PublicationStatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ContractResourcePublicationStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_ContentDefinition_PublicationStatusCode {
    return new Contract_ContentDefinition_PublicationStatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_ContentDefinition_PublicationStatusCode {
    return new Contract_ContentDefinition_PublicationStatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_ContentDefinition_PublicationStatusCode {
    return new Contract_ContentDefinition_PublicationStatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_ContentDefinition_PublicationStatusCode | PlainMessage<Contract_ContentDefinition_PublicationStatusCode> | undefined, b: Contract_ContentDefinition_PublicationStatusCode | PlainMessage<Contract_ContentDefinition_PublicationStatusCode> | undefined): boolean {
    return proto3.util.equals(Contract_ContentDefinition_PublicationStatusCode, a, b);
  }
}

/**
 * Contract Term List
 *
 * @generated from message google.fhir.r4.core.Contract.Term
 */
export class Contract_Term extends Message<Contract_Term> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Contract Term Number
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier?: Identifier;

  /**
   * Contract Term Issue Date Time
   *
   * @generated from field: google.fhir.r4.core.DateTime issued = 5;
   */
  issued?: DateTime;

  /**
   * Contract Term Effective Time
   *
   * @generated from field: google.fhir.r4.core.Period applies = 6;
   */
  applies?: Period;

  /**
   * @generated from field: google.fhir.r4.core.Contract.Term.TopicX topic = 7;
   */
  topic?: Contract_Term_TopicX;

  /**
   * Contract Term Type or Form
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 8;
   */
  type?: CodeableConcept;

  /**
   * Contract Term Type specific classification
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept sub_type = 9;
   */
  subType?: CodeableConcept;

  /**
   * Term Statement
   *
   * @generated from field: google.fhir.r4.core.String text = 10;
   */
  text?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.SecurityLabel security_label = 11;
   */
  securityLabel: Contract_Term_SecurityLabel[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.Term.ContractOffer offer = 12;
   */
  offer?: Contract_Term_ContractOffer;

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.ContractAsset asset = 13;
   */
  asset: Contract_Term_ContractAsset[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.Action action = 14;
   */
  action: Contract_Term_Action[] = [];

  /**
   * Nested Contract Term Group
   *
   * @generated from field: repeated google.fhir.r4.core.Contract.Term group = 15;
   */
  group: Contract_Term[] = [];

  constructor(data?: PartialMessage<Contract_Term>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier },
    { no: 5, name: "issued", kind: "message", T: DateTime },
    { no: 6, name: "applies", kind: "message", T: Period },
    { no: 7, name: "topic", kind: "message", T: Contract_Term_TopicX },
    { no: 8, name: "type", kind: "message", T: CodeableConcept },
    { no: 9, name: "sub_type", kind: "message", T: CodeableConcept },
    { no: 10, name: "text", kind: "message", T: String },
    { no: 11, name: "security_label", kind: "message", T: Contract_Term_SecurityLabel, repeated: true },
    { no: 12, name: "offer", kind: "message", T: Contract_Term_ContractOffer },
    { no: 13, name: "asset", kind: "message", T: Contract_Term_ContractAsset, repeated: true },
    { no: 14, name: "action", kind: "message", T: Contract_Term_Action, repeated: true },
    { no: 15, name: "group", kind: "message", T: Contract_Term, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term {
    return new Contract_Term().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term {
    return new Contract_Term().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term {
    return new Contract_Term().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term | PlainMessage<Contract_Term> | undefined, b: Contract_Term | PlainMessage<Contract_Term> | undefined): boolean {
    return proto3.util.equals(Contract_Term, a, b);
  }
}

/**
 * Term Concern
 *
 * @generated from message google.fhir.r4.core.Contract.Term.TopicX
 */
export class Contract_Term_TopicX extends Message<Contract_Term_TopicX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.Term.TopicX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_Term_TopicX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.TopicX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_TopicX {
    return new Contract_Term_TopicX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_TopicX {
    return new Contract_Term_TopicX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_TopicX {
    return new Contract_Term_TopicX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_TopicX | PlainMessage<Contract_Term_TopicX> | undefined, b: Contract_Term_TopicX | PlainMessage<Contract_Term_TopicX> | undefined): boolean {
    return proto3.util.equals(Contract_Term_TopicX, a, b);
  }
}

/**
 * Protection for the Term
 *
 * @generated from message google.fhir.r4.core.Contract.Term.SecurityLabel
 */
export class Contract_Term_SecurityLabel extends Message<Contract_Term_SecurityLabel> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Link to Security Labels
   *
   * @generated from field: repeated google.fhir.r4.core.UnsignedInt number = 4;
   */
  number: UnsignedInt[] = [];

  /**
   * Confidentiality Protection
   *
   * @generated from field: google.fhir.r4.core.Coding classification = 5;
   */
  classification?: Coding;

  /**
   * Applicable Policy
   *
   * @generated from field: repeated google.fhir.r4.core.Coding category = 6;
   */
  category: Coding[] = [];

  /**
   * Handling Instructions
   *
   * @generated from field: repeated google.fhir.r4.core.Coding control = 7;
   */
  control: Coding[] = [];

  constructor(data?: PartialMessage<Contract_Term_SecurityLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.SecurityLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "number", kind: "message", T: UnsignedInt, repeated: true },
    { no: 5, name: "classification", kind: "message", T: Coding },
    { no: 6, name: "category", kind: "message", T: Coding, repeated: true },
    { no: 7, name: "control", kind: "message", T: Coding, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_SecurityLabel {
    return new Contract_Term_SecurityLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_SecurityLabel {
    return new Contract_Term_SecurityLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_SecurityLabel {
    return new Contract_Term_SecurityLabel().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_SecurityLabel | PlainMessage<Contract_Term_SecurityLabel> | undefined, b: Contract_Term_SecurityLabel | PlainMessage<Contract_Term_SecurityLabel> | undefined): boolean {
    return proto3.util.equals(Contract_Term_SecurityLabel, a, b);
  }
}

/**
 * Context of the Contract term
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractOffer
 */
export class Contract_Term_ContractOffer extends Message<Contract_Term_ContractOffer> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Offer business ID
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 4;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty party = 5;
   */
  party: Contract_Term_ContractOffer_ContractParty[] = [];

  /**
   * Negotiable offer asset
   *
   * @generated from field: google.fhir.r4.core.Reference topic = 6;
   */
  topic?: Reference;

  /**
   * Contract Offer Type or Form
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 7;
   */
  type?: CodeableConcept;

  /**
   * Accepting party choice
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept decision = 8;
   */
  decision?: CodeableConcept;

  /**
   * How decision is conveyed
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept decision_mode = 9;
   */
  decisionMode: CodeableConcept[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.ContractOffer.Answer answer = 10;
   */
  answer: Contract_Term_ContractOffer_Answer[] = [];

  /**
   * Human readable offer text
   *
   * @generated from field: google.fhir.r4.core.String text = 11;
   */
  text?: String;

  /**
   * Pointer to text
   *
   * @generated from field: repeated google.fhir.r4.core.String link_id = 12;
   */
  linkId: String[] = [];

  /**
   * Offer restriction numbers
   *
   * @generated from field: repeated google.fhir.r4.core.UnsignedInt security_label_number = 13;
   */
  securityLabelNumber: UnsignedInt[] = [];

  constructor(data?: PartialMessage<Contract_Term_ContractOffer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractOffer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 5, name: "party", kind: "message", T: Contract_Term_ContractOffer_ContractParty, repeated: true },
    { no: 6, name: "topic", kind: "message", T: Reference },
    { no: 7, name: "type", kind: "message", T: CodeableConcept },
    { no: 8, name: "decision", kind: "message", T: CodeableConcept },
    { no: 9, name: "decision_mode", kind: "message", T: CodeableConcept, repeated: true },
    { no: 10, name: "answer", kind: "message", T: Contract_Term_ContractOffer_Answer, repeated: true },
    { no: 11, name: "text", kind: "message", T: String },
    { no: 12, name: "link_id", kind: "message", T: String, repeated: true },
    { no: 13, name: "security_label_number", kind: "message", T: UnsignedInt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractOffer {
    return new Contract_Term_ContractOffer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer {
    return new Contract_Term_ContractOffer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer {
    return new Contract_Term_ContractOffer().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractOffer | PlainMessage<Contract_Term_ContractOffer> | undefined, b: Contract_Term_ContractOffer | PlainMessage<Contract_Term_ContractOffer> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractOffer, a, b);
  }
}

/**
 * Offer Recipient
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty
 */
export class Contract_Term_ContractOffer_ContractParty extends Message<Contract_Term_ContractOffer_ContractParty> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Referenced entity
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reference = 4;
   */
  reference: Reference[] = [];

  /**
   * Participant engagement type
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 5;
   */
  role?: CodeableConcept;

  constructor(data?: PartialMessage<Contract_Term_ContractOffer_ContractParty>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractOffer.ContractParty";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "reference", kind: "message", T: Reference, repeated: true },
    { no: 5, name: "role", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractOffer_ContractParty {
    return new Contract_Term_ContractOffer_ContractParty().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer_ContractParty {
    return new Contract_Term_ContractOffer_ContractParty().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer_ContractParty {
    return new Contract_Term_ContractOffer_ContractParty().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractOffer_ContractParty | PlainMessage<Contract_Term_ContractOffer_ContractParty> | undefined, b: Contract_Term_ContractOffer_ContractParty | PlainMessage<Contract_Term_ContractOffer_ContractParty> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractOffer_ContractParty, a, b);
  }
}

/**
 * Response to offer text
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractOffer.Answer
 */
export class Contract_Term_ContractOffer_Answer extends Message<Contract_Term_ContractOffer_Answer> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX value = 4;
   */
  value?: Contract_Term_ContractOffer_Answer_ValueX;

  constructor(data?: PartialMessage<Contract_Term_ContractOffer_Answer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractOffer.Answer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "value", kind: "message", T: Contract_Term_ContractOffer_Answer_ValueX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractOffer_Answer {
    return new Contract_Term_ContractOffer_Answer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer_Answer {
    return new Contract_Term_ContractOffer_Answer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer_Answer {
    return new Contract_Term_ContractOffer_Answer().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractOffer_Answer | PlainMessage<Contract_Term_ContractOffer_Answer> | undefined, b: Contract_Term_ContractOffer_Answer | PlainMessage<Contract_Term_ContractOffer_Answer> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractOffer_Answer, a, b);
  }
}

/**
 * The actual answer response
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX
 */
export class Contract_Term_ContractOffer_Answer_ValueX extends Message<Contract_Term_ContractOffer_Answer_ValueX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 1;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Decimal decimal = 2;
     */
    value: Decimal;
    case: "decimal";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Integer integer = 3;
     */
    value: Integer;
    case: "integer";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 4;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 5;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Time time = 6;
     */
    value: Time;
    case: "time";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 7 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Uri uri = 8;
     */
    value: Uri;
    case: "uri";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 9;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Coding coding = 10;
     */
    value: Coding;
    case: "coding";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 11;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 12;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_Term_ContractOffer_Answer_ValueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractOffer.Answer.ValueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 2, name: "decimal", kind: "message", T: Decimal, oneof: "choice" },
    { no: 3, name: "integer", kind: "message", T: Integer, oneof: "choice" },
    { no: 4, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 5, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 6, name: "time", kind: "message", T: Time, oneof: "choice" },
    { no: 7, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 8, name: "uri", kind: "message", T: Uri, oneof: "choice" },
    { no: 9, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 10, name: "coding", kind: "message", T: Coding, oneof: "choice" },
    { no: 11, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 12, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractOffer_Answer_ValueX {
    return new Contract_Term_ContractOffer_Answer_ValueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer_Answer_ValueX {
    return new Contract_Term_ContractOffer_Answer_ValueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractOffer_Answer_ValueX {
    return new Contract_Term_ContractOffer_Answer_ValueX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractOffer_Answer_ValueX | PlainMessage<Contract_Term_ContractOffer_Answer_ValueX> | undefined, b: Contract_Term_ContractOffer_Answer_ValueX | PlainMessage<Contract_Term_ContractOffer_Answer_ValueX> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractOffer_Answer_ValueX, a, b);
  }
}

/**
 * Contract Term Asset List
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractAsset
 */
export class Contract_Term_ContractAsset extends Message<Contract_Term_ContractAsset> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Range of asset
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept scope = 4;
   */
  scope?: CodeableConcept;

  /**
   * Asset category
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept type = 5;
   */
  type: CodeableConcept[] = [];

  /**
   * Associated entities
   *
   * @generated from field: repeated google.fhir.r4.core.Reference type_reference = 6;
   */
  typeReference: Reference[] = [];

  /**
   * Asset sub-category
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept subtype = 7;
   */
  subtype: CodeableConcept[] = [];

  /**
   * Kinship of the asset
   *
   * @generated from field: google.fhir.r4.core.Coding relationship = 8;
   */
  relationship?: Coding;

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext context = 9;
   */
  context: Contract_Term_ContractAsset_AssetContext[] = [];

  /**
   * Quality desctiption of asset
   *
   * @generated from field: google.fhir.r4.core.String condition = 10;
   */
  condition?: String;

  /**
   * Asset availability types
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept period_type = 11;
   */
  periodType: CodeableConcept[] = [];

  /**
   * Time period of the asset
   *
   * @generated from field: repeated google.fhir.r4.core.Period period = 12;
   */
  period: Period[] = [];

  /**
   * Time period
   *
   * @generated from field: repeated google.fhir.r4.core.Period use_period = 13;
   */
  usePeriod: Period[] = [];

  /**
   * Asset clause or question text
   *
   * @generated from field: google.fhir.r4.core.String text = 14;
   */
  text?: String;

  /**
   * Pointer to asset text
   *
   * @generated from field: repeated google.fhir.r4.core.String link_id = 15;
   */
  linkId: String[] = [];

  /**
   * Response to assets
   *
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.ContractOffer.Answer answer = 16;
   */
  answer: Contract_Term_ContractOffer_Answer[] = [];

  /**
   * Asset restriction numbers
   *
   * @generated from field: repeated google.fhir.r4.core.UnsignedInt security_label_number = 17;
   */
  securityLabelNumber: UnsignedInt[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem valued_item = 18;
   */
  valuedItem: Contract_Term_ContractAsset_ValuedItem[] = [];

  constructor(data?: PartialMessage<Contract_Term_ContractAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "scope", kind: "message", T: CodeableConcept },
    { no: 5, name: "type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "type_reference", kind: "message", T: Reference, repeated: true },
    { no: 7, name: "subtype", kind: "message", T: CodeableConcept, repeated: true },
    { no: 8, name: "relationship", kind: "message", T: Coding },
    { no: 9, name: "context", kind: "message", T: Contract_Term_ContractAsset_AssetContext, repeated: true },
    { no: 10, name: "condition", kind: "message", T: String },
    { no: 11, name: "period_type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 12, name: "period", kind: "message", T: Period, repeated: true },
    { no: 13, name: "use_period", kind: "message", T: Period, repeated: true },
    { no: 14, name: "text", kind: "message", T: String },
    { no: 15, name: "link_id", kind: "message", T: String, repeated: true },
    { no: 16, name: "answer", kind: "message", T: Contract_Term_ContractOffer_Answer, repeated: true },
    { no: 17, name: "security_label_number", kind: "message", T: UnsignedInt, repeated: true },
    { no: 18, name: "valued_item", kind: "message", T: Contract_Term_ContractAsset_ValuedItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractAsset {
    return new Contract_Term_ContractAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset {
    return new Contract_Term_ContractAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset {
    return new Contract_Term_ContractAsset().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractAsset | PlainMessage<Contract_Term_ContractAsset> | undefined, b: Contract_Term_ContractAsset | PlainMessage<Contract_Term_ContractAsset> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractAsset, a, b);
  }
}

/**
 * Circumstance of the asset
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext
 */
export class Contract_Term_ContractAsset_AssetContext extends Message<Contract_Term_ContractAsset_AssetContext> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Creator,custodian or owner
   *
   * @generated from field: google.fhir.r4.core.Reference reference = 4;
   */
  reference?: Reference;

  /**
   * Codeable asset context
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept code = 5;
   */
  code: CodeableConcept[] = [];

  /**
   * Context description
   *
   * @generated from field: google.fhir.r4.core.String text = 6;
   */
  text?: String;

  constructor(data?: PartialMessage<Contract_Term_ContractAsset_AssetContext>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractAsset.AssetContext";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "reference", kind: "message", T: Reference },
    { no: 5, name: "code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 6, name: "text", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractAsset_AssetContext {
    return new Contract_Term_ContractAsset_AssetContext().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset_AssetContext {
    return new Contract_Term_ContractAsset_AssetContext().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset_AssetContext {
    return new Contract_Term_ContractAsset_AssetContext().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractAsset_AssetContext | PlainMessage<Contract_Term_ContractAsset_AssetContext> | undefined, b: Contract_Term_ContractAsset_AssetContext | PlainMessage<Contract_Term_ContractAsset_AssetContext> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractAsset_AssetContext, a, b);
  }
}

/**
 * Contract Valued Item List
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem
 */
export class Contract_Term_ContractAsset_ValuedItem extends Message<Contract_Term_ContractAsset_ValuedItem> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX entity = 4;
   */
  entity?: Contract_Term_ContractAsset_ValuedItem_EntityX;

  /**
   * Contract Valued Item Number
   *
   * @generated from field: google.fhir.r4.core.Identifier identifier = 5;
   */
  identifier?: Identifier;

  /**
   * Contract Valued Item Effective Tiem
   *
   * @generated from field: google.fhir.r4.core.DateTime effective_time = 6;
   */
  effectiveTime?: DateTime;

  /**
   * Count of Contract Valued Items
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 7;
   */
  quantity?: SimpleQuantity;

  /**
   * Contract Valued Item fee, charge, or cost
   *
   * @generated from field: google.fhir.r4.core.Money unit_price = 8;
   */
  unitPrice?: Money;

  /**
   * Contract Valued Item Price Scaling Factor
   *
   * @generated from field: google.fhir.r4.core.Decimal factor = 9;
   */
  factor?: Decimal;

  /**
   * Contract Valued Item Difficulty Scaling Factor
   *
   * @generated from field: google.fhir.r4.core.Decimal points = 10;
   */
  points?: Decimal;

  /**
   * Total Contract Valued Item Value
   *
   * @generated from field: google.fhir.r4.core.Money net = 11;
   */
  net?: Money;

  /**
   * Terms of valuation
   *
   * @generated from field: google.fhir.r4.core.String payment = 12;
   */
  payment?: String;

  /**
   * When payment is due
   *
   * @generated from field: google.fhir.r4.core.DateTime payment_date = 13;
   */
  paymentDate?: DateTime;

  /**
   * Who will make payment
   *
   * @generated from field: google.fhir.r4.core.Reference responsible = 14;
   */
  responsible?: Reference;

  /**
   * Who will receive payment
   *
   * @generated from field: google.fhir.r4.core.Reference recipient = 15;
   */
  recipient?: Reference;

  /**
   * Pointer to specific item
   *
   * @generated from field: repeated google.fhir.r4.core.String link_id = 16;
   */
  linkId: String[] = [];

  /**
   * Security Labels that define affected terms
   *
   * @generated from field: repeated google.fhir.r4.core.UnsignedInt security_label_number = 17;
   */
  securityLabelNumber: UnsignedInt[] = [];

  constructor(data?: PartialMessage<Contract_Term_ContractAsset_ValuedItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "entity", kind: "message", T: Contract_Term_ContractAsset_ValuedItem_EntityX },
    { no: 5, name: "identifier", kind: "message", T: Identifier },
    { no: 6, name: "effective_time", kind: "message", T: DateTime },
    { no: 7, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 8, name: "unit_price", kind: "message", T: Money },
    { no: 9, name: "factor", kind: "message", T: Decimal },
    { no: 10, name: "points", kind: "message", T: Decimal },
    { no: 11, name: "net", kind: "message", T: Money },
    { no: 12, name: "payment", kind: "message", T: String },
    { no: 13, name: "payment_date", kind: "message", T: DateTime },
    { no: 14, name: "responsible", kind: "message", T: Reference },
    { no: 15, name: "recipient", kind: "message", T: Reference },
    { no: 16, name: "link_id", kind: "message", T: String, repeated: true },
    { no: 17, name: "security_label_number", kind: "message", T: UnsignedInt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractAsset_ValuedItem {
    return new Contract_Term_ContractAsset_ValuedItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset_ValuedItem {
    return new Contract_Term_ContractAsset_ValuedItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset_ValuedItem {
    return new Contract_Term_ContractAsset_ValuedItem().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractAsset_ValuedItem | PlainMessage<Contract_Term_ContractAsset_ValuedItem> | undefined, b: Contract_Term_ContractAsset_ValuedItem | PlainMessage<Contract_Term_ContractAsset_ValuedItem> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractAsset_ValuedItem, a, b);
  }
}

/**
 * Contract Valued Item Type
 *
 * @generated from message google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX
 */
export class Contract_Term_ContractAsset_ValuedItem_EntityX extends Message<Contract_Term_ContractAsset_ValuedItem_EntityX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_Term_ContractAsset_ValuedItem_EntityX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.ContractAsset.ValuedItem.EntityX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_ContractAsset_ValuedItem_EntityX {
    return new Contract_Term_ContractAsset_ValuedItem_EntityX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset_ValuedItem_EntityX {
    return new Contract_Term_ContractAsset_ValuedItem_EntityX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_ContractAsset_ValuedItem_EntityX {
    return new Contract_Term_ContractAsset_ValuedItem_EntityX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_ContractAsset_ValuedItem_EntityX | PlainMessage<Contract_Term_ContractAsset_ValuedItem_EntityX> | undefined, b: Contract_Term_ContractAsset_ValuedItem_EntityX | PlainMessage<Contract_Term_ContractAsset_ValuedItem_EntityX> | undefined): boolean {
    return proto3.util.equals(Contract_Term_ContractAsset_ValuedItem_EntityX, a, b);
  }
}

/**
 * Entity being ascribed responsibility
 *
 * @generated from message google.fhir.r4.core.Contract.Term.Action
 */
export class Contract_Term_Action extends Message<Contract_Term_Action> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * True if the term prohibits the  action
   *
   * @generated from field: google.fhir.r4.core.Boolean do_not_perform = 4;
   */
  doNotPerform?: Boolean;

  /**
   * Type or form of the action
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * @generated from field: repeated google.fhir.r4.core.Contract.Term.Action.ActionSubject subject = 6;
   */
  subject: Contract_Term_Action_ActionSubject[] = [];

  /**
   * Purpose for the Contract Term Action
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept intent = 7;
   */
  intent?: CodeableConcept;

  /**
   * Pointer to specific item
   *
   * @generated from field: repeated google.fhir.r4.core.String link_id = 8;
   */
  linkId: String[] = [];

  /**
   * State of the action
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept status = 9;
   */
  status?: CodeableConcept;

  /**
   * Episode associated with action
   *
   * @generated from field: google.fhir.r4.core.Reference context = 10;
   */
  context?: Reference;

  /**
   * Pointer to specific item
   *
   * @generated from field: repeated google.fhir.r4.core.String context_link_id = 11;
   */
  contextLinkId: String[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.Term.Action.OccurrenceX occurrence = 12;
   */
  occurrence?: Contract_Term_Action_OccurrenceX;

  /**
   * Who asked for action
   *
   * @generated from field: repeated google.fhir.r4.core.Reference requester = 13;
   */
  requester: Reference[] = [];

  /**
   * Pointer to specific item
   *
   * @generated from field: repeated google.fhir.r4.core.String requester_link_id = 14;
   */
  requesterLinkId: String[] = [];

  /**
   * Kind of service performer
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept performer_type = 15;
   */
  performerType: CodeableConcept[] = [];

  /**
   * Competency of the performer
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept performer_role = 16;
   */
  performerRole?: CodeableConcept;

  /**
   * Actor that wil execute (or not) the action
   *
   * @generated from field: google.fhir.r4.core.Reference performer = 17;
   */
  performer?: Reference;

  /**
   * Pointer to specific item
   *
   * @generated from field: repeated google.fhir.r4.core.String performer_link_id = 18;
   */
  performerLinkId: String[] = [];

  /**
   * Why is action (not) needed?
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 19;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * Why is action (not) needed?
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reason_reference = 20;
   */
  reasonReference: Reference[] = [];

  /**
   * Why action is to be performed
   *
   * @generated from field: repeated google.fhir.r4.core.String reason = 21;
   */
  reason: String[] = [];

  /**
   * Pointer to specific item
   *
   * @generated from field: repeated google.fhir.r4.core.String reason_link_id = 22;
   */
  reasonLinkId: String[] = [];

  /**
   * Comments about the action
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 23;
   */
  note: Annotation[] = [];

  /**
   * Action restriction numbers
   *
   * @generated from field: repeated google.fhir.r4.core.UnsignedInt security_label_number = 24;
   */
  securityLabelNumber: UnsignedInt[] = [];

  constructor(data?: PartialMessage<Contract_Term_Action>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.Action";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "do_not_perform", kind: "message", T: Boolean },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "subject", kind: "message", T: Contract_Term_Action_ActionSubject, repeated: true },
    { no: 7, name: "intent", kind: "message", T: CodeableConcept },
    { no: 8, name: "link_id", kind: "message", T: String, repeated: true },
    { no: 9, name: "status", kind: "message", T: CodeableConcept },
    { no: 10, name: "context", kind: "message", T: Reference },
    { no: 11, name: "context_link_id", kind: "message", T: String, repeated: true },
    { no: 12, name: "occurrence", kind: "message", T: Contract_Term_Action_OccurrenceX },
    { no: 13, name: "requester", kind: "message", T: Reference, repeated: true },
    { no: 14, name: "requester_link_id", kind: "message", T: String, repeated: true },
    { no: 15, name: "performer_type", kind: "message", T: CodeableConcept, repeated: true },
    { no: 16, name: "performer_role", kind: "message", T: CodeableConcept },
    { no: 17, name: "performer", kind: "message", T: Reference },
    { no: 18, name: "performer_link_id", kind: "message", T: String, repeated: true },
    { no: 19, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 20, name: "reason_reference", kind: "message", T: Reference, repeated: true },
    { no: 21, name: "reason", kind: "message", T: String, repeated: true },
    { no: 22, name: "reason_link_id", kind: "message", T: String, repeated: true },
    { no: 23, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 24, name: "security_label_number", kind: "message", T: UnsignedInt, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_Action {
    return new Contract_Term_Action().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_Action {
    return new Contract_Term_Action().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_Action {
    return new Contract_Term_Action().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_Action | PlainMessage<Contract_Term_Action> | undefined, b: Contract_Term_Action | PlainMessage<Contract_Term_Action> | undefined): boolean {
    return proto3.util.equals(Contract_Term_Action, a, b);
  }
}

/**
 * Entity of the action
 *
 * @generated from message google.fhir.r4.core.Contract.Term.Action.ActionSubject
 */
export class Contract_Term_Action_ActionSubject extends Message<Contract_Term_Action_ActionSubject> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Entity of the action
   *
   * @generated from field: repeated google.fhir.r4.core.Reference reference = 4;
   */
  reference: Reference[] = [];

  /**
   * Role type of the agent
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept role = 5;
   */
  role?: CodeableConcept;

  constructor(data?: PartialMessage<Contract_Term_Action_ActionSubject>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.Action.ActionSubject";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "reference", kind: "message", T: Reference, repeated: true },
    { no: 5, name: "role", kind: "message", T: CodeableConcept },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_Action_ActionSubject {
    return new Contract_Term_Action_ActionSubject().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_Action_ActionSubject {
    return new Contract_Term_Action_ActionSubject().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_Action_ActionSubject {
    return new Contract_Term_Action_ActionSubject().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_Action_ActionSubject | PlainMessage<Contract_Term_Action_ActionSubject> | undefined, b: Contract_Term_Action_ActionSubject | PlainMessage<Contract_Term_Action_ActionSubject> | undefined): boolean {
    return proto3.util.equals(Contract_Term_Action_ActionSubject, a, b);
  }
}

/**
 * When action happens
 *
 * @generated from message google.fhir.r4.core.Contract.Term.Action.OccurrenceX
 */
export class Contract_Term_Action_OccurrenceX extends Message<Contract_Term_Action_OccurrenceX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.Term.Action.OccurrenceX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Timing timing = 3;
     */
    value: Timing;
    case: "timing";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_Term_Action_OccurrenceX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Term.Action.OccurrenceX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
    { no: 3, name: "timing", kind: "message", T: Timing, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Term_Action_OccurrenceX {
    return new Contract_Term_Action_OccurrenceX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Term_Action_OccurrenceX {
    return new Contract_Term_Action_OccurrenceX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Term_Action_OccurrenceX {
    return new Contract_Term_Action_OccurrenceX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Term_Action_OccurrenceX | PlainMessage<Contract_Term_Action_OccurrenceX> | undefined, b: Contract_Term_Action_OccurrenceX | PlainMessage<Contract_Term_Action_OccurrenceX> | undefined): boolean {
    return proto3.util.equals(Contract_Term_Action_OccurrenceX, a, b);
  }
}

/**
 * Contract Signatory
 *
 * @generated from message google.fhir.r4.core.Contract.Signatory
 */
export class Contract_Signatory extends Message<Contract_Signatory> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Contract Signatory Role
   *
   * @generated from field: google.fhir.r4.core.Coding type = 4;
   */
  type?: Coding;

  /**
   * Contract Signatory Party
   *
   * @generated from field: google.fhir.r4.core.Reference party = 5;
   */
  party?: Reference;

  /**
   * Contract Documentation Signature
   *
   * @generated from field: repeated google.fhir.r4.core.Signature signature = 6;
   */
  signature: Signature[] = [];

  constructor(data?: PartialMessage<Contract_Signatory>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.Signatory";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "type", kind: "message", T: Coding },
    { no: 5, name: "party", kind: "message", T: Reference },
    { no: 6, name: "signature", kind: "message", T: Signature, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_Signatory {
    return new Contract_Signatory().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_Signatory {
    return new Contract_Signatory().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_Signatory {
    return new Contract_Signatory().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_Signatory | PlainMessage<Contract_Signatory> | undefined, b: Contract_Signatory | PlainMessage<Contract_Signatory> | undefined): boolean {
    return proto3.util.equals(Contract_Signatory, a, b);
  }
}

/**
 * Contract Friendly Language
 *
 * @generated from message google.fhir.r4.core.Contract.FriendlyLanguage
 */
export class Contract_FriendlyLanguage extends Message<Contract_FriendlyLanguage> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.FriendlyLanguage.ContentX content = 4;
   */
  content?: Contract_FriendlyLanguage_ContentX;

  constructor(data?: PartialMessage<Contract_FriendlyLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.FriendlyLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "content", kind: "message", T: Contract_FriendlyLanguage_ContentX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_FriendlyLanguage {
    return new Contract_FriendlyLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_FriendlyLanguage {
    return new Contract_FriendlyLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_FriendlyLanguage {
    return new Contract_FriendlyLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_FriendlyLanguage | PlainMessage<Contract_FriendlyLanguage> | undefined, b: Contract_FriendlyLanguage | PlainMessage<Contract_FriendlyLanguage> | undefined): boolean {
    return proto3.util.equals(Contract_FriendlyLanguage, a, b);
  }
}

/**
 * Easily comprehended representation of this Contract
 *
 * @generated from message google.fhir.r4.core.Contract.FriendlyLanguage.ContentX
 */
export class Contract_FriendlyLanguage_ContentX extends Message<Contract_FriendlyLanguage_ContentX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.FriendlyLanguage.ContentX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 1;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_FriendlyLanguage_ContentX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.FriendlyLanguage.ContentX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_FriendlyLanguage_ContentX {
    return new Contract_FriendlyLanguage_ContentX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_FriendlyLanguage_ContentX {
    return new Contract_FriendlyLanguage_ContentX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_FriendlyLanguage_ContentX {
    return new Contract_FriendlyLanguage_ContentX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_FriendlyLanguage_ContentX | PlainMessage<Contract_FriendlyLanguage_ContentX> | undefined, b: Contract_FriendlyLanguage_ContentX | PlainMessage<Contract_FriendlyLanguage_ContentX> | undefined): boolean {
    return proto3.util.equals(Contract_FriendlyLanguage_ContentX, a, b);
  }
}

/**
 * Contract Legal Language
 *
 * @generated from message google.fhir.r4.core.Contract.LegalLanguage
 */
export class Contract_LegalLanguage extends Message<Contract_LegalLanguage> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.LegalLanguage.ContentX content = 4;
   */
  content?: Contract_LegalLanguage_ContentX;

  constructor(data?: PartialMessage<Contract_LegalLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.LegalLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "content", kind: "message", T: Contract_LegalLanguage_ContentX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_LegalLanguage {
    return new Contract_LegalLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_LegalLanguage {
    return new Contract_LegalLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_LegalLanguage {
    return new Contract_LegalLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_LegalLanguage | PlainMessage<Contract_LegalLanguage> | undefined, b: Contract_LegalLanguage | PlainMessage<Contract_LegalLanguage> | undefined): boolean {
    return proto3.util.equals(Contract_LegalLanguage, a, b);
  }
}

/**
 * Contract Legal Text
 *
 * @generated from message google.fhir.r4.core.Contract.LegalLanguage.ContentX
 */
export class Contract_LegalLanguage_ContentX extends Message<Contract_LegalLanguage_ContentX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.LegalLanguage.ContentX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 1;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_LegalLanguage_ContentX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.LegalLanguage.ContentX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_LegalLanguage_ContentX {
    return new Contract_LegalLanguage_ContentX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_LegalLanguage_ContentX {
    return new Contract_LegalLanguage_ContentX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_LegalLanguage_ContentX {
    return new Contract_LegalLanguage_ContentX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_LegalLanguage_ContentX | PlainMessage<Contract_LegalLanguage_ContentX> | undefined, b: Contract_LegalLanguage_ContentX | PlainMessage<Contract_LegalLanguage_ContentX> | undefined): boolean {
    return proto3.util.equals(Contract_LegalLanguage_ContentX, a, b);
  }
}

/**
 * Computable Contract Language
 *
 * @generated from message google.fhir.r4.core.Contract.ComputableLanguage
 */
export class Contract_ComputableLanguage extends Message<Contract_ComputableLanguage> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Contract.ComputableLanguage.ContentX content = 4;
   */
  content?: Contract_ComputableLanguage_ContentX;

  constructor(data?: PartialMessage<Contract_ComputableLanguage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.ComputableLanguage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "content", kind: "message", T: Contract_ComputableLanguage_ContentX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_ComputableLanguage {
    return new Contract_ComputableLanguage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_ComputableLanguage {
    return new Contract_ComputableLanguage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_ComputableLanguage {
    return new Contract_ComputableLanguage().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_ComputableLanguage | PlainMessage<Contract_ComputableLanguage> | undefined, b: Contract_ComputableLanguage | PlainMessage<Contract_ComputableLanguage> | undefined): boolean {
    return proto3.util.equals(Contract_ComputableLanguage, a, b);
  }
}

/**
 * Computable Contract Rules
 *
 * @generated from message google.fhir.r4.core.Contract.ComputableLanguage.ContentX
 */
export class Contract_ComputableLanguage_ContentX extends Message<Contract_ComputableLanguage_ContentX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.ComputableLanguage.ContentX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 1;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_ComputableLanguage_ContentX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.ComputableLanguage.ContentX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_ComputableLanguage_ContentX {
    return new Contract_ComputableLanguage_ContentX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_ComputableLanguage_ContentX {
    return new Contract_ComputableLanguage_ContentX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_ComputableLanguage_ContentX {
    return new Contract_ComputableLanguage_ContentX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_ComputableLanguage_ContentX | PlainMessage<Contract_ComputableLanguage_ContentX> | undefined, b: Contract_ComputableLanguage_ContentX | PlainMessage<Contract_ComputableLanguage_ContentX> | undefined): boolean {
    return proto3.util.equals(Contract_ComputableLanguage_ContentX, a, b);
  }
}

/**
 * Binding Contract
 *
 * @generated from message google.fhir.r4.core.Contract.LegallyBindingX
 */
export class Contract_LegallyBindingX extends Message<Contract_LegallyBindingX> {
  /**
   * @generated from oneof google.fhir.r4.core.Contract.LegallyBindingX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Attachment attachment = 1;
     */
    value: Attachment;
    case: "attachment";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Contract_LegallyBindingX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Contract.LegallyBindingX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attachment", kind: "message", T: Attachment, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contract_LegallyBindingX {
    return new Contract_LegallyBindingX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contract_LegallyBindingX {
    return new Contract_LegallyBindingX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contract_LegallyBindingX {
    return new Contract_LegallyBindingX().fromJsonString(jsonString, options);
  }

  static equals(a: Contract_LegallyBindingX | PlainMessage<Contract_LegallyBindingX> | undefined, b: Contract_LegallyBindingX | PlainMessage<Contract_LegallyBindingX> | undefined): boolean {
    return proto3.util.equals(Contract_LegallyBindingX, a, b);
  }
}

