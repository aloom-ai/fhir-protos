//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/medication_dispense.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Boolean, Code, CodeableConcept, DateTime, Dosage, Extension, Id, Identifier, Meta, Narrative, Reference, SimpleQuantity, String, Uri } from "../datatypes_pb.js";
import { MedicationDispenseStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for MedicationDispense.
 * Dispensing a medication to a named patient.
 * See http://hl7.org/fhir/StructureDefinition/MedicationDispense
 *
 * @generated from message google.fhir.r4.core.MedicationDispense
 */
export class MedicationDispense extends Message<MedicationDispense> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External identifier
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Event that dispense is part of
   *
   * @generated from field: repeated google.fhir.r4.core.Reference part_of = 11;
   */
  partOf: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MedicationDispense.StatusCode status = 12;
   */
  status?: MedicationDispense_StatusCode;

  /**
   * @generated from field: google.fhir.r4.core.MedicationDispense.StatusReasonX status_reason = 13;
   */
  statusReason?: MedicationDispense_StatusReasonX;

  /**
   * Type of medication dispense
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept category = 14;
   */
  category?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.MedicationDispense.MedicationX medication = 15;
   */
  medication?: MedicationDispense_MedicationX;

  /**
   * Who the dispense is for
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 16;
   */
  subject?: Reference;

  /**
   * Encounter / Episode associated with event
   *
   * @generated from field: google.fhir.r4.core.Reference context = 17;
   */
  context?: Reference;

  /**
   * Information that supports the dispensing of the medication
   *
   * @generated from field: repeated google.fhir.r4.core.Reference supporting_information = 18;
   */
  supportingInformation: Reference[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.MedicationDispense.Performer performer = 19;
   */
  performer: MedicationDispense_Performer[] = [];

  /**
   * Where the dispense occurred
   *
   * @generated from field: google.fhir.r4.core.Reference location = 20;
   */
  location?: Reference;

  /**
   * Medication order that authorizes the dispense
   *
   * @generated from field: repeated google.fhir.r4.core.Reference authorizing_prescription = 21;
   */
  authorizingPrescription: Reference[] = [];

  /**
   * Trial fill, partial fill, emergency fill, etc.
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 22;
   */
  type?: CodeableConcept;

  /**
   * Amount dispensed
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity quantity = 23;
   */
  quantity?: SimpleQuantity;

  /**
   * Amount of medication expressed as a timing amount
   *
   * @generated from field: google.fhir.r4.core.SimpleQuantity days_supply = 24;
   */
  daysSupply?: SimpleQuantity;

  /**
   * When product was packaged and reviewed
   *
   * @generated from field: google.fhir.r4.core.DateTime when_prepared = 25;
   */
  whenPrepared?: DateTime;

  /**
   * When product was given out
   *
   * @generated from field: google.fhir.r4.core.DateTime when_handed_over = 26;
   */
  whenHandedOver?: DateTime;

  /**
   * Where the medication was sent
   *
   * @generated from field: google.fhir.r4.core.Reference destination = 27;
   */
  destination?: Reference;

  /**
   * Who collected the medication
   *
   * @generated from field: repeated google.fhir.r4.core.Reference receiver = 28;
   */
  receiver: Reference[] = [];

  /**
   * Information about the dispense
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 29;
   */
  note: Annotation[] = [];

  /**
   * How the medication is to be used by the patient or administered by the
   * caregiver
   *
   * @generated from field: repeated google.fhir.r4.core.Dosage dosage_instruction = 30;
   */
  dosageInstruction: Dosage[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MedicationDispense.Substitution substitution = 31;
   */
  substitution?: MedicationDispense_Substitution;

  /**
   * Clinical issue with action
   *
   * @generated from field: repeated google.fhir.r4.core.Reference detected_issue = 32;
   */
  detectedIssue: Reference[] = [];

  /**
   * A list of relevant lifecycle events
   *
   * @generated from field: repeated google.fhir.r4.core.Reference event_history = 33;
   */
  eventHistory: Reference[] = [];

  constructor(data?: PartialMessage<MedicationDispense>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationDispense";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "part_of", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "status", kind: "message", T: MedicationDispense_StatusCode },
    { no: 13, name: "status_reason", kind: "message", T: MedicationDispense_StatusReasonX },
    { no: 14, name: "category", kind: "message", T: CodeableConcept },
    { no: 15, name: "medication", kind: "message", T: MedicationDispense_MedicationX },
    { no: 16, name: "subject", kind: "message", T: Reference },
    { no: 17, name: "context", kind: "message", T: Reference },
    { no: 18, name: "supporting_information", kind: "message", T: Reference, repeated: true },
    { no: 19, name: "performer", kind: "message", T: MedicationDispense_Performer, repeated: true },
    { no: 20, name: "location", kind: "message", T: Reference },
    { no: 21, name: "authorizing_prescription", kind: "message", T: Reference, repeated: true },
    { no: 22, name: "type", kind: "message", T: CodeableConcept },
    { no: 23, name: "quantity", kind: "message", T: SimpleQuantity },
    { no: 24, name: "days_supply", kind: "message", T: SimpleQuantity },
    { no: 25, name: "when_prepared", kind: "message", T: DateTime },
    { no: 26, name: "when_handed_over", kind: "message", T: DateTime },
    { no: 27, name: "destination", kind: "message", T: Reference },
    { no: 28, name: "receiver", kind: "message", T: Reference, repeated: true },
    { no: 29, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 30, name: "dosage_instruction", kind: "message", T: Dosage, repeated: true },
    { no: 31, name: "substitution", kind: "message", T: MedicationDispense_Substitution },
    { no: 32, name: "detected_issue", kind: "message", T: Reference, repeated: true },
    { no: 33, name: "event_history", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispense {
    return new MedicationDispense().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispense {
    return new MedicationDispense().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispense {
    return new MedicationDispense().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispense | PlainMessage<MedicationDispense> | undefined, b: MedicationDispense | PlainMessage<MedicationDispense> | undefined): boolean {
    return proto3.util.equals(MedicationDispense, a, b);
  }
}

/**
 * preparation | in-progress | cancelled | on-hold | completed |
 * entered-in-error | stopped | declined | unknown
 *
 * @generated from message google.fhir.r4.core.MedicationDispense.StatusCode
 */
export class MedicationDispense_StatusCode extends Message<MedicationDispense_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.MedicationDispenseStatusCode.Value value = 1;
   */
  value = MedicationDispenseStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MedicationDispense_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationDispense.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(MedicationDispenseStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispense_StatusCode {
    return new MedicationDispense_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispense_StatusCode {
    return new MedicationDispense_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispense_StatusCode {
    return new MedicationDispense_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispense_StatusCode | PlainMessage<MedicationDispense_StatusCode> | undefined, b: MedicationDispense_StatusCode | PlainMessage<MedicationDispense_StatusCode> | undefined): boolean {
    return proto3.util.equals(MedicationDispense_StatusCode, a, b);
  }
}

/**
 * Why a dispense was not performed
 *
 * @generated from message google.fhir.r4.core.MedicationDispense.StatusReasonX
 */
export class MedicationDispense_StatusReasonX extends Message<MedicationDispense_StatusReasonX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicationDispense.StatusReasonX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicationDispense_StatusReasonX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationDispense.StatusReasonX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispense_StatusReasonX {
    return new MedicationDispense_StatusReasonX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispense_StatusReasonX {
    return new MedicationDispense_StatusReasonX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispense_StatusReasonX {
    return new MedicationDispense_StatusReasonX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispense_StatusReasonX | PlainMessage<MedicationDispense_StatusReasonX> | undefined, b: MedicationDispense_StatusReasonX | PlainMessage<MedicationDispense_StatusReasonX> | undefined): boolean {
    return proto3.util.equals(MedicationDispense_StatusReasonX, a, b);
  }
}

/**
 * What medication was supplied
 *
 * @generated from message google.fhir.r4.core.MedicationDispense.MedicationX
 */
export class MedicationDispense_MedicationX extends Message<MedicationDispense_MedicationX> {
  /**
   * @generated from oneof google.fhir.r4.core.MedicationDispense.MedicationX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 1;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Reference reference = 2;
     */
    value: Reference;
    case: "reference";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MedicationDispense_MedicationX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationDispense.MedicationX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 2, name: "reference", kind: "message", T: Reference, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispense_MedicationX {
    return new MedicationDispense_MedicationX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispense_MedicationX {
    return new MedicationDispense_MedicationX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispense_MedicationX {
    return new MedicationDispense_MedicationX().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispense_MedicationX | PlainMessage<MedicationDispense_MedicationX> | undefined, b: MedicationDispense_MedicationX | PlainMessage<MedicationDispense_MedicationX> | undefined): boolean {
    return proto3.util.equals(MedicationDispense_MedicationX, a, b);
  }
}

/**
 * Who performed event
 *
 * @generated from message google.fhir.r4.core.MedicationDispense.Performer
 */
export class MedicationDispense_Performer extends Message<MedicationDispense_Performer> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Who performed the dispense and what they did
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept function = 4;
   */
  function?: CodeableConcept;

  /**
   * Individual who was performing
   *
   * @generated from field: google.fhir.r4.core.Reference actor = 5;
   */
  actor?: Reference;

  constructor(data?: PartialMessage<MedicationDispense_Performer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationDispense.Performer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "function", kind: "message", T: CodeableConcept },
    { no: 5, name: "actor", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispense_Performer {
    return new MedicationDispense_Performer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispense_Performer {
    return new MedicationDispense_Performer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispense_Performer {
    return new MedicationDispense_Performer().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispense_Performer | PlainMessage<MedicationDispense_Performer> | undefined, b: MedicationDispense_Performer | PlainMessage<MedicationDispense_Performer> | undefined): boolean {
    return proto3.util.equals(MedicationDispense_Performer, a, b);
  }
}

/**
 * Whether a substitution was performed on the dispense
 *
 * @generated from message google.fhir.r4.core.MedicationDispense.Substitution
 */
export class MedicationDispense_Substitution extends Message<MedicationDispense_Substitution> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Whether a substitution was or was not performed on the dispense
   *
   * @generated from field: google.fhir.r4.core.Boolean was_substituted = 4;
   */
  wasSubstituted?: Boolean;

  /**
   * Code signifying whether a different drug was dispensed from what was
   * prescribed
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 5;
   */
  type?: CodeableConcept;

  /**
   * Why was substitution made
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason = 6;
   */
  reason: CodeableConcept[] = [];

  /**
   * Who is responsible for the substitution
   *
   * @generated from field: repeated google.fhir.r4.core.Reference responsible_party = 7;
   */
  responsibleParty: Reference[] = [];

  constructor(data?: PartialMessage<MedicationDispense_Substitution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MedicationDispense.Substitution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "was_substituted", kind: "message", T: Boolean },
    { no: 5, name: "type", kind: "message", T: CodeableConcept },
    { no: 6, name: "reason", kind: "message", T: CodeableConcept, repeated: true },
    { no: 7, name: "responsible_party", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MedicationDispense_Substitution {
    return new MedicationDispense_Substitution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MedicationDispense_Substitution {
    return new MedicationDispense_Substitution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MedicationDispense_Substitution {
    return new MedicationDispense_Substitution().fromJsonString(jsonString, options);
  }

  static equals(a: MedicationDispense_Substitution | PlainMessage<MedicationDispense_Substitution> | undefined, b: MedicationDispense_Substitution | PlainMessage<MedicationDispense_Substitution> | undefined): boolean {
    return proto3.util.equals(MedicationDispense_Substitution, a, b);
  }
}

