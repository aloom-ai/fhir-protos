//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/message_header.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Canonical, Code, CodeableConcept, Coding, ContactPoint, Extension, Id, Meta, Narrative, Reference, String, Uri, Url } from "../datatypes_pb.js";
import { ResponseTypeCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for MessageHeader.
 * A resource that describes a message that is exchanged between systems.
 * See http://hl7.org/fhir/StructureDefinition/MessageHeader
 *
 * @generated from message google.fhir.r4.core.MessageHeader
 */
export class MessageHeader extends Message<MessageHeader> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.MessageHeader.EventX event = 10;
   */
  event?: MessageHeader_EventX;

  /**
   * @generated from field: repeated google.fhir.r4.core.MessageHeader.MessageDestination destination = 11;
   */
  destination: MessageHeader_MessageDestination[] = [];

  /**
   * Real world sender of the message
   *
   * @generated from field: google.fhir.r4.core.Reference sender = 12;
   */
  sender?: Reference;

  /**
   * The source of the data entry
   *
   * @generated from field: google.fhir.r4.core.Reference enterer = 13;
   */
  enterer?: Reference;

  /**
   * The source of the decision
   *
   * @generated from field: google.fhir.r4.core.Reference author = 14;
   */
  author?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.MessageHeader.MessageSource source = 15;
   */
  source?: MessageHeader_MessageSource;

  /**
   * Final responsibility for event
   *
   * @generated from field: google.fhir.r4.core.Reference responsible = 16;
   */
  responsible?: Reference;

  /**
   * Cause of event
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept reason = 17;
   */
  reason?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.MessageHeader.Response response = 18;
   */
  response?: MessageHeader_Response;

  /**
   * The actual content of the message
   *
   * @generated from field: repeated google.fhir.r4.core.Reference focus = 19;
   */
  focus: Reference[] = [];

  /**
   * Link to the definition for this message
   *
   * @generated from field: google.fhir.r4.core.Canonical definition = 20;
   */
  definition?: Canonical;

  constructor(data?: PartialMessage<MessageHeader>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MessageHeader";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "event", kind: "message", T: MessageHeader_EventX },
    { no: 11, name: "destination", kind: "message", T: MessageHeader_MessageDestination, repeated: true },
    { no: 12, name: "sender", kind: "message", T: Reference },
    { no: 13, name: "enterer", kind: "message", T: Reference },
    { no: 14, name: "author", kind: "message", T: Reference },
    { no: 15, name: "source", kind: "message", T: MessageHeader_MessageSource },
    { no: 16, name: "responsible", kind: "message", T: Reference },
    { no: 17, name: "reason", kind: "message", T: CodeableConcept },
    { no: 18, name: "response", kind: "message", T: MessageHeader_Response },
    { no: 19, name: "focus", kind: "message", T: Reference, repeated: true },
    { no: 20, name: "definition", kind: "message", T: Canonical },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeader {
    return new MessageHeader().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeader {
    return new MessageHeader().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeader {
    return new MessageHeader().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeader | PlainMessage<MessageHeader> | undefined, b: MessageHeader | PlainMessage<MessageHeader> | undefined): boolean {
    return proto3.util.equals(MessageHeader, a, b);
  }
}

/**
 * Code for the event this message represents or link to event definition
 *
 * @generated from message google.fhir.r4.core.MessageHeader.EventX
 */
export class MessageHeader_EventX extends Message<MessageHeader_EventX> {
  /**
   * @generated from oneof google.fhir.r4.core.MessageHeader.EventX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Coding coding = 1;
     */
    value: Coding;
    case: "coding";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Uri uri = 2;
     */
    value: Uri;
    case: "uri";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<MessageHeader_EventX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MessageHeader.EventX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coding", kind: "message", T: Coding, oneof: "choice" },
    { no: 2, name: "uri", kind: "message", T: Uri, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeader_EventX {
    return new MessageHeader_EventX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeader_EventX {
    return new MessageHeader_EventX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeader_EventX {
    return new MessageHeader_EventX().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeader_EventX | PlainMessage<MessageHeader_EventX> | undefined, b: MessageHeader_EventX | PlainMessage<MessageHeader_EventX> | undefined): boolean {
    return proto3.util.equals(MessageHeader_EventX, a, b);
  }
}

/**
 * Message destination application(s)
 *
 * @generated from message google.fhir.r4.core.MessageHeader.MessageDestination
 */
export class MessageHeader_MessageDestination extends Message<MessageHeader_MessageDestination> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Name of system
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * Particular delivery destination within the destination
   *
   * @generated from field: google.fhir.r4.core.Reference target = 5;
   */
  target?: Reference;

  /**
   * Actual destination address or id
   *
   * @generated from field: google.fhir.r4.core.Url endpoint = 6;
   */
  endpoint?: Url;

  /**
   * Intended "real-world" recipient for the data
   *
   * @generated from field: google.fhir.r4.core.Reference receiver = 7;
   */
  receiver?: Reference;

  constructor(data?: PartialMessage<MessageHeader_MessageDestination>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MessageHeader.MessageDestination";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "target", kind: "message", T: Reference },
    { no: 6, name: "endpoint", kind: "message", T: Url },
    { no: 7, name: "receiver", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeader_MessageDestination {
    return new MessageHeader_MessageDestination().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeader_MessageDestination {
    return new MessageHeader_MessageDestination().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeader_MessageDestination {
    return new MessageHeader_MessageDestination().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeader_MessageDestination | PlainMessage<MessageHeader_MessageDestination> | undefined, b: MessageHeader_MessageDestination | PlainMessage<MessageHeader_MessageDestination> | undefined): boolean {
    return proto3.util.equals(MessageHeader_MessageDestination, a, b);
  }
}

/**
 * Message source application
 *
 * @generated from message google.fhir.r4.core.MessageHeader.MessageSource
 */
export class MessageHeader_MessageSource extends Message<MessageHeader_MessageSource> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Name of system
   *
   * @generated from field: google.fhir.r4.core.String name = 4;
   */
  name?: String;

  /**
   * Name of software running the system
   *
   * @generated from field: google.fhir.r4.core.String software = 5;
   */
  software?: String;

  /**
   * Version of software running
   *
   * @generated from field: google.fhir.r4.core.String version = 6;
   */
  version?: String;

  /**
   * Human contact for problems
   *
   * @generated from field: google.fhir.r4.core.ContactPoint contact = 7;
   */
  contact?: ContactPoint;

  /**
   * Actual message source address or id
   *
   * @generated from field: google.fhir.r4.core.Url endpoint = 8;
   */
  endpoint?: Url;

  constructor(data?: PartialMessage<MessageHeader_MessageSource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MessageHeader.MessageSource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "name", kind: "message", T: String },
    { no: 5, name: "software", kind: "message", T: String },
    { no: 6, name: "version", kind: "message", T: String },
    { no: 7, name: "contact", kind: "message", T: ContactPoint },
    { no: 8, name: "endpoint", kind: "message", T: Url },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeader_MessageSource {
    return new MessageHeader_MessageSource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeader_MessageSource {
    return new MessageHeader_MessageSource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeader_MessageSource {
    return new MessageHeader_MessageSource().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeader_MessageSource | PlainMessage<MessageHeader_MessageSource> | undefined, b: MessageHeader_MessageSource | PlainMessage<MessageHeader_MessageSource> | undefined): boolean {
    return proto3.util.equals(MessageHeader_MessageSource, a, b);
  }
}

/**
 * If this is a reply to prior message
 *
 * @generated from message google.fhir.r4.core.MessageHeader.Response
 */
export class MessageHeader_Response extends Message<MessageHeader_Response> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Id of original message
   *
   * @generated from field: google.fhir.r4.core.Id identifier = 4;
   */
  identifier?: Id;

  /**
   * @generated from field: google.fhir.r4.core.MessageHeader.Response.CodeType code = 5;
   */
  code?: MessageHeader_Response_CodeType;

  /**
   * Specific list of hints/warnings/errors
   *
   * @generated from field: google.fhir.r4.core.Reference details = 6;
   */
  details?: Reference;

  constructor(data?: PartialMessage<MessageHeader_Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MessageHeader.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "identifier", kind: "message", T: Id },
    { no: 5, name: "code", kind: "message", T: MessageHeader_Response_CodeType },
    { no: 6, name: "details", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeader_Response {
    return new MessageHeader_Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeader_Response {
    return new MessageHeader_Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeader_Response {
    return new MessageHeader_Response().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeader_Response | PlainMessage<MessageHeader_Response> | undefined, b: MessageHeader_Response | PlainMessage<MessageHeader_Response> | undefined): boolean {
    return proto3.util.equals(MessageHeader_Response, a, b);
  }
}

/**
 * ok | transient-error | fatal-error
 *
 * @generated from message google.fhir.r4.core.MessageHeader.Response.CodeType
 */
export class MessageHeader_Response_CodeType extends Message<MessageHeader_Response_CodeType> {
  /**
   * @generated from field: google.fhir.r4.core.ResponseTypeCode.Value value = 1;
   */
  value = ResponseTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<MessageHeader_Response_CodeType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.MessageHeader.Response.CodeType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ResponseTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MessageHeader_Response_CodeType {
    return new MessageHeader_Response_CodeType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MessageHeader_Response_CodeType {
    return new MessageHeader_Response_CodeType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MessageHeader_Response_CodeType {
    return new MessageHeader_Response_CodeType().fromJsonString(jsonString, options);
  }

  static equals(a: MessageHeader_Response_CodeType | PlainMessage<MessageHeader_Response_CodeType> | undefined, b: MessageHeader_Response_CodeType | PlainMessage<MessageHeader_Response_CodeType> | undefined): boolean {
    return proto3.util.equals(MessageHeader_Response_CodeType, a, b);
  }
}

