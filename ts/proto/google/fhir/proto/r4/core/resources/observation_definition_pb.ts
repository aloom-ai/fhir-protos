//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/observation_definition.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Boolean, Code, CodeableConcept, Decimal, Extension, Id, Identifier, Integer, Meta, Narrative, Range, Reference, String, Uri } from "../datatypes_pb.js";
import { AdministrativeGenderCode_Value, ObservationDataTypeCode_Value, ObservationRangeCategoryCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for ObservationDefinition.
 * Definition of an observation.
 * See http://hl7.org/fhir/StructureDefinition/ObservationDefinition
 *
 * @generated from message google.fhir.r4.core.ObservationDefinition
 */
export class ObservationDefinition extends Message<ObservationDefinition> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Category of observation
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 10;
   */
  category: CodeableConcept[] = [];

  /**
   * Type of observation (code / type)
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept code = 11;
   */
  code?: CodeableConcept;

  /**
   * Business identifier for this ObservationDefinition instance
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 12;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: repeated google.fhir.r4.core.ObservationDefinition.PermittedDataTypeCode permitted_data_type = 13;
   */
  permittedDataType: ObservationDefinition_PermittedDataTypeCode[] = [];

  /**
   * Multiple results allowed
   *
   * @generated from field: google.fhir.r4.core.Boolean multiple_results_allowed = 14;
   */
  multipleResultsAllowed?: Boolean;

  /**
   * Method used to produce the observation
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept method = 15;
   */
  method?: CodeableConcept;

  /**
   * Preferred report name
   *
   * @generated from field: google.fhir.r4.core.String preferred_report_name = 16;
   */
  preferredReportName?: String;

  /**
   * @generated from field: google.fhir.r4.core.ObservationDefinition.QuantitativeDetails quantitative_details = 17;
   */
  quantitativeDetails?: ObservationDefinition_QuantitativeDetails;

  /**
   * @generated from field: repeated google.fhir.r4.core.ObservationDefinition.QualifiedInterval qualified_interval = 18;
   */
  qualifiedInterval: ObservationDefinition_QualifiedInterval[] = [];

  /**
   * Value set of valid coded values for the observations conforming to this
   * ObservationDefinition
   *
   * @generated from field: google.fhir.r4.core.Reference valid_coded_value_set = 19;
   */
  validCodedValueSet?: Reference;

  /**
   * Value set of normal coded values for the observations conforming to this
   * ObservationDefinition
   *
   * @generated from field: google.fhir.r4.core.Reference normal_coded_value_set = 20;
   */
  normalCodedValueSet?: Reference;

  /**
   * Value set of abnormal coded values for the observations conforming to this
   * ObservationDefinition
   *
   * @generated from field: google.fhir.r4.core.Reference abnormal_coded_value_set = 21;
   */
  abnormalCodedValueSet?: Reference;

  /**
   * Value set of critical coded values for the observations conforming to this
   * ObservationDefinition
   *
   * @generated from field: google.fhir.r4.core.Reference critical_coded_value_set = 22;
   */
  criticalCodedValueSet?: Reference;

  constructor(data?: PartialMessage<ObservationDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ObservationDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 11, name: "code", kind: "message", T: CodeableConcept },
    { no: 12, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 13, name: "permitted_data_type", kind: "message", T: ObservationDefinition_PermittedDataTypeCode, repeated: true },
    { no: 14, name: "multiple_results_allowed", kind: "message", T: Boolean },
    { no: 15, name: "method", kind: "message", T: CodeableConcept },
    { no: 16, name: "preferred_report_name", kind: "message", T: String },
    { no: 17, name: "quantitative_details", kind: "message", T: ObservationDefinition_QuantitativeDetails },
    { no: 18, name: "qualified_interval", kind: "message", T: ObservationDefinition_QualifiedInterval, repeated: true },
    { no: 19, name: "valid_coded_value_set", kind: "message", T: Reference },
    { no: 20, name: "normal_coded_value_set", kind: "message", T: Reference },
    { no: 21, name: "abnormal_coded_value_set", kind: "message", T: Reference },
    { no: 22, name: "critical_coded_value_set", kind: "message", T: Reference },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDefinition {
    return new ObservationDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDefinition {
    return new ObservationDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDefinition {
    return new ObservationDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDefinition | PlainMessage<ObservationDefinition> | undefined, b: ObservationDefinition | PlainMessage<ObservationDefinition> | undefined): boolean {
    return proto3.util.equals(ObservationDefinition, a, b);
  }
}

/**
 * Quantity | CodeableConcept | string | boolean | integer | Range | Ratio |
 * SampledData | time | dateTime | Period
 *
 * @generated from message google.fhir.r4.core.ObservationDefinition.PermittedDataTypeCode
 */
export class ObservationDefinition_PermittedDataTypeCode extends Message<ObservationDefinition_PermittedDataTypeCode> {
  /**
   * @generated from field: google.fhir.r4.core.ObservationDataTypeCode.Value value = 1;
   */
  value = ObservationDataTypeCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ObservationDefinition_PermittedDataTypeCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ObservationDefinition.PermittedDataTypeCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ObservationDataTypeCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDefinition_PermittedDataTypeCode {
    return new ObservationDefinition_PermittedDataTypeCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDefinition_PermittedDataTypeCode {
    return new ObservationDefinition_PermittedDataTypeCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDefinition_PermittedDataTypeCode {
    return new ObservationDefinition_PermittedDataTypeCode().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDefinition_PermittedDataTypeCode | PlainMessage<ObservationDefinition_PermittedDataTypeCode> | undefined, b: ObservationDefinition_PermittedDataTypeCode | PlainMessage<ObservationDefinition_PermittedDataTypeCode> | undefined): boolean {
    return proto3.util.equals(ObservationDefinition_PermittedDataTypeCode, a, b);
  }
}

/**
 * Characteristics of quantitative results
 *
 * @generated from message google.fhir.r4.core.ObservationDefinition.QuantitativeDetails
 */
export class ObservationDefinition_QuantitativeDetails extends Message<ObservationDefinition_QuantitativeDetails> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * Customary unit for quantitative results
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept customary_unit = 4;
   */
  customaryUnit?: CodeableConcept;

  /**
   * SI unit for quantitative results
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept unit = 5;
   */
  unit?: CodeableConcept;

  /**
   * SI to Customary unit conversion factor
   *
   * @generated from field: google.fhir.r4.core.Decimal conversion_factor = 6;
   */
  conversionFactor?: Decimal;

  /**
   * Decimal precision of observation quantitative results
   *
   * @generated from field: google.fhir.r4.core.Integer decimal_precision = 7;
   */
  decimalPrecision?: Integer;

  constructor(data?: PartialMessage<ObservationDefinition_QuantitativeDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ObservationDefinition.QuantitativeDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "customary_unit", kind: "message", T: CodeableConcept },
    { no: 5, name: "unit", kind: "message", T: CodeableConcept },
    { no: 6, name: "conversion_factor", kind: "message", T: Decimal },
    { no: 7, name: "decimal_precision", kind: "message", T: Integer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDefinition_QuantitativeDetails {
    return new ObservationDefinition_QuantitativeDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDefinition_QuantitativeDetails {
    return new ObservationDefinition_QuantitativeDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDefinition_QuantitativeDetails {
    return new ObservationDefinition_QuantitativeDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDefinition_QuantitativeDetails | PlainMessage<ObservationDefinition_QuantitativeDetails> | undefined, b: ObservationDefinition_QuantitativeDetails | PlainMessage<ObservationDefinition_QuantitativeDetails> | undefined): boolean {
    return proto3.util.equals(ObservationDefinition_QuantitativeDetails, a, b);
  }
}

/**
 * Qualified range for continuous and ordinal observation results
 *
 * @generated from message google.fhir.r4.core.ObservationDefinition.QualifiedInterval
 */
export class ObservationDefinition_QualifiedInterval extends Message<ObservationDefinition_QualifiedInterval> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ObservationDefinition.QualifiedInterval.CategoryCode category = 4;
   */
  category?: ObservationDefinition_QualifiedInterval_CategoryCode;

  /**
   * The interval itself, for continuous or ordinal observations
   *
   * @generated from field: google.fhir.r4.core.Range range = 5;
   */
  range?: Range;

  /**
   * Range context qualifier
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept context = 6;
   */
  context?: CodeableConcept;

  /**
   * Targetted population of the range
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept applies_to = 7;
   */
  appliesTo: CodeableConcept[] = [];

  /**
   * @generated from field: google.fhir.r4.core.ObservationDefinition.QualifiedInterval.GenderCode gender = 8;
   */
  gender?: ObservationDefinition_QualifiedInterval_GenderCode;

  /**
   * Applicable age range, if relevant
   *
   * @generated from field: google.fhir.r4.core.Range age = 9;
   */
  age?: Range;

  /**
   * Applicable gestational age range, if relevant
   *
   * @generated from field: google.fhir.r4.core.Range gestational_age = 10;
   */
  gestationalAge?: Range;

  /**
   * Condition associated with the reference range
   *
   * @generated from field: google.fhir.r4.core.String condition = 11;
   */
  condition?: String;

  constructor(data?: PartialMessage<ObservationDefinition_QualifiedInterval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ObservationDefinition.QualifiedInterval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "category", kind: "message", T: ObservationDefinition_QualifiedInterval_CategoryCode },
    { no: 5, name: "range", kind: "message", T: Range },
    { no: 6, name: "context", kind: "message", T: CodeableConcept },
    { no: 7, name: "applies_to", kind: "message", T: CodeableConcept, repeated: true },
    { no: 8, name: "gender", kind: "message", T: ObservationDefinition_QualifiedInterval_GenderCode },
    { no: 9, name: "age", kind: "message", T: Range },
    { no: 10, name: "gestational_age", kind: "message", T: Range },
    { no: 11, name: "condition", kind: "message", T: String },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDefinition_QualifiedInterval {
    return new ObservationDefinition_QualifiedInterval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDefinition_QualifiedInterval {
    return new ObservationDefinition_QualifiedInterval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDefinition_QualifiedInterval {
    return new ObservationDefinition_QualifiedInterval().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDefinition_QualifiedInterval | PlainMessage<ObservationDefinition_QualifiedInterval> | undefined, b: ObservationDefinition_QualifiedInterval | PlainMessage<ObservationDefinition_QualifiedInterval> | undefined): boolean {
    return proto3.util.equals(ObservationDefinition_QualifiedInterval, a, b);
  }
}

/**
 * reference | critical | absolute
 *
 * @generated from message google.fhir.r4.core.ObservationDefinition.QualifiedInterval.CategoryCode
 */
export class ObservationDefinition_QualifiedInterval_CategoryCode extends Message<ObservationDefinition_QualifiedInterval_CategoryCode> {
  /**
   * @generated from field: google.fhir.r4.core.ObservationRangeCategoryCode.Value value = 1;
   */
  value = ObservationRangeCategoryCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ObservationDefinition_QualifiedInterval_CategoryCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ObservationDefinition.QualifiedInterval.CategoryCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(ObservationRangeCategoryCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDefinition_QualifiedInterval_CategoryCode {
    return new ObservationDefinition_QualifiedInterval_CategoryCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDefinition_QualifiedInterval_CategoryCode {
    return new ObservationDefinition_QualifiedInterval_CategoryCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDefinition_QualifiedInterval_CategoryCode {
    return new ObservationDefinition_QualifiedInterval_CategoryCode().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDefinition_QualifiedInterval_CategoryCode | PlainMessage<ObservationDefinition_QualifiedInterval_CategoryCode> | undefined, b: ObservationDefinition_QualifiedInterval_CategoryCode | PlainMessage<ObservationDefinition_QualifiedInterval_CategoryCode> | undefined): boolean {
    return proto3.util.equals(ObservationDefinition_QualifiedInterval_CategoryCode, a, b);
  }
}

/**
 * male | female | other | unknown
 *
 * @generated from message google.fhir.r4.core.ObservationDefinition.QualifiedInterval.GenderCode
 */
export class ObservationDefinition_QualifiedInterval_GenderCode extends Message<ObservationDefinition_QualifiedInterval_GenderCode> {
  /**
   * @generated from field: google.fhir.r4.core.AdministrativeGenderCode.Value value = 1;
   */
  value = AdministrativeGenderCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<ObservationDefinition_QualifiedInterval_GenderCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.ObservationDefinition.QualifiedInterval.GenderCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(AdministrativeGenderCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObservationDefinition_QualifiedInterval_GenderCode {
    return new ObservationDefinition_QualifiedInterval_GenderCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObservationDefinition_QualifiedInterval_GenderCode {
    return new ObservationDefinition_QualifiedInterval_GenderCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObservationDefinition_QualifiedInterval_GenderCode {
    return new ObservationDefinition_QualifiedInterval_GenderCode().fromJsonString(jsonString, options);
  }

  static equals(a: ObservationDefinition_QualifiedInterval_GenderCode | PlainMessage<ObservationDefinition_QualifiedInterval_GenderCode> | undefined, b: ObservationDefinition_QualifiedInterval_GenderCode | PlainMessage<ObservationDefinition_QualifiedInterval_GenderCode> | undefined): boolean {
    return proto3.util.equals(ObservationDefinition_QualifiedInterval_GenderCode, a, b);
  }
}

