//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/goal.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Boolean, Code, CodeableConcept, Date, Duration, Extension, Id, Identifier, Integer, Meta, Narrative, Quantity, Range, Ratio, Reference, String, Uri } from "../datatypes_pb.js";
import { GoalLifecycleStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Goal.
 * Describes the intended objective(s) for a patient, group or organization.
 * See http://hl7.org/fhir/StructureDefinition/Goal
 *
 * @generated from message google.fhir.r4.core.Goal
 */
export class Goal extends Message<Goal> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * External Ids for this goal
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Goal.LifecycleStatusCode lifecycle_status = 11;
   */
  lifecycleStatus?: Goal_LifecycleStatusCode;

  /**
   * in-progress | improving | worsening | no-change | achieved | sustaining |
   * not-achieved | no-progress | not-attainable
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept achievement_status = 12;
   */
  achievementStatus?: CodeableConcept;

  /**
   * E.g. Treatment, dietary, behavioral, etc.
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept category = 13;
   */
  category: CodeableConcept[] = [];

  /**
   * high-priority | medium-priority | low-priority
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept priority = 14;
   */
  priority?: CodeableConcept;

  /**
   * Code or text describing goal
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept description = 15;
   */
  description?: CodeableConcept;

  /**
   * Who this goal is intended for
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 16;
   */
  subject?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Goal.StartX start = 17;
   */
  start?: Goal_StartX;

  /**
   * @generated from field: repeated google.fhir.r4.core.Goal.Target target = 18;
   */
  target: Goal_Target[] = [];

  /**
   * When goal status took effect
   *
   * @generated from field: google.fhir.r4.core.Date status_date = 19;
   */
  statusDate?: Date;

  /**
   * Reason for current status
   *
   * @generated from field: google.fhir.r4.core.String status_reason = 20;
   */
  statusReason?: String;

  /**
   * Who's responsible for creating Goal?
   *
   * @generated from field: google.fhir.r4.core.Reference expressed_by = 21;
   */
  expressedBy?: Reference;

  /**
   * Issues addressed by this goal
   *
   * @generated from field: repeated google.fhir.r4.core.Reference addresses = 22;
   */
  addresses: Reference[] = [];

  /**
   * Comments about the goal
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 23;
   */
  note: Annotation[] = [];

  /**
   * What result was achieved regarding the goal?
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept outcome_code = 24;
   */
  outcomeCode: CodeableConcept[] = [];

  /**
   * Observation that resulted from goal
   *
   * @generated from field: repeated google.fhir.r4.core.Reference outcome_reference = 25;
   */
  outcomeReference: Reference[] = [];

  constructor(data?: PartialMessage<Goal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Goal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "lifecycle_status", kind: "message", T: Goal_LifecycleStatusCode },
    { no: 12, name: "achievement_status", kind: "message", T: CodeableConcept },
    { no: 13, name: "category", kind: "message", T: CodeableConcept, repeated: true },
    { no: 14, name: "priority", kind: "message", T: CodeableConcept },
    { no: 15, name: "description", kind: "message", T: CodeableConcept },
    { no: 16, name: "subject", kind: "message", T: Reference },
    { no: 17, name: "start", kind: "message", T: Goal_StartX },
    { no: 18, name: "target", kind: "message", T: Goal_Target, repeated: true },
    { no: 19, name: "status_date", kind: "message", T: Date },
    { no: 20, name: "status_reason", kind: "message", T: String },
    { no: 21, name: "expressed_by", kind: "message", T: Reference },
    { no: 22, name: "addresses", kind: "message", T: Reference, repeated: true },
    { no: 23, name: "note", kind: "message", T: Annotation, repeated: true },
    { no: 24, name: "outcome_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 25, name: "outcome_reference", kind: "message", T: Reference, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal {
    return new Goal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal {
    return new Goal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal {
    return new Goal().fromJsonString(jsonString, options);
  }

  static equals(a: Goal | PlainMessage<Goal> | undefined, b: Goal | PlainMessage<Goal> | undefined): boolean {
    return proto3.util.equals(Goal, a, b);
  }
}

/**
 * proposed | planned | accepted | active | on-hold | completed | cancelled |
 * entered-in-error | rejected
 *
 * @generated from message google.fhir.r4.core.Goal.LifecycleStatusCode
 */
export class Goal_LifecycleStatusCode extends Message<Goal_LifecycleStatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.GoalLifecycleStatusCode.Value value = 1;
   */
  value = GoalLifecycleStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Goal_LifecycleStatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Goal.LifecycleStatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GoalLifecycleStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal_LifecycleStatusCode {
    return new Goal_LifecycleStatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal_LifecycleStatusCode {
    return new Goal_LifecycleStatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal_LifecycleStatusCode {
    return new Goal_LifecycleStatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Goal_LifecycleStatusCode | PlainMessage<Goal_LifecycleStatusCode> | undefined, b: Goal_LifecycleStatusCode | PlainMessage<Goal_LifecycleStatusCode> | undefined): boolean {
    return proto3.util.equals(Goal_LifecycleStatusCode, a, b);
  }
}

/**
 * When goal pursuit begins
 *
 * @generated from message google.fhir.r4.core.Goal.StartX
 */
export class Goal_StartX extends Message<Goal_StartX> {
  /**
   * @generated from oneof google.fhir.r4.core.Goal.StartX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 2;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Goal_StartX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Goal.StartX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 2, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal_StartX {
    return new Goal_StartX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal_StartX {
    return new Goal_StartX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal_StartX {
    return new Goal_StartX().fromJsonString(jsonString, options);
  }

  static equals(a: Goal_StartX | PlainMessage<Goal_StartX> | undefined, b: Goal_StartX | PlainMessage<Goal_StartX> | undefined): boolean {
    return proto3.util.equals(Goal_StartX, a, b);
  }
}

/**
 * Target outcome for the goal
 *
 * @generated from message google.fhir.r4.core.Goal.Target
 */
export class Goal_Target extends Message<Goal_Target> {
  /**
   * Unique id for inter-element referencing
   *
   * @generated from field: google.fhir.r4.core.String id = 1;
   */
  id?: String;

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 2;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored even if unrecognized
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 3;
   */
  modifierExtension: Extension[] = [];

  /**
   * The parameter whose value is being tracked
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept measure = 4;
   */
  measure?: CodeableConcept;

  /**
   * @generated from field: google.fhir.r4.core.Goal.Target.DetailX detail = 5;
   */
  detail?: Goal_Target_DetailX;

  /**
   * @generated from field: google.fhir.r4.core.Goal.Target.DueX due = 6;
   */
  due?: Goal_Target_DueX;

  constructor(data?: PartialMessage<Goal_Target>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Goal.Target";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: String },
    { no: 2, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 3, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 4, name: "measure", kind: "message", T: CodeableConcept },
    { no: 5, name: "detail", kind: "message", T: Goal_Target_DetailX },
    { no: 6, name: "due", kind: "message", T: Goal_Target_DueX },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal_Target {
    return new Goal_Target().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal_Target {
    return new Goal_Target().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal_Target {
    return new Goal_Target().fromJsonString(jsonString, options);
  }

  static equals(a: Goal_Target | PlainMessage<Goal_Target> | undefined, b: Goal_Target | PlainMessage<Goal_Target> | undefined): boolean {
    return proto3.util.equals(Goal_Target, a, b);
  }
}

/**
 * The target value to be achieved
 *
 * @generated from message google.fhir.r4.core.Goal.Target.DetailX
 */
export class Goal_Target_DetailX extends Message<Goal_Target_DetailX> {
  /**
   * @generated from oneof google.fhir.r4.core.Goal.Target.DetailX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Quantity quantity = 1;
     */
    value: Quantity;
    case: "quantity";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Range range = 2;
     */
    value: Range;
    case: "range";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.CodeableConcept codeable_concept = 3;
     */
    value: CodeableConcept;
    case: "codeableConcept";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.String string_value = 4 [json_name = "string"];
     */
    value: String;
    case: "stringValue";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Boolean boolean = 5;
     */
    value: Boolean;
    case: "boolean";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Integer integer = 6;
     */
    value: Integer;
    case: "integer";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Ratio ratio = 7;
     */
    value: Ratio;
    case: "ratio";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Goal_Target_DetailX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Goal.Target.DetailX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "quantity", kind: "message", T: Quantity, oneof: "choice" },
    { no: 2, name: "range", kind: "message", T: Range, oneof: "choice" },
    { no: 3, name: "codeable_concept", kind: "message", T: CodeableConcept, oneof: "choice" },
    { no: 4, name: "string_value", jsonName: "string", kind: "message", T: String, oneof: "choice" },
    { no: 5, name: "boolean", kind: "message", T: Boolean, oneof: "choice" },
    { no: 6, name: "integer", kind: "message", T: Integer, oneof: "choice" },
    { no: 7, name: "ratio", kind: "message", T: Ratio, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal_Target_DetailX {
    return new Goal_Target_DetailX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal_Target_DetailX {
    return new Goal_Target_DetailX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal_Target_DetailX {
    return new Goal_Target_DetailX().fromJsonString(jsonString, options);
  }

  static equals(a: Goal_Target_DetailX | PlainMessage<Goal_Target_DetailX> | undefined, b: Goal_Target_DetailX | PlainMessage<Goal_Target_DetailX> | undefined): boolean {
    return proto3.util.equals(Goal_Target_DetailX, a, b);
  }
}

/**
 * Reach goal on or before
 *
 * @generated from message google.fhir.r4.core.Goal.Target.DueX
 */
export class Goal_Target_DueX extends Message<Goal_Target_DueX> {
  /**
   * @generated from oneof google.fhir.r4.core.Goal.Target.DueX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.Date date = 1;
     */
    value: Date;
    case: "date";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Duration duration = 2;
     */
    value: Duration;
    case: "duration";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Goal_Target_DueX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Goal.Target.DueX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date", kind: "message", T: Date, oneof: "choice" },
    { no: 2, name: "duration", kind: "message", T: Duration, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Goal_Target_DueX {
    return new Goal_Target_DueX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Goal_Target_DueX {
    return new Goal_Target_DueX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Goal_Target_DueX {
    return new Goal_Target_DueX().fromJsonString(jsonString, options);
  }

  static equals(a: Goal_Target_DueX | PlainMessage<Goal_Target_DueX> | undefined, b: Goal_Target_DueX | PlainMessage<Goal_Target_DueX> | undefined): boolean {
    return proto3.util.equals(Goal_Target_DueX, a, b);
  }
}

