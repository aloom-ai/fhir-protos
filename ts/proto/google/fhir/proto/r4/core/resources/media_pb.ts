//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// @generated by protoc-gen-es v1.4.1 with parameter "target=ts"
// @generated from file proto/google/fhir/proto/r4/core/resources/media.proto (package google.fhir.r4.core, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";
import { Annotation, Attachment, Code, CodeableConcept, DateTime, Decimal, Extension, Id, Identifier, Instant, Meta, Narrative, Period, PositiveInt, Reference, String, Uri } from "../datatypes_pb.js";
import { EventStatusCode_Value } from "../codes_pb.js";

/**
 * Auto-generated from StructureDefinition for Media.
 * A photo, video, or audio recording acquired or used in healthcare. The actual
 * content may be inline or provided by direct reference. See
 * http://hl7.org/fhir/StructureDefinition/Media
 *
 * @generated from message google.fhir.r4.core.Media
 */
export class Media extends Message<Media> {
  /**
   * Logical id of this artifact
   *
   * @generated from field: google.fhir.r4.core.Id id = 1;
   */
  id?: Id;

  /**
   * Metadata about the resource
   *
   * @generated from field: google.fhir.r4.core.Meta meta = 2;
   */
  meta?: Meta;

  /**
   * A set of rules under which this content was created
   *
   * @generated from field: google.fhir.r4.core.Uri implicit_rules = 3;
   */
  implicitRules?: Uri;

  /**
   * Language of the resource content
   *
   * @generated from field: google.fhir.r4.core.Code language = 4;
   */
  language?: Code;

  /**
   * Text summary of the resource, for human interpretation
   *
   * @generated from field: google.fhir.r4.core.Narrative text = 5;
   */
  text?: Narrative;

  /**
   * Contained, inline Resources
   *
   * @generated from field: repeated google.protobuf.Any contained = 6;
   */
  contained: Any[] = [];

  /**
   * Additional content defined by implementations
   *
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 8;
   */
  extension: Extension[] = [];

  /**
   * Extensions that cannot be ignored
   *
   * @generated from field: repeated google.fhir.r4.core.Extension modifier_extension = 9;
   */
  modifierExtension: Extension[] = [];

  /**
   * Identifier(s) for the image
   *
   * @generated from field: repeated google.fhir.r4.core.Identifier identifier = 10;
   */
  identifier: Identifier[] = [];

  /**
   * Procedure that caused this media to be created
   *
   * @generated from field: repeated google.fhir.r4.core.Reference based_on = 11;
   */
  basedOn: Reference[] = [];

  /**
   * Part of referenced event
   *
   * @generated from field: repeated google.fhir.r4.core.Reference part_of = 12;
   */
  partOf: Reference[] = [];

  /**
   * @generated from field: google.fhir.r4.core.Media.StatusCode status = 13;
   */
  status?: Media_StatusCode;

  /**
   * Classification of media as image, video, or audio
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept type = 14;
   */
  type?: CodeableConcept;

  /**
   * The type of acquisition equipment/process
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept modality = 15;
   */
  modality?: CodeableConcept;

  /**
   * Imaging view, e.g. Lateral or Antero-posterior
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept view = 16;
   */
  view?: CodeableConcept;

  /**
   * Who/What this Media is a record of
   *
   * @generated from field: google.fhir.r4.core.Reference subject = 17;
   */
  subject?: Reference;

  /**
   * Encounter associated with media
   *
   * @generated from field: google.fhir.r4.core.Reference encounter = 18;
   */
  encounter?: Reference;

  /**
   * @generated from field: google.fhir.r4.core.Media.CreatedX created = 19;
   */
  created?: Media_CreatedX;

  /**
   * Date/Time this version was made available
   *
   * @generated from field: google.fhir.r4.core.Instant issued = 20;
   */
  issued?: Instant;

  /**
   * The person who generated the image
   *
   * @generated from field: google.fhir.r4.core.Reference operator = 21;
   */
  operator?: Reference;

  /**
   * Why was event performed?
   *
   * @generated from field: repeated google.fhir.r4.core.CodeableConcept reason_code = 22;
   */
  reasonCode: CodeableConcept[] = [];

  /**
   * Observed body part
   *
   * @generated from field: google.fhir.r4.core.CodeableConcept body_site = 23;
   */
  bodySite?: CodeableConcept;

  /**
   * Name of the device/manufacturer
   *
   * @generated from field: google.fhir.r4.core.String device_name = 24;
   */
  deviceName?: String;

  /**
   * Observing Device
   *
   * @generated from field: google.fhir.r4.core.Reference device = 25;
   */
  device?: Reference;

  /**
   * Height of the image in pixels (photo/video)
   *
   * @generated from field: google.fhir.r4.core.PositiveInt height = 26;
   */
  height?: PositiveInt;

  /**
   * Width of the image in pixels (photo/video)
   *
   * @generated from field: google.fhir.r4.core.PositiveInt width = 27;
   */
  width?: PositiveInt;

  /**
   * Number of frames if > 1 (photo)
   *
   * @generated from field: google.fhir.r4.core.PositiveInt frames = 28;
   */
  frames?: PositiveInt;

  /**
   * Length in seconds (audio / video)
   *
   * @generated from field: google.fhir.r4.core.Decimal duration = 29;
   */
  duration?: Decimal;

  /**
   * Actual Media - reference or data
   *
   * @generated from field: google.fhir.r4.core.Attachment content = 30;
   */
  content?: Attachment;

  /**
   * Comments made about the media
   *
   * @generated from field: repeated google.fhir.r4.core.Annotation note = 31;
   */
  note: Annotation[] = [];

  constructor(data?: PartialMessage<Media>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Media";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "message", T: Id },
    { no: 2, name: "meta", kind: "message", T: Meta },
    { no: 3, name: "implicit_rules", kind: "message", T: Uri },
    { no: 4, name: "language", kind: "message", T: Code },
    { no: 5, name: "text", kind: "message", T: Narrative },
    { no: 6, name: "contained", kind: "message", T: Any, repeated: true },
    { no: 8, name: "extension", kind: "message", T: Extension, repeated: true },
    { no: 9, name: "modifier_extension", kind: "message", T: Extension, repeated: true },
    { no: 10, name: "identifier", kind: "message", T: Identifier, repeated: true },
    { no: 11, name: "based_on", kind: "message", T: Reference, repeated: true },
    { no: 12, name: "part_of", kind: "message", T: Reference, repeated: true },
    { no: 13, name: "status", kind: "message", T: Media_StatusCode },
    { no: 14, name: "type", kind: "message", T: CodeableConcept },
    { no: 15, name: "modality", kind: "message", T: CodeableConcept },
    { no: 16, name: "view", kind: "message", T: CodeableConcept },
    { no: 17, name: "subject", kind: "message", T: Reference },
    { no: 18, name: "encounter", kind: "message", T: Reference },
    { no: 19, name: "created", kind: "message", T: Media_CreatedX },
    { no: 20, name: "issued", kind: "message", T: Instant },
    { no: 21, name: "operator", kind: "message", T: Reference },
    { no: 22, name: "reason_code", kind: "message", T: CodeableConcept, repeated: true },
    { no: 23, name: "body_site", kind: "message", T: CodeableConcept },
    { no: 24, name: "device_name", kind: "message", T: String },
    { no: 25, name: "device", kind: "message", T: Reference },
    { no: 26, name: "height", kind: "message", T: PositiveInt },
    { no: 27, name: "width", kind: "message", T: PositiveInt },
    { no: 28, name: "frames", kind: "message", T: PositiveInt },
    { no: 29, name: "duration", kind: "message", T: Decimal },
    { no: 30, name: "content", kind: "message", T: Attachment },
    { no: 31, name: "note", kind: "message", T: Annotation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media {
    return new Media().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media {
    return new Media().fromJsonString(jsonString, options);
  }

  static equals(a: Media | PlainMessage<Media> | undefined, b: Media | PlainMessage<Media> | undefined): boolean {
    return proto3.util.equals(Media, a, b);
  }
}

/**
 * preparation | in-progress | not-done | on-hold | stopped | completed |
 * entered-in-error | unknown
 *
 * @generated from message google.fhir.r4.core.Media.StatusCode
 */
export class Media_StatusCode extends Message<Media_StatusCode> {
  /**
   * @generated from field: google.fhir.r4.core.EventStatusCode.Value value = 1;
   */
  value = EventStatusCode_Value.INVALID_UNINITIALIZED;

  /**
   * @generated from field: google.fhir.r4.core.String id = 2;
   */
  id?: String;

  /**
   * @generated from field: repeated google.fhir.r4.core.Extension extension = 3;
   */
  extension: Extension[] = [];

  constructor(data?: PartialMessage<Media_StatusCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Media.StatusCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(EventStatusCode_Value) },
    { no: 2, name: "id", kind: "message", T: String },
    { no: 3, name: "extension", kind: "message", T: Extension, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media_StatusCode {
    return new Media_StatusCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media_StatusCode {
    return new Media_StatusCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media_StatusCode {
    return new Media_StatusCode().fromJsonString(jsonString, options);
  }

  static equals(a: Media_StatusCode | PlainMessage<Media_StatusCode> | undefined, b: Media_StatusCode | PlainMessage<Media_StatusCode> | undefined): boolean {
    return proto3.util.equals(Media_StatusCode, a, b);
  }
}

/**
 * When Media was collected
 *
 * @generated from message google.fhir.r4.core.Media.CreatedX
 */
export class Media_CreatedX extends Message<Media_CreatedX> {
  /**
   * @generated from oneof google.fhir.r4.core.Media.CreatedX.choice
   */
  choice: {
    /**
     * @generated from field: google.fhir.r4.core.DateTime date_time = 1;
     */
    value: DateTime;
    case: "dateTime";
  } | {
    /**
     * @generated from field: google.fhir.r4.core.Period period = 2;
     */
    value: Period;
    case: "period";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Media_CreatedX>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.fhir.r4.core.Media.CreatedX";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_time", kind: "message", T: DateTime, oneof: "choice" },
    { no: 2, name: "period", kind: "message", T: Period, oneof: "choice" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Media_CreatedX {
    return new Media_CreatedX().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Media_CreatedX {
    return new Media_CreatedX().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Media_CreatedX {
    return new Media_CreatedX().fromJsonString(jsonString, options);
  }

  static equals(a: Media_CreatedX | PlainMessage<Media_CreatedX> | undefined, b: Media_CreatedX | PlainMessage<Media_CreatedX> | undefined): boolean {
    return proto3.util.equals(Media_CreatedX, a, b);
  }
}

